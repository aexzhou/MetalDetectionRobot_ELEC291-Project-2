0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Apr 02 20:10:35 2024
0000              5   ;--------------------------------------------------------
                  5   $name Device
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _char2int
0000             28            public _printCharAsBinary
0000             29            public _SendATCommand
0000             30            public _waitms_or_RI1
0000             31            public _RXU1
0000             32            public _getstr1
0000             33            public _getchar1_with_timeout
0000             34            public _getchar1
0000             35            public _sendstr1
0000             36            public _putchar1
0000             37            public _UART1_Init
0000             38            public _waitms
0000             39            public _Timer3us
0000             40            public __c51_external_startup
0000             41            public _buff
0000             42            public _rbuff
0000             43            public _tbuff
0000             44   ;--------------------------------------------------------
0000             45   ; Special Function Registers
0000             46   ;--------------------------------------------------------
0000             47   _ACC            DATA 0xe0
0000             48   _ADC0ASAH       DATA 0xb6
0000             49   _ADC0ASAL       DATA 0xb5
0000             50   _ADC0ASCF       DATA 0xa1
0000             51   _ADC0ASCT       DATA 0xc7
0000             52   _ADC0CF0        DATA 0xbc
0000             53   _ADC0CF1        DATA 0xb9
0000             54   _ADC0CF2        DATA 0xdf
0000             55   _ADC0CN0        DATA 0xe8
0000             56   _ADC0CN1        DATA 0xb2
0000             57   _ADC0CN2        DATA 0xb3
0000             58   _ADC0GTH        DATA 0xc4
0000             59   _ADC0GTL        DATA 0xc3
0000             60   _ADC0H          DATA 0xbe
0000             61   _ADC0L          DATA 0xbd
0000             62   _ADC0LTH        DATA 0xc6
0000             63   _ADC0LTL        DATA 0xc5
0000             64   _ADC0MX         DATA 0xbb
0000             65   _B              DATA 0xf0
0000             66   _CKCON0         DATA 0x8e
0000             67   _CKCON1         DATA 0xa6
0000             68   _CLEN0          DATA 0xc6
0000             69   _CLIE0          DATA 0xc7
0000             70   _CLIF0          DATA 0xe8
0000             71   _CLKSEL         DATA 0xa9
0000             72   _CLOUT0         DATA 0xd1
0000             73   _CLU0CF         DATA 0xb1
0000             74   _CLU0FN         DATA 0xaf
0000             75   _CLU0MX         DATA 0x84
0000             76   _CLU1CF         DATA 0xb3
0000             77   _CLU1FN         DATA 0xb2
0000             78   _CLU1MX         DATA 0x85
0000             79   _CLU2CF         DATA 0xb6
0000             80   _CLU2FN         DATA 0xb5
0000             81   _CLU2MX         DATA 0x91
0000             82   _CLU3CF         DATA 0xbf
0000             83   _CLU3FN         DATA 0xbe
0000             84   _CLU3MX         DATA 0xae
0000             85   _CMP0CN0        DATA 0x9b
0000             86   _CMP0CN1        DATA 0x99
0000             87   _CMP0MD         DATA 0x9d
0000             88   _CMP0MX         DATA 0x9f
0000             89   _CMP1CN0        DATA 0xbf
0000             90   _CMP1CN1        DATA 0xac
0000             91   _CMP1MD         DATA 0xab
0000             92   _CMP1MX         DATA 0xaa
0000             93   _CRC0CN0        DATA 0xce
0000             94   _CRC0CN1        DATA 0x86
0000             95   _CRC0CNT        DATA 0xd3
0000             96   _CRC0DAT        DATA 0xcb
0000             97   _CRC0FLIP       DATA 0xcf
0000             98   _CRC0IN         DATA 0xca
0000             99   _CRC0ST         DATA 0xd2
0000            100   _DAC0CF0        DATA 0x91
0000            101   _DAC0CF1        DATA 0x92
0000            102   _DAC0H          DATA 0x85
0000            103   _DAC0L          DATA 0x84
0000            104   _DAC1CF0        DATA 0x93
0000            105   _DAC1CF1        DATA 0x94
0000            106   _DAC1H          DATA 0x8a
0000            107   _DAC1L          DATA 0x89
0000            108   _DAC2CF0        DATA 0x95
0000            109   _DAC2CF1        DATA 0x96
0000            110   _DAC2H          DATA 0x8c
0000            111   _DAC2L          DATA 0x8b
0000            112   _DAC3CF0        DATA 0x9a
0000            113   _DAC3CF1        DATA 0x9c
0000            114   _DAC3H          DATA 0x8e
0000            115   _DAC3L          DATA 0x8d
0000            116   _DACGCF0        DATA 0x88
0000            117   _DACGCF1        DATA 0x98
0000            118   _DACGCF2        DATA 0xa2
0000            119   _DERIVID        DATA 0xad
0000            120   _DEVICEID       DATA 0xb5
0000            121   _DPH            DATA 0x83
0000            122   _DPL            DATA 0x82
0000            123   _EIE1           DATA 0xe6
0000            124   _EIE2           DATA 0xf3
0000            125   _EIP1           DATA 0xbb
0000            126   _EIP1H          DATA 0xee
0000            127   _EIP2           DATA 0xed
0000            128   _EIP2H          DATA 0xf6
0000            129   _EMI0CN         DATA 0xe7
0000            130   _FLKEY          DATA 0xb7
0000            131   _HFO0CAL        DATA 0xc7
0000            132   _HFO1CAL        DATA 0xd6
0000            133   _HFOCN          DATA 0xef
0000            134   _I2C0ADM        DATA 0xff
0000            135   _I2C0CN0        DATA 0xba
0000            136   _I2C0DIN        DATA 0xbc
0000            137   _I2C0DOUT       DATA 0xbb
0000            138   _I2C0FCN0       DATA 0xad
0000            139   _I2C0FCN1       DATA 0xab
0000            140   _I2C0FCT        DATA 0xf5
0000            141   _I2C0SLAD       DATA 0xbd
0000            142   _I2C0STAT       DATA 0xb9
0000            143   _IE             DATA 0xa8
0000            144   _IP             DATA 0xb8
0000            145   _IPH            DATA 0xf2
0000            146   _IT01CF         DATA 0xe4
0000            147   _LFO0CN         DATA 0xb1
0000            148   _P0             DATA 0x80
0000            149   _P0MASK         DATA 0xfe
0000            150   _P0MAT          DATA 0xfd
0000            151   _P0MDIN         DATA 0xf1
0000            152   _P0MDOUT        DATA 0xa4
0000            153   _P0SKIP         DATA 0xd4
0000            154   _P1             DATA 0x90
0000            155   _P1MASK         DATA 0xee
0000            156   _P1MAT          DATA 0xed
0000            157   _P1MDIN         DATA 0xf2
0000            158   _P1MDOUT        DATA 0xa5
0000            159   _P1SKIP         DATA 0xd5
0000            160   _P2             DATA 0xa0
0000            161   _P2MASK         DATA 0xfc
0000            162   _P2MAT          DATA 0xfb
0000            163   _P2MDIN         DATA 0xf3
0000            164   _P2MDOUT        DATA 0xa6
0000            165   _P2SKIP         DATA 0xcc
0000            166   _P3             DATA 0xb0
0000            167   _P3MDIN         DATA 0xf4
0000            168   _P3MDOUT        DATA 0x9c
0000            169   _PCA0CENT       DATA 0x9e
0000            170   _PCA0CLR        DATA 0x9c
0000            171   _PCA0CN0        DATA 0xd8
0000            172   _PCA0CPH0       DATA 0xfc
0000            173   _PCA0CPH1       DATA 0xea
0000            174   _PCA0CPH2       DATA 0xec
0000            175   _PCA0CPH3       DATA 0xf5
0000            176   _PCA0CPH4       DATA 0x85
0000            177   _PCA0CPH5       DATA 0xde
0000            178   _PCA0CPL0       DATA 0xfb
0000            179   _PCA0CPL1       DATA 0xe9
0000            180   _PCA0CPL2       DATA 0xeb
0000            181   _PCA0CPL3       DATA 0xf4
0000            182   _PCA0CPL4       DATA 0x84
0000            183   _PCA0CPL5       DATA 0xdd
0000            184   _PCA0CPM0       DATA 0xda
0000            185   _PCA0CPM1       DATA 0xdb
0000            186   _PCA0CPM2       DATA 0xdc
0000            187   _PCA0CPM3       DATA 0xae
0000            188   _PCA0CPM4       DATA 0xaf
0000            189   _PCA0CPM5       DATA 0xcc
0000            190   _PCA0H          DATA 0xfa
0000            191   _PCA0L          DATA 0xf9
0000            192   _PCA0MD         DATA 0xd9
0000            193   _PCA0POL        DATA 0x96
0000            194   _PCA0PWM        DATA 0xf7
0000            195   _PCON0          DATA 0x87
0000            196   _PCON1          DATA 0xcd
0000            197   _PFE0CN         DATA 0xc1
0000            198   _PRTDRV         DATA 0xf6
0000            199   _PSCTL          DATA 0x8f
0000            200   _PSTAT0         DATA 0xaa
0000            201   _PSW            DATA 0xd0
0000            202   _REF0CN         DATA 0xd1
0000            203   _REG0CN         DATA 0xc9
0000            204   _REVID          DATA 0xb6
0000            205   _RSTSRC         DATA 0xef
0000            206   _SBCON1         DATA 0x94
0000            207   _SBRLH1         DATA 0x96
0000            208   _SBRLL1         DATA 0x95
0000            209   _SBUF           DATA 0x99
0000            210   _SBUF0          DATA 0x99
0000            211   _SBUF1          DATA 0x92
0000            212   _SCON           DATA 0x98
0000            213   _SCON0          DATA 0x98
0000            214   _SCON1          DATA 0xc8
0000            215   _SFRPAGE        DATA 0xa7
0000            216   _SFRPGCN        DATA 0xbc
0000            217   _SFRSTACK       DATA 0xd7
0000            218   _SMB0ADM        DATA 0xd6
0000            219   _SMB0ADR        DATA 0xd7
0000            220   _SMB0CF         DATA 0xc1
0000            221   _SMB0CN0        DATA 0xc0
0000            222   _SMB0DAT        DATA 0xc2
0000            223   _SMB0FCN0       DATA 0xc3
0000            224   _SMB0FCN1       DATA 0xc4
0000            225   _SMB0FCT        DATA 0xef
0000            226   _SMB0RXLN       DATA 0xc5
0000            227   _SMB0TC         DATA 0xac
0000            228   _SMOD1          DATA 0x93
0000            229   _SP             DATA 0x81
0000            230   _SPI0CFG        DATA 0xa1
0000            231   _SPI0CKR        DATA 0xa2
0000            232   _SPI0CN0        DATA 0xf8
0000            233   _SPI0DAT        DATA 0xa3
0000            234   _SPI0FCN0       DATA 0x9a
0000            235   _SPI0FCN1       DATA 0x9b
0000            236   _SPI0FCT        DATA 0xf7
0000            237   _SPI0PCF        DATA 0xdf
0000            238   _TCON           DATA 0x88
0000            239   _TH0            DATA 0x8c
0000            240   _TH1            DATA 0x8d
0000            241   _TL0            DATA 0x8a
0000            242   _TL1            DATA 0x8b
0000            243   _TMOD           DATA 0x89
0000            244   _TMR2CN0        DATA 0xc8
0000            245   _TMR2CN1        DATA 0xfd
0000            246   _TMR2H          DATA 0xcf
0000            247   _TMR2L          DATA 0xce
0000            248   _TMR2RLH        DATA 0xcb
0000            249   _TMR2RLL        DATA 0xca
0000            250   _TMR3CN0        DATA 0x91
0000            251   _TMR3CN1        DATA 0xfe
0000            252   _TMR3H          DATA 0x95
0000            253   _TMR3L          DATA 0x94
0000            254   _TMR3RLH        DATA 0x93
0000            255   _TMR3RLL        DATA 0x92
0000            256   _TMR4CN0        DATA 0x98
0000            257   _TMR4CN1        DATA 0xff
0000            258   _TMR4H          DATA 0xa5
0000            259   _TMR4L          DATA 0xa4
0000            260   _TMR4RLH        DATA 0xa3
0000            261   _TMR4RLL        DATA 0xa2
0000            262   _TMR5CN0        DATA 0xc0
0000            263   _TMR5CN1        DATA 0xf1
0000            264   _TMR5H          DATA 0xd5
0000            265   _TMR5L          DATA 0xd4
0000            266   _TMR5RLH        DATA 0xd3
0000            267   _TMR5RLL        DATA 0xd2
0000            268   _UART0PCF       DATA 0xd9
0000            269   _UART1FCN0      DATA 0x9d
0000            270   _UART1FCN1      DATA 0xd8
0000            271   _UART1FCT       DATA 0xfa
0000            272   _UART1LIN       DATA 0x9e
0000            273   _UART1PCF       DATA 0xda
0000            274   _VDM0CN         DATA 0xff
0000            275   _WDTCN          DATA 0x97
0000            276   _XBR0           DATA 0xe1
0000            277   _XBR1           DATA 0xe2
0000            278   _XBR2           DATA 0xe3
0000            279   _XOSC0CN        DATA 0x86
0000            280   _DPTR           DATA 0x8382
0000            281   _TMR2RL         DATA 0xcbca
0000            282   _TMR3RL         DATA 0x9392
0000            283   _TMR4RL         DATA 0xa3a2
0000            284   _TMR5RL         DATA 0xd3d2
0000            285   _TMR0           DATA 0x8c8a
0000            286   _TMR1           DATA 0x8d8b
0000            287   _TMR2           DATA 0xcfce
0000            288   _TMR3           DATA 0x9594
0000            289   _TMR4           DATA 0xa5a4
0000            290   _TMR5           DATA 0xd5d4
0000            291   _SBRL1          DATA 0x9695
0000            292   _PCA0           DATA 0xfaf9
0000            293   _PCA0CP0        DATA 0xfcfb
0000            294   _PCA0CP1        DATA 0xeae9
0000            295   _PCA0CP2        DATA 0xeceb
0000            296   _PCA0CP3        DATA 0xf5f4
0000            297   _PCA0CP4        DATA 0x8584
0000            298   _PCA0CP5        DATA 0xdedd
0000            299   _ADC0ASA        DATA 0xb6b5
0000            300   _ADC0GT         DATA 0xc4c3
0000            301   _ADC0           DATA 0xbebd
0000            302   _ADC0LT         DATA 0xc6c5
0000            303   _DAC0           DATA 0x8584
0000            304   _DAC1           DATA 0x8a89
0000            305   _DAC2           DATA 0x8c8b
0000            306   _DAC3           DATA 0x8e8d
0000            307   ;--------------------------------------------------------
0000            308   ; special function bits
0000            309   ;--------------------------------------------------------
0000            310   _ACC_0          BIT 0xe0
0000            311   _ACC_1          BIT 0xe1
0000            312   _ACC_2          BIT 0xe2
0000            313   _ACC_3          BIT 0xe3
0000            314   _ACC_4          BIT 0xe4
0000            315   _ACC_5          BIT 0xe5
0000            316   _ACC_6          BIT 0xe6
0000            317   _ACC_7          BIT 0xe7
0000            318   _TEMPE          BIT 0xe8
0000            319   _ADGN0          BIT 0xe9
0000            320   _ADGN1          BIT 0xea
0000            321   _ADWINT         BIT 0xeb
0000            322   _ADBUSY         BIT 0xec
0000            323   _ADINT          BIT 0xed
0000            324   _IPOEN          BIT 0xee
0000            325   _ADEN           BIT 0xef
0000            326   _B_0            BIT 0xf0
0000            327   _B_1            BIT 0xf1
0000            328   _B_2            BIT 0xf2
0000            329   _B_3            BIT 0xf3
0000            330   _B_4            BIT 0xf4
0000            331   _B_5            BIT 0xf5
0000            332   _B_6            BIT 0xf6
0000            333   _B_7            BIT 0xf7
0000            334   _C0FIF          BIT 0xe8
0000            335   _C0RIF          BIT 0xe9
0000            336   _C1FIF          BIT 0xea
0000            337   _C1RIF          BIT 0xeb
0000            338   _C2FIF          BIT 0xec
0000            339   _C2RIF          BIT 0xed
0000            340   _C3FIF          BIT 0xee
0000            341   _C3RIF          BIT 0xef
0000            342   _D1SRC0         BIT 0x88
0000            343   _D1SRC1         BIT 0x89
0000            344   _D1AMEN         BIT 0x8a
0000            345   _D01REFSL       BIT 0x8b
0000            346   _D3SRC0         BIT 0x8c
0000            347   _D3SRC1         BIT 0x8d
0000            348   _D3AMEN         BIT 0x8e
0000            349   _D23REFSL       BIT 0x8f
0000            350   _D0UDIS         BIT 0x98
0000            351   _D1UDIS         BIT 0x99
0000            352   _D2UDIS         BIT 0x9a
0000            353   _D3UDIS         BIT 0x9b
0000            354   _EX0            BIT 0xa8
0000            355   _ET0            BIT 0xa9
0000            356   _EX1            BIT 0xaa
0000            357   _ET1            BIT 0xab
0000            358   _ES0            BIT 0xac
0000            359   _ET2            BIT 0xad
0000            360   _ESPI0          BIT 0xae
0000            361   _EA             BIT 0xaf
0000            362   _PX0            BIT 0xb8
0000            363   _PT0            BIT 0xb9
0000            364   _PX1            BIT 0xba
0000            365   _PT1            BIT 0xbb
0000            366   _PS0            BIT 0xbc
0000            367   _PT2            BIT 0xbd
0000            368   _PSPI0          BIT 0xbe
0000            369   _P0_0           BIT 0x80
0000            370   _P0_1           BIT 0x81
0000            371   _P0_2           BIT 0x82
0000            372   _P0_3           BIT 0x83
0000            373   _P0_4           BIT 0x84
0000            374   _P0_5           BIT 0x85
0000            375   _P0_6           BIT 0x86
0000            376   _P0_7           BIT 0x87
0000            377   _P1_0           BIT 0x90
0000            378   _P1_1           BIT 0x91
0000            379   _P1_2           BIT 0x92
0000            380   _P1_3           BIT 0x93
0000            381   _P1_4           BIT 0x94
0000            382   _P1_5           BIT 0x95
0000            383   _P1_6           BIT 0x96
0000            384   _P1_7           BIT 0x97
0000            385   _P2_0           BIT 0xa0
0000            386   _P2_1           BIT 0xa1
0000            387   _P2_2           BIT 0xa2
0000            388   _P2_3           BIT 0xa3
0000            389   _P2_4           BIT 0xa4
0000            390   _P2_5           BIT 0xa5
0000            391   _P2_6           BIT 0xa6
0000            392   _P3_0           BIT 0xb0
0000            393   _P3_1           BIT 0xb1
0000            394   _P3_2           BIT 0xb2
0000            395   _P3_3           BIT 0xb3
0000            396   _P3_4           BIT 0xb4
0000            397   _P3_7           BIT 0xb7
0000            398   _CCF0           BIT 0xd8
0000            399   _CCF1           BIT 0xd9
0000            400   _CCF2           BIT 0xda
0000            401   _CCF3           BIT 0xdb
0000            402   _CCF4           BIT 0xdc
0000            403   _CCF5           BIT 0xdd
0000            404   _CR             BIT 0xde
0000            405   _CF             BIT 0xdf
0000            406   _PARITY         BIT 0xd0
0000            407   _F1             BIT 0xd1
0000            408   _OV             BIT 0xd2
0000            409   _RS0            BIT 0xd3
0000            410   _RS1            BIT 0xd4
0000            411   _F0             BIT 0xd5
0000            412   _AC             BIT 0xd6
0000            413   _CY             BIT 0xd7
0000            414   _RI             BIT 0x98
0000            415   _TI             BIT 0x99
0000            416   _RB8            BIT 0x9a
0000            417   _TB8            BIT 0x9b
0000            418   _REN            BIT 0x9c
0000            419   _CE             BIT 0x9d
0000            420   _SMODE          BIT 0x9e
0000            421   _RI1            BIT 0xc8
0000            422   _TI1            BIT 0xc9
0000            423   _RBX1           BIT 0xca
0000            424   _TBX1           BIT 0xcb
0000            425   _REN1           BIT 0xcc
0000            426   _PERR1          BIT 0xcd
0000            427   _OVR1           BIT 0xce
0000            428   _SI             BIT 0xc0
0000            429   _ACK            BIT 0xc1
0000            430   _ARBLOST        BIT 0xc2
0000            431   _ACKRQ          BIT 0xc3
0000            432   _STO            BIT 0xc4
0000            433   _STA            BIT 0xc5
0000            434   _TXMODE         BIT 0xc6
0000            435   _MASTER         BIT 0xc7
0000            436   _SPIEN          BIT 0xf8
0000            437   _TXNF           BIT 0xf9
0000            438   _NSSMD0         BIT 0xfa
0000            439   _NSSMD1         BIT 0xfb
0000            440   _RXOVRN         BIT 0xfc
0000            441   _MODF           BIT 0xfd
0000            442   _WCOL           BIT 0xfe
0000            443   _SPIF           BIT 0xff
0000            444   _IT0            BIT 0x88
0000            445   _IE0            BIT 0x89
0000            446   _IT1            BIT 0x8a
0000            447   _IE1            BIT 0x8b
0000            448   _TR0            BIT 0x8c
0000            449   _TF0            BIT 0x8d
0000            450   _TR1            BIT 0x8e
0000            451   _TF1            BIT 0x8f
0000            452   _T2XCLK0        BIT 0xc8
0000            453   _T2XCLK1        BIT 0xc9
0000            454   _TR2            BIT 0xca
0000            455   _T2SPLIT        BIT 0xcb
0000            456   _TF2CEN         BIT 0xcc
0000            457   _TF2LEN         BIT 0xcd
0000            458   _TF2L           BIT 0xce
0000            459   _TF2H           BIT 0xcf
0000            460   _T4XCLK0        BIT 0x98
0000            461   _T4XCLK1        BIT 0x99
0000            462   _TR4            BIT 0x9a
0000            463   _T4SPLIT        BIT 0x9b
0000            464   _TF4CEN         BIT 0x9c
0000            465   _TF4LEN         BIT 0x9d
0000            466   _TF4L           BIT 0x9e
0000            467   _TF4H           BIT 0x9f
0000            468   _T5XCLK0        BIT 0xc0
0000            469   _T5XCLK1        BIT 0xc1
0000            470   _TR5            BIT 0xc2
0000            471   _T5SPLIT        BIT 0xc3
0000            472   _TF5CEN         BIT 0xc4
0000            473   _TF5LEN         BIT 0xc5
0000            474   _TF5L           BIT 0xc6
0000            475   _TF5H           BIT 0xc7
0000            476   _RIE            BIT 0xd8
0000            477   _RXTO0          BIT 0xd9
0000            478   _RXTO1          BIT 0xda
0000            479   _RFRQ           BIT 0xdb
0000            480   _TIE            BIT 0xdc
0000            481   _TXHOLD         BIT 0xdd
0000            482   _TXNF1          BIT 0xde
0000            483   _TFRQ           BIT 0xdf
0000            484   ;--------------------------------------------------------
0000            485   ; overlayable register banks
0000            486   ;--------------------------------------------------------
0000            487            rbank0 segment data overlay
0000            488   ;--------------------------------------------------------
0000            489   ; internal ram data
0000            490   ;--------------------------------------------------------
0000            491            rseg R_DSEG
0000            492   _main_lmotor_1_99:
0000            493            ds 2
0002            494   _main_rmotor_1_99:
0002            495            ds 2
0004            496   ;--------------------------------------------------------
0004            497   ; overlayable items in internal ram 
0004            498   ;--------------------------------------------------------
0000            499            rseg    R_OSEG
0000            500            rseg    R_OSEG
0000            501            rseg    R_OSEG
0000            502   ;--------------------------------------------------------
0000            503   ; indirectly addressable internal ram data
0000            504   ;--------------------------------------------------------
0000            505            rseg R_ISEG
0000            506   _tbuff:
0000            507            ds 20
0014            508   _rbuff:
0014            509            ds 13
0021            510   _buff:
0021            511            ds 20
0035            512   ;--------------------------------------------------------
0035            513   ; absolute internal ram data
0035            514   ;--------------------------------------------------------
0000            515            DSEG
0000            516   ;--------------------------------------------------------
0000            517   ; bit data
0000            518   ;--------------------------------------------------------
0000            519            rseg R_BSEG
0000            520   ;--------------------------------------------------------
0000            521   ; paged external ram data
0000            522   ;--------------------------------------------------------
0000            523            rseg R_PSEG
0000            524   ;--------------------------------------------------------
0000            525   ; external ram data
0000            526   ;--------------------------------------------------------
0000            527            rseg R_XSEG
0000            528   ;--------------------------------------------------------
0000            529   ; absolute external ram data
0000            530   ;--------------------------------------------------------
0000            531            XSEG
0000            532   ;--------------------------------------------------------
0000            533   ; external initialized ram data
0000            534   ;--------------------------------------------------------
0000            535            rseg R_IXSEG
0000            536            rseg R_HOME
0000            537            rseg R_GSINIT
0000            538            rseg R_CSEG
0000            539   ;--------------------------------------------------------
0000            540   ; Reset entry point and interrupt vectors
0000            541   ;--------------------------------------------------------
0000            542            CSEG at 0x0000
0000 020000     543            ljmp    _crt0
0003            544   ;--------------------------------------------------------
0003            545   ; global & static initialisations
0003            546   ;--------------------------------------------------------
0000            547            rseg R_HOME
0000            548            rseg R_GSINIT
0000            549            rseg R_GSINIT
0000            550   ;--------------------------------------------------------
0000            551   ; data variables initialization
0000            552   ;--------------------------------------------------------
0000            553            rseg R_DINIT
0000            554            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            555   ;--------------------------------------------------------
0000            556   ; code
0000            557   ;--------------------------------------------------------
0000            558            rseg R_CSEG
0000            559   ;------------------------------------------------------------
0000            560   ;Allocation info for local variables in function '_c51_external_startup'
0000            561   ;------------------------------------------------------------
0000            562   ;------------------------------------------------------------
0000            563   ;        Device.c:13: char _c51_external_startup (void)
0000            564   ;        -----------------------------------------
0000            565   ;         function _c51_external_startup
0000            566   ;        -----------------------------------------
0000            567   __c51_external_startup:
0000            568            using   0
0000            569   ;        Device.c:16: SFRPAGE = 0x00;
0000 75A700     570            mov     _SFRPAGE,#0x00
0003            571   ;        Device.c:17: WDTCN = 0xDE; //First key
0003 7597DE     572            mov     _WDTCN,#0xDE
0006            573   ;        Device.c:18: WDTCN = 0xAD; //Second key
0006 7597AD     574            mov     _WDTCN,#0xAD
0009            575   ;        Device.c:20: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     576            mov     _VDM0CN,#0x80
000C            577   ;        Device.c:21: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     578            mov     _RSTSRC,#0x06
000F            579   ;        Device.c:28: SFRPAGE = 0x10;
000F 75A710     580            mov     _SFRPAGE,#0x10
0012            581   ;        Device.c:29: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     582            mov     _PFE0CN,#0x20
0015            583   ;        Device.c:30: SFRPAGE = 0x00;
0015 75A700     584            mov     _SFRPAGE,#0x00
0018            585   ;        Device.c:51: CLKSEL = 0x00;
0018 75A900     586            mov     _CLKSEL,#0x00
001B            587   ;        Device.c:52: CLKSEL = 0x00;
001B 75A900     588            mov     _CLKSEL,#0x00
001E            589   ;        Device.c:53: while ((CLKSEL & 0x80) == 0);
001E            590   L002001?:
001E E5A9       591            mov     a,_CLKSEL
0020 30E7B0     592            jnb     acc.7,L002001?
0023            593   ;        Device.c:54: CLKSEL = 0x03;
0023 75A903     594            mov     _CLKSEL,#0x03
0026            595   ;        Device.c:55: CLKSEL = 0x03;
0026 75A903     596            mov     _CLKSEL,#0x03
0029            597   ;        Device.c:56: while ((CLKSEL & 0x80) == 0);
0029            598   L002004?:
0029 E5A9       599            mov     a,_CLKSEL
002B 30E730     600            jnb     acc.7,L002004?
002E            601   ;        Device.c:61: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     602            orl     _P0MDOUT,#0x11
0031            603   ;        Device.c:62: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     604            orl     _P2MDOUT,#0x01
0034            605   ;        Device.c:63: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     606            mov     _XBR0,#0x01
0037            607   ;        Device.c:64: XBR1     = 0X00;
0037 75E200     608            mov     _XBR1,#0x00
003A            609   ;        Device.c:65: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     610            mov     _XBR2,#0x41
003D            611   ;        Device.c:71: SCON0 = 0x10;
003D 759810     612            mov     _SCON0,#0x10
0040            613   ;        Device.c:72: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     614            mov     _TH1,#0xE6
0043            615   ;        Device.c:73: TL1 = TH1;      // Init Timer1
0043 858D8B     616            mov     _TL1,_TH1
0046            617   ;        Device.c:74: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     618            anl     _TMOD,#0x0F
0049            619   ;        Device.c:75: TMOD |=  0x20;                       
0049 438920     620            orl     _TMOD,#0x20
004C            621   ;        Device.c:76: TR1 = 1; // START Timer1
004C D28E       622            setb    _TR1
004E            623   ;        Device.c:77: TI = 1;  // Indicate TX0 ready
004E D299       624            setb    _TI
0050            625   ;        Device.c:79: return 0;
0050 758200     626            mov     dpl,#0x00
0053 22         627            ret
0054            628   ;------------------------------------------------------------
0054            629   ;Allocation info for local variables in function 'Timer3us'
0054            630   ;------------------------------------------------------------
0054            631   ;us                        Allocated to registers r2 
0054            632   ;i                         Allocated to registers r3 
0054            633   ;------------------------------------------------------------
0054            634   ;        Device.c:83: void Timer3us(unsigned char us)
0054            635   ;        -----------------------------------------
0054            636   ;         function Timer3us
0054            637   ;        -----------------------------------------
0054            638   _Timer3us:
0054 AA82       639            mov     r2,dpl
0056            640   ;        Device.c:88: CKCON0|=0b_0100_0000;
0056 438E40     641            orl     _CKCON0,#0x40
0059            642   ;        Device.c:90: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0059 7592B8     643            mov     _TMR3RL,#0xB8
005C 7593FF     644            mov     (_TMR3RL >> 8),#0xFF
005F            645   ;        Device.c:91: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
005F 859294     646            mov     _TMR3,_TMR3RL
0062 859395     647            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0065            648   ;        Device.c:93: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0065 759104     649            mov     _TMR3CN0,#0x04
0068            650   ;        Device.c:94: for (i = 0; i < us; i++)       // Count <us> overflows
0068 7B00       651            mov     r3,#0x00
006A            652   L003004?:
006A C3         653            clr     c
006B EB         654            mov     a,r3
006C 9A         655            subb    a,r2
006D 5000       656            jnc     L003007?
006F            657   ;        Device.c:96: while (!(TMR3CN0 & 0x80));  // Wait for overflow
006F            658   L003001?:
006F E591       659            mov     a,_TMR3CN0
0071 30E730     660            jnb     acc.7,L003001?
0074            661   ;        Device.c:97: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0074 53917F     662            anl     _TMR3CN0,#0x7F
0077            663   ;        Device.c:94: for (i = 0; i < us; i++)       // Count <us> overflows
0077 0B         664            inc     r3
0078 8000       665            sjmp    L003004?
007A            666   L003007?:
007A            667   ;        Device.c:99: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
007A 759100     668            mov     _TMR3CN0,#0x00
007D 22         669            ret
007E            670   ;------------------------------------------------------------
007E            671   ;Allocation info for local variables in function 'waitms'
007E            672   ;------------------------------------------------------------
007E            673   ;ms                        Allocated to registers r2 r3 
007E            674   ;j                         Allocated to registers r4 r5 
007E            675   ;k                         Allocated to registers r6 
007E            676   ;------------------------------------------------------------
007E            677   ;        Device.c:102: void waitms (unsigned int ms)
007E            678   ;        -----------------------------------------
007E            679   ;         function waitms
007E            680   ;        -----------------------------------------
007E            681   _waitms:
007E AA82       682            mov     r2,dpl
0080 AB83       683            mov     r3,dph
0082            684   ;        Device.c:106: for(j=0; j<ms; j++)
0082 7C00       685            mov     r4,#0x00
0084 7D00       686            mov     r5,#0x00
0086            687   L004005?:
0086 C3         688            clr     c
0087 EC         689            mov     a,r4
0088 9A         690            subb    a,r2
0089 ED         691            mov     a,r5
008A 9B         692            subb    a,r3
008B 5000       693            jnc     L004009?
008D            694   ;        Device.c:107: for (k=0; k<4; k++) Timer3us(250);
008D 7E00       695            mov     r6,#0x00
008F            696   L004001?:
008F BE04B0     697            cjne    r6,#0x04,L004018?
0092            698   L004018?:
0092 5000       699            jnc     L004007?
0094 7582FA     700            mov     dpl,#0xFA
0097 C002       701            push    ar2
0099 C003       702            push    ar3
009B C004       703            push    ar4
009D C005       704            push    ar5
009F C006       705            push    ar6
00A1 120000     706            lcall   _Timer3us
00A4 D006       707            pop     ar6
00A6 D005       708            pop     ar5
00A8 D004       709            pop     ar4
00AA D003       710            pop     ar3
00AC D002       711            pop     ar2
00AE 0E         712            inc     r6
00AF 8000       713            sjmp    L004001?
00B1            714   L004007?:
00B1            715   ;        Device.c:106: for(j=0; j<ms; j++)
00B1 0C         716            inc     r4
00B2 BC00B0     717            cjne    r4,#0x00,L004005?
00B5 0D         718            inc     r5
00B6 8000       719            sjmp    L004005?
00B8            720   L004009?:
00B8 22         721            ret
00B9            722   ;------------------------------------------------------------
00B9            723   ;Allocation info for local variables in function 'UART1_Init'
00B9            724   ;------------------------------------------------------------
00B9            725   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00B9            726   ;------------------------------------------------------------
00B9            727   ;        Device.c:110: void UART1_Init (unsigned long baudrate)
00B9            728   ;        -----------------------------------------
00B9            729   ;         function UART1_Init
00B9            730   ;        -----------------------------------------
00B9            731   _UART1_Init:
00B9 AA82       732            mov     r2,dpl
00BB AB83       733            mov     r3,dph
00BD ACF0       734            mov     r4,b
00BF FD         735            mov     r5,a
00C0            736   ;        Device.c:112: SFRPAGE = 0x20;
00C0 75A720     737            mov     _SFRPAGE,#0x20
00C3            738   ;        Device.c:113: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00C3 75930C     739            mov     _SMOD1,#0x0C
00C6            740   ;        Device.c:114: SCON1 = 0x10;
00C6 75C810     741            mov     _SCON1,#0x10
00C9            742   ;        Device.c:115: SBCON1 =0x00;   // disable baud rate generator
00C9 759400     743            mov     _SBCON1,#0x00
00CC            744   ;        Device.c:116: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00CC 8A00       745            mov     __divulong_PARM_2,r2
00CE 8B01       746            mov     (__divulong_PARM_2 + 1),r3
00D0 8C02       747            mov     (__divulong_PARM_2 + 2),r4
00D2 8D03       748            mov     (__divulong_PARM_2 + 3),r5
00D4 90A200     749            mov     dptr,#0xA200
00D7 75F04A     750            mov     b,#0x4A
00DA 7404       751            mov     a,#0x04
00DC 120000     752            lcall   __divulong
00DF AA82       753            mov     r2,dpl
00E1 AB83       754            mov     r3,dph
00E3 ACF0       755            mov     r4,b
00E5 FD         756            mov     r5,a
00E6 750018     757            mov     __divulong_PARM_2,#0x18
00E9 E4         758            clr     a
00EA F501       759            mov     (__divulong_PARM_2 + 1),a
00EC F502       760            mov     (__divulong_PARM_2 + 2),a
00EE F503       761            mov     (__divulong_PARM_2 + 3),a
00F0 8A82       762            mov     dpl,r2
00F2 8B83       763            mov     dph,r3
00F4 8CF0       764            mov     b,r4
00F6 ED         765            mov     a,r5
00F7 120000     766            lcall   __divulong
00FA AA82       767            mov     r2,dpl
00FC AB83       768            mov     r3,dph
00FE ACF0       769            mov     r4,b
0100 FD         770            mov     r5,a
0101 E4         771            clr     a
0102 C3         772            clr     c
0103 9A         773            subb    a,r2
0104 FA         774            mov     r2,a
0105 E4         775            clr     a
0106 9B         776            subb    a,r3
0107 FB         777            mov     r3,a
0108 7401       778            mov     a,#0x01
010A 9C         779            subb    a,r4
010B E4         780            clr     a
010C 9D         781            subb    a,r5
010D 8A95       782            mov     _SBRL1,r2
010F 8B96       783            mov     (_SBRL1 >> 8),r3
0111            784   ;        Device.c:117: TI1 = 1; // indicate ready for TX
0111 D2C9       785            setb    _TI1
0113            786   ;        Device.c:118: SBCON1 |= 0x40;   // enable baud rate generator
0113 439440     787            orl     _SBCON1,#0x40
0116            788   ;        Device.c:119: SFRPAGE = 0x00;
0116 75A700     789            mov     _SFRPAGE,#0x00
0119 22         790            ret
011A            791   ;------------------------------------------------------------
011A            792   ;Allocation info for local variables in function 'putchar1'
011A            793   ;------------------------------------------------------------
011A            794   ;c                         Allocated to registers r2 
011A            795   ;------------------------------------------------------------
011A            796   ;        Device.c:122: void putchar1 (char c) 
011A            797   ;        -----------------------------------------
011A            798   ;         function putchar1
011A            799   ;        -----------------------------------------
011A            800   _putchar1:
011A AA82       801            mov     r2,dpl
011C            802   ;        Device.c:124: SFRPAGE = 0x20;
011C 75A720     803            mov     _SFRPAGE,#0x20
011F            804   ;        Device.c:125: while (!TI1);
011F            805   L006001?:
011F            806   ;        Device.c:126: TI1=0;
011F 10C930     807            jbc     _TI1,L006008?
0122 8000       808            sjmp    L006001?
0124            809   L006008?:
0124            810   ;        Device.c:127: SBUF1 = c;
0124 8A92       811            mov     _SBUF1,r2
0126            812   ;        Device.c:128: SFRPAGE = 0x00;
0126 75A700     813            mov     _SFRPAGE,#0x00
0129 22         814            ret
012A            815   ;------------------------------------------------------------
012A            816   ;Allocation info for local variables in function 'sendstr1'
012A            817   ;------------------------------------------------------------
012A            818   ;s                         Allocated to registers r2 r3 r4 
012A            819   ;------------------------------------------------------------
012A            820   ;        Device.c:131: void sendstr1 (char * s)
012A            821   ;        -----------------------------------------
012A            822   ;         function sendstr1
012A            823   ;        -----------------------------------------
012A            824   _sendstr1:
012A AA82       825            mov     r2,dpl
012C AB83       826            mov     r3,dph
012E ACF0       827            mov     r4,b
0130            828   ;        Device.c:133: while(*s)
0130            829   L007001?:
0130 8A82       830            mov     dpl,r2
0132 8B83       831            mov     dph,r3
0134 8CF0       832            mov     b,r4
0136 120000     833            lcall   __gptrget
0139 FD         834            mov     r5,a
013A 6000       835            jz      L007004?
013C            836   ;        Device.c:135: putchar1(*s);
013C 8D82       837            mov     dpl,r5
013E C002       838            push    ar2
0140 C003       839            push    ar3
0142 C004       840            push    ar4
0144 120000     841            lcall   _putchar1
0147 D004       842            pop     ar4
0149 D003       843            pop     ar3
014B D002       844            pop     ar2
014D            845   ;        Device.c:136: s++;      
014D 0A         846            inc     r2
014E BA0030     847            cjne    r2,#0x00,L007001?
0151 0B         848            inc     r3
0152 8000       849            sjmp    L007001?
0154            850   L007004?:
0154 22         851            ret
0155            852   ;------------------------------------------------------------
0155            853   ;Allocation info for local variables in function 'getchar1'
0155            854   ;------------------------------------------------------------
0155            855   ;c                         Allocated to registers 
0155            856   ;------------------------------------------------------------
0155            857   ;        Device.c:140: char getchar1 (void)
0155            858   ;        -----------------------------------------
0155            859   ;         function getchar1
0155            860   ;        -----------------------------------------
0155            861   _getchar1:
0155            862   ;        Device.c:143: SFRPAGE = 0x20;
0155 75A720     863            mov     _SFRPAGE,#0x20
0158            864   ;        Device.c:144: while (!RI1);
0158            865   L008001?:
0158            866   ;        Device.c:145: RI1=0;
0158 10C830     867            jbc     _RI1,L008008?
015B 8000       868            sjmp    L008001?
015D            869   L008008?:
015D            870   ;        Device.c:147: SCON1&=0b_0011_1111;
015D 53C83F     871            anl     _SCON1,#0x3F
0160            872   ;        Device.c:148: c = SBUF1;
0160 859282     873            mov     dpl,_SBUF1
0163            874   ;        Device.c:149: SFRPAGE = 0x00;
0163 75A700     875            mov     _SFRPAGE,#0x00
0166            876   ;        Device.c:150: return (c);
0166 22         877            ret
0167            878   ;------------------------------------------------------------
0167            879   ;Allocation info for local variables in function 'getchar1_with_timeout'
0167            880   ;------------------------------------------------------------
0167            881   ;c                         Allocated to registers 
0167            882   ;timeout                   Allocated to registers r2 r3 
0167            883   ;------------------------------------------------------------
0167            884   ;        Device.c:153: char getchar1_with_timeout (void)
0167            885   ;        -----------------------------------------
0167            886   ;         function getchar1_with_timeout
0167            887   ;        -----------------------------------------
0167            888   _getchar1_with_timeout:
0167            889   ;        Device.c:157: SFRPAGE = 0x20;
0167 75A720     890            mov     _SFRPAGE,#0x20
016A            891   ;        Device.c:159: while (!RI1)
016A 7A00       892            mov     r2,#0x00
016C 7B00       893            mov     r3,#0x00
016E            894   L009003?:
016E 20C830     895            jb      _RI1,L009005?
0171            896   ;        Device.c:161: SFRPAGE = 0x00;
0171 75A700     897            mov     _SFRPAGE,#0x00
0174            898   ;        Device.c:162: Timer3us(20);
0174 758214     899            mov     dpl,#0x14
0177 C002       900            push    ar2
0179 C003       901            push    ar3
017B 120000     902            lcall   _Timer3us
017E D003       903            pop     ar3
0180 D002       904            pop     ar2
0182            905   ;        Device.c:163: SFRPAGE = 0x20;
0182 75A720     906            mov     _SFRPAGE,#0x20
0185            907   ;        Device.c:164: timeout++;
0185 0A         908            inc     r2
0186 BA0070     909            cjne    r2,#0x00,L009012?
0189 0B         910            inc     r3
018A            911   L009012?:
018A            912   ;        Device.c:165: if(timeout==25000)
018A BAA8B0     913            cjne    r2,#0xA8,L009003?
018D BB61B0     914            cjne    r3,#0x61,L009003?
0190            915   ;        Device.c:167: SFRPAGE = 0x00;
0190 75A700     916            mov     _SFRPAGE,#0x00
0193            917   ;        Device.c:168: return ('\n'); // Timeout after half second
0193 75820A     918            mov     dpl,#0x0A
0196 22         919            ret
0197            920   L009005?:
0197            921   ;        Device.c:171: RI1=0;
0197 C2C8       922            clr     _RI1
0199            923   ;        Device.c:173: SCON1&=0b_0011_1111;
0199 53C83F     924            anl     _SCON1,#0x3F
019C            925   ;        Device.c:174: c = SBUF1;
019C 859282     926            mov     dpl,_SBUF1
019F            927   ;        Device.c:175: SFRPAGE = 0x00;
019F 75A700     928            mov     _SFRPAGE,#0x00
01A2            929   ;        Device.c:176: return (c);
01A2 22         930            ret
01A3            931   ;------------------------------------------------------------
01A3            932   ;Allocation info for local variables in function 'getstr1'
01A3            933   ;------------------------------------------------------------
01A3            934   ;s                         Allocated to registers r2 r3 r4 
01A3            935   ;c                         Allocated to registers r5 
01A3            936   ;------------------------------------------------------------
01A3            937   ;        Device.c:179: void getstr1 (char * s)
01A3            938   ;        -----------------------------------------
01A3            939   ;         function getstr1
01A3            940   ;        -----------------------------------------
01A3            941   _getstr1:
01A3 AA82       942            mov     r2,dpl
01A5 AB83       943            mov     r3,dph
01A7 ACF0       944            mov     r4,b
01A9            945   ;        Device.c:183: while(1)
01A9            946   L010004?:
01A9            947   ;        Device.c:185: c=getchar1_with_timeout();
01A9 C002       948            push    ar2
01AB C003       949            push    ar3
01AD C004       950            push    ar4
01AF 120000     951            lcall   _getchar1_with_timeout
01B2 AD82       952            mov     r5,dpl
01B4 D004       953            pop     ar4
01B6 D003       954            pop     ar3
01B8 D002       955            pop     ar2
01BA            956   ;        Device.c:186: if(c=='\n')
01BA BD0AF0     957            cjne    r5,#0x0A,L010002?
01BD            958   ;        Device.c:188: *s=0;
01BD 8A82       959            mov     dpl,r2
01BF 8B83       960            mov     dph,r3
01C1 8CF0       961            mov     b,r4
01C3 E4         962            clr     a
01C4            963   ;        Device.c:189: return;
01C4 020000     964            ljmp    __gptrput
01C7            965   L010002?:
01C7            966   ;        Device.c:191: *s=c;
01C7 8A82       967            mov     dpl,r2
01C9 8B83       968            mov     dph,r3
01CB 8CF0       969            mov     b,r4
01CD ED         970            mov     a,r5
01CE 120000     971            lcall   __gptrput
01D1 A3         972            inc     dptr
01D2 AA82       973            mov     r2,dpl
01D4 AB83       974            mov     r3,dph
01D6            975   ;        Device.c:192: s++;
01D6 8000       976            sjmp    L010004?
01D8            977   ;------------------------------------------------------------
01D8            978   ;Allocation info for local variables in function 'RXU1'
01D8            979   ;------------------------------------------------------------
01D8            980   ;------------------------------------------------------------
01D8            981   ;        Device.c:197: bit RXU1 (void)
01D8            982   ;        -----------------------------------------
01D8            983   ;         function RXU1
01D8            984   ;        -----------------------------------------
01D8            985   _RXU1:
01D8            986   ;        Device.c:200: SFRPAGE = 0x20;
01D8 75A720     987            mov     _SFRPAGE,#0x20
01DB            988   ;        Device.c:201: mybit=RI1;
01DB A2C8       989            mov     c,_RI1
01DD            990   ;        Device.c:202: SFRPAGE = 0x00;
01DD 75A700     991            mov     _SFRPAGE,#0x00
01E0            992   ;        Device.c:203: return mybit;
01E0 22         993            ret
01E1            994   ;------------------------------------------------------------
01E1            995   ;Allocation info for local variables in function 'waitms_or_RI1'
01E1            996   ;------------------------------------------------------------
01E1            997   ;ms                        Allocated to registers r2 r3 
01E1            998   ;j                         Allocated to registers r4 r5 
01E1            999   ;k                         Allocated to registers r6 
01E1           1000   ;------------------------------------------------------------
01E1           1001   ;        Device.c:206: void waitms_or_RI1 (unsigned int ms)
01E1           1002   ;        -----------------------------------------
01E1           1003   ;         function waitms_or_RI1
01E1           1004   ;        -----------------------------------------
01E1           1005   _waitms_or_RI1:
01E1 AA82      1006            mov     r2,dpl
01E3 AB83      1007            mov     r3,dph
01E5           1008   ;        Device.c:210: for(j=0; j<ms; j++)
01E5 7C00      1009            mov     r4,#0x00
01E7 7D00      1010            mov     r5,#0x00
01E9           1011   L012007?:
01E9 C3        1012            clr     c
01EA EC        1013            mov     a,r4
01EB 9A        1014            subb    a,r2
01EC ED        1015            mov     a,r5
01ED 9B        1016            subb    a,r3
01EE 5000      1017            jnc     L012011?
01F0           1018   ;        Device.c:212: for (k=0; k<4; k++)
01F0 7E00      1019            mov     r6,#0x00
01F2           1020   L012003?:
01F2 BE04F0    1021            cjne    r6,#0x04,L012019?
01F5           1022   L012019?:
01F5 5000      1023            jnc     L012009?
01F7           1024   ;        Device.c:214: if(RXU1()) return;
01F7 C002      1025            push    ar2
01F9 C003      1026            push    ar3
01FB C004      1027            push    ar4
01FD C005      1028            push    ar5
01FF C006      1029            push    ar6
0201 120000    1030            lcall   _RXU1
0204 E4        1031            clr     a
0205 33        1032            rlc     a
0206 D006      1033            pop     ar6
0208 D005      1034            pop     ar5
020A D004      1035            pop     ar4
020C D003      1036            pop     ar3
020E D002      1037            pop     ar2
0210 6000      1038            jz      L012002?
0212 22        1039            ret
0213           1040   L012002?:
0213           1041   ;        Device.c:215: Timer3us(250);
0213 7582FA    1042            mov     dpl,#0xFA
0216 C002      1043            push    ar2
0218 C003      1044            push    ar3
021A C004      1045            push    ar4
021C C005      1046            push    ar5
021E C006      1047            push    ar6
0220 120000    1048            lcall   _Timer3us
0223 D006      1049            pop     ar6
0225 D005      1050            pop     ar5
0227 D004      1051            pop     ar4
0229 D003      1052            pop     ar3
022B D002      1053            pop     ar2
022D           1054   ;        Device.c:212: for (k=0; k<4; k++)
022D 0E        1055            inc     r6
022E 8000      1056            sjmp    L012003?
0230           1057   L012009?:
0230           1058   ;        Device.c:210: for(j=0; j<ms; j++)
0230 0C        1059            inc     r4
0231 BC00F0    1060            cjne    r4,#0x00,L012007?
0234 0D        1061            inc     r5
0235 8000      1062            sjmp    L012007?
0237           1063   L012011?:
0237 22        1064            ret
0238           1065   ;------------------------------------------------------------
0238           1066   ;Allocation info for local variables in function 'SendATCommand'
0238           1067   ;------------------------------------------------------------
0238           1068   ;s                         Allocated to registers r2 r3 r4 
0238           1069   ;------------------------------------------------------------
0238           1070   ;        Device.c:220: void SendATCommand (char * s)
0238           1071   ;        -----------------------------------------
0238           1072   ;         function SendATCommand
0238           1073   ;        -----------------------------------------
0238           1074   _SendATCommand:
0238 AA82      1075            mov     r2,dpl
023A AB83      1076            mov     r3,dph
023C ACF0      1077            mov     r4,b
023E           1078   ;        Device.c:222: printf("Command: %s", s);
023E C002      1079            push    ar2
0240 C003      1080            push    ar3
0242 C004      1081            push    ar4
0244 C002      1082            push    ar2
0246 C003      1083            push    ar3
0248 C004      1084            push    ar4
024A 7470      1085            mov     a,#__str_0
024C C0E0      1086            push    acc
024E 7451      1087            mov     a,#(__str_0 >> 8)
0250 C0E0      1088            push    acc
0252 7480      1089            mov     a,#0x80
0254 C0E0      1090            push    acc
0256 120000    1091            lcall   _printf
0259 E581      1092            mov     a,sp
025B 24FA      1093            add     a,#0xfa
025D F581      1094            mov     sp,a
025F           1095   ;        Device.c:223: P2_0=0; // 'set' pin to 0 is 'AT' mode.
025F C2A0      1096            clr     _P2_0
0261           1097   ;        Device.c:224: waitms(5);
0261 900005    1098            mov     dptr,#0x0005
0264 120000    1099            lcall   _waitms
0267 D004      1100            pop     ar4
0269 D003      1101            pop     ar3
026B D002      1102            pop     ar2
026D           1103   ;        Device.c:225: sendstr1(s);
026D 8A82      1104            mov     dpl,r2
026F 8B83      1105            mov     dph,r3
0271 8CF0      1106            mov     b,r4
0273 120000    1107            lcall   _sendstr1
0276           1108   ;        Device.c:226: getstr1(buff);
0276 9090E0    1109            mov     dptr,#_buff
0279 75F040    1110            mov     b,#0x40
027C 120000    1111            lcall   _getstr1
027F           1112   ;        Device.c:227: waitms(10);
027F 90000A    1113            mov     dptr,#0x000A
0282 120000    1114            lcall   _waitms
0285           1115   ;        Device.c:228: P2_0=1; // 'set' pin to 1 is normal operation mode.
0285 D2A0      1116            setb    _P2_0
0287           1117   ;        Device.c:229: printf("Response: %s\r\n", buff);
0287 74E0      1118            mov     a,#_buff
0289 C0E0      1119            push    acc
028B 7490      1120            mov     a,#(_buff >> 8)
028D C0E0      1121            push    acc
028F 7440      1122            mov     a,#0x40
0291 C0E0      1123            push    acc
0293 7430      1124            mov     a,#__str_1
0295 C0E0      1125            push    acc
0297 745A      1126            mov     a,#(__str_1 >> 8)
0299 C0E0      1127            push    acc
029B 7480      1128            mov     a,#0x80
029D C0E0      1129            push    acc
029F 120000    1130            lcall   _printf
02A2 E581      1131            mov     a,sp
02A4 24FA      1132            add     a,#0xfa
02A6 F581      1133            mov     sp,a
02A8 22        1134            ret
02A9           1135   ;------------------------------------------------------------
02A9           1136   ;Allocation info for local variables in function 'printCharAsBinary'
02A9           1137   ;------------------------------------------------------------
02A9           1138   ;c                         Allocated to registers r2 
02A9           1139   ;i                         Allocated to registers r3 r4 
02A9           1140   ;out                       Allocated to registers r5 
02A9           1141   ;------------------------------------------------------------
02A9           1142   ;        Device.c:232: void printCharAsBinary(char c) {
02A9           1143   ;        -----------------------------------------
02A9           1144   ;         function printCharAsBinary
02A9           1145   ;        -----------------------------------------
02A9           1146   _printCharAsBinary:
02A9 AA82      1147            mov     r2,dpl
02AB           1148   ;        Device.c:236: for (i = 7; i >= 0; i--) {
02AB 7B07      1149            mov     r3,#0x07
02AD 7C00      1150            mov     r4,#0x00
02AF           1151   L014001?:
02AF EC        1152            mov     a,r4
02B0 20E7F0    1153            jb      acc.7,L014004?
02B3           1154   ;        Device.c:237: out = (c >> i) & 1; // Shift right i bits, and mask all but the least significant bit
02B3 8BF0      1155            mov     b,r3
02B5 05F0      1156            inc     b
02B7 EA        1157            mov     a,r2
02B8 33        1158            rlc     a
02B9 92D2      1159            mov     ov,c
02BB EA        1160            mov     a,r2
02BC 8000      1161            sjmp    L014012?
02BE           1162   L014011?:
02BE A2D2      1163            mov     c,ov
02C0 13        1164            rrc     a
02C1           1165   L014012?:
02C1 D5F0B0    1166            djnz    b,L014011?
02C4 5401      1167            anl     a,#0x01
02C6           1168   ;        Device.c:238: printf("%d", out);
02C6 FD        1169            mov     r5,a
02C7 33        1170            rlc     a
02C8 95E0      1171            subb    a,acc
02CA FE        1172            mov     r6,a
02CB C002      1173            push    ar2
02CD C003      1174            push    ar3
02CF C004      1175            push    ar4
02D1 C005      1176            push    ar5
02D3 C006      1177            push    ar6
02D5 7430      1178            mov     a,#__str_2
02D7 C0E0      1179            push    acc
02D9 7453      1180            mov     a,#(__str_2 >> 8)
02DB C0E0      1181            push    acc
02DD 7480      1182            mov     a,#0x80
02DF C0E0      1183            push    acc
02E1 120000    1184            lcall   _printf
02E4 E581      1185            mov     a,sp
02E6 24FB      1186            add     a,#0xfb
02E8 F581      1187            mov     sp,a
02EA D004      1188            pop     ar4
02EC D003      1189            pop     ar3
02EE D002      1190            pop     ar2
02F0           1191   ;        Device.c:236: for (i = 7; i >= 0; i--) {
02F0 1B        1192            dec     r3
02F1 BBFF70    1193            cjne    r3,#0xff,L014013?
02F4 1C        1194            dec     r4
02F5           1195   L014013?:
02F5 8000      1196            sjmp    L014001?
02F7           1197   L014004?:
02F7           1198   ;        Device.c:240: printf("\n"); // Move to a new line after printing the binary representation
02F7 74B0      1199            mov     a,#__str_3
02F9 C0E0      1200            push    acc
02FB 7458      1201            mov     a,#(__str_3 >> 8)
02FD C0E0      1202            push    acc
02FF 7480      1203            mov     a,#0x80
0301 C0E0      1204            push    acc
0303 120000    1205            lcall   _printf
0306 1581      1206            dec     sp
0308 1581      1207            dec     sp
030A 1581      1208            dec     sp
030C 22        1209            ret
030D           1210   ;------------------------------------------------------------
030D           1211   ;Allocation info for local variables in function 'char2int'
030D           1212   ;------------------------------------------------------------
030D           1213   ;encoded                   Allocated to registers r2 
030D           1214   ;sign                      Allocated to registers r3 r4 
030D           1215   ;magnitude                 Allocated to registers 
030D           1216   ;------------------------------------------------------------
030D           1217   ;        Device.c:243: int char2int(char encoded) {
030D           1218   ;        -----------------------------------------
030D           1219   ;         function char2int
030D           1220   ;        -----------------------------------------
030D           1221   _char2int:
030D           1222   ;        Device.c:244: int sign = (encoded & 0x20) ? -1 : 1; // Check bit 5 for sign. Negative if set.
030D E582      1223            mov     a,dpl
030F FA        1224            mov     r2,a
0310 30E530    1225            jnb     acc.5,L015003?
0313 7BFF      1226            mov     r3,#0xFF
0315 8000      1227            sjmp    L015004?
0317           1228   L015003?:
0317 7B01      1229            mov     r3,#0x01
0319           1230   L015004?:
0319 EB        1231            mov     a,r3
031A 33        1232            rlc     a
031B 95E0      1233            subb    a,acc
031D FC        1234            mov     r4,a
031E           1235   ;        Device.c:245: int magnitude = encoded & 0x1F; // Extract the magnitude from bits 0-4.
031E 53021F    1236            anl     ar2,#0x1F
0321 8A00      1237            mov     __mulint_PARM_2,r2
0323 750100    1238            mov     (__mulint_PARM_2 + 1),#0x00
0326           1239   ;        Device.c:246: return sign * magnitude;
0326 8B82      1240            mov     dpl,r3
0328 8C83      1241            mov     dph,r4
032A 020000    1242            ljmp    __mulint
032D           1243   ;------------------------------------------------------------
032D           1244   ;Allocation info for local variables in function 'main'
032D           1245   ;------------------------------------------------------------
032D           1246   ;cnt                       Allocated to registers 
032D           1247   ;i                         Allocated to registers 
032D           1248   ;lmotor                    Allocated with name '_main_lmotor_1_99'
032D           1249   ;rmotor                    Allocated with name '_main_rmotor_1_99'
032D           1250   ;trash                     Allocated with name '_main_trash_1_99'
032D           1251   ;test                      Allocated to registers 
032D           1252   ;reject                    Allocated to registers 
032D           1253   ;offset                    Allocated to registers 
032D           1254   ;------------------------------------------------------------
032D           1255   ;        Device.c:293: void main (void)
032D           1256   ;        -----------------------------------------
032D           1257   ;         function main
032D           1258   ;        -----------------------------------------
032D           1259   _main:
032D           1260   ;        Device.c:304: waitms(500);
032D 9001F4    1261            mov     dptr,#0x01F4
0330 120000    1262            lcall   _waitms
0333           1263   ;        Device.c:305: printf("\r\nJDY-40 test\r\n");
0333 7470      1264            mov     a,#__str_4
0335 C0E0      1265            push    acc
0337 744F      1266            mov     a,#(__str_4 >> 8)
0339 C0E0      1267            push    acc
033B 7480      1268            mov     a,#0x80
033D C0E0      1269            push    acc
033F 120000    1270            lcall   _printf
0342 1581      1271            dec     sp
0344 1581      1272            dec     sp
0346 1581      1273            dec     sp
0348           1274   ;        Device.c:306: UART1_Init(9600);
0348 902580    1275            mov     dptr,#0x2580
034B E4        1276            clr     a
034C F5F0      1277            mov     b,a
034E 120000    1278            lcall   _UART1_Init
0351           1279   ;        Device.c:323: SendATCommand("AT+DVIDA0C4\r\n");  
0351 9053F0    1280            mov     dptr,#__str_5
0354 75F080    1281            mov     b,#0x80
0357 120000    1282            lcall   _SendATCommand
035A           1283   ;        Device.c:326: SendATCommand("AT+VER\r\n");
035A 905470    1284            mov     dptr,#__str_6
035D 75F080    1285            mov     b,#0x80
0360 120000    1286            lcall   _SendATCommand
0363           1287   ;        Device.c:327: SendATCommand("AT+BAUD\r\n");
0363 905A70    1288            mov     dptr,#__str_7
0366 75F080    1289            mov     b,#0x80
0369 120000    1290            lcall   _SendATCommand
036C           1291   ;        Device.c:328: SendATCommand("AT+RFID\r\n");
036C 9054B0    1292            mov     dptr,#__str_8
036F 75F080    1293            mov     b,#0x80
0372 120000    1294            lcall   _SendATCommand
0375           1295   ;        Device.c:329: SendATCommand("AT+DVID\r\n");
0375 905BB0    1296            mov     dptr,#__str_9
0378 75F080    1297            mov     b,#0x80
037B 120000    1298            lcall   _SendATCommand
037E           1299   ;        Device.c:330: SendATCommand("AT+RFC\r\n");
037E 9054F0    1300            mov     dptr,#__str_10
0381 75F080    1301            mov     b,#0x80
0384 120000    1302            lcall   _SendATCommand
0387           1303   ;        Device.c:331: SendATCommand("AT+POWE\r\n");
0387 905530    1304            mov     dptr,#__str_11
038A 75F080    1305            mov     b,#0x80
038D 120000    1306            lcall   _SendATCommand
0390           1307   ;        Device.c:332: SendATCommand("AT+CLSS\r\n");
0390 905670    1308            mov     dptr,#__str_12
0393 75F080    1309            mov     b,#0x80
0396 120000    1310            lcall   _SendATCommand
0399           1311   ;        Device.c:334: printf("DEVICE SETUP COMPLETE\n\n");
0399 7460      1312            mov     a,#__str_13
039B C0E0      1313            push    acc
039D 7467      1314            mov     a,#(__str_13 >> 8)
039F C0E0      1315            push    acc
03A1 7480      1316            mov     a,#0x80
03A3 C0E0      1317            push    acc
03A5 120000    1318            lcall   _printf
03A8 1581      1319            dec     sp
03AA 1581      1320            dec     sp
03AC 1581      1321            dec     sp
03AE           1322   ;        Device.c:338: lmotor = 0;
03AE           1323   ;        Device.c:339: rmotor = 0;
03AE           1324   ;        Device.c:340: while(1)
03AE E4        1325            clr a
03AF F5C0      1326            mov _main_lmotor_1_99,a
03B1 F5C1      1327            mov (_main_lmotor_1_99 + 1),a
03B3 F530      1328            mov _main_rmotor_1_99,a
03B5 F531      1329            mov (_main_rmotor_1_99 + 1),a
03B7 FA        1330            mov r2,a
03B8 FB        1331            mov r3,a
03B9           1332   L016004?:
03B9           1333   ;        Device.c:379: if(RXU1()){
03B9 C002      1334            push    ar2
03BB C003      1335            push    ar3
03BD 120000    1336            lcall   _RXU1
03C0 E4        1337            clr     a
03C1 33        1338            rlc     a
03C2 D003      1339            pop     ar3
03C4 D002      1340            pop     ar2
03C6 6000      1341            jz      L016004?
03C8           1342   ;        Device.c:380: getstr1(rbuff);
03C8 909160    1343            mov     dptr,#_rbuff
03CB 75F040    1344            mov     b,#0x40
03CE C002      1345            push    ar2
03D0 C003      1346            push    ar3
03D2 120000    1347            lcall   _getstr1
03D5           1348   ;        Device.c:385: sscanf(rbuff,"%d%d",&lmotor,&rmotor);
03D5 7430      1349            mov     a,#_main_rmotor_1_99
03D7 C0E0      1350            push    acc
03D9 7450      1351            mov     a,#(_main_rmotor_1_99 >> 8)
03DB C0E0      1352            push    acc
03DD 7440      1353            mov     a,#0x40
03DF C0E0      1354            push    acc
03E1 74C0      1355            mov     a,#_main_lmotor_1_99
03E3 C0E0      1356            push    acc
03E5 743C      1357            mov     a,#(_main_lmotor_1_99 >> 8)
03E7 C0E0      1358            push    acc
03E9 7440      1359            mov     a,#0x40
03EB C0E0      1360            push    acc
03ED 74E0      1361            mov     a,#__str_14
03EF C0E0      1362            push    acc
03F1 7465      1363            mov     a,#(__str_14 >> 8)
03F3 C0E0      1364            push    acc
03F5 7480      1365            mov     a,#0x80
03F7 C0E0      1366            push    acc
03F9 7460      1367            mov     a,#_rbuff
03FB C0E0      1368            push    acc
03FD 7491      1369            mov     a,#(_rbuff >> 8)
03FF C0E0      1370            push    acc
0401 7440      1371            mov     a,#0x40
0403 C0E0      1372            push    acc
0405 120000    1373            lcall   _sscanf
0408 E581      1374            mov     a,sp
040A 24F4      1375            add     a,#0xf4
040C F581      1376            mov     sp,a
040E           1377   ;        Device.c:404: printf("%3d,%3d\n",lmotor,rmotor);
040E C030      1378            push    _main_rmotor_1_99
0410 C031      1379            push    (_main_rmotor_1_99 + 1)
0412 C0C0      1380            push    _main_lmotor_1_99
0414 C0C1      1381            push    (_main_lmotor_1_99 + 1)
0416 7420      1382            mov     a,#__str_15
0418 C0E0      1383            push    acc
041A 7470      1384            mov     a,#(__str_15 >> 8)
041C C0E0      1385            push    acc
041E 7480      1386            mov     a,#0x80
0420 C0E0      1387            push    acc
0422 120000    1388            lcall   _printf
0425 E581      1389            mov     a,sp
0427 24F9      1390            add     a,#0xf9
0429 F581      1391            mov     sp,a
042B D003      1392            pop     ar3
042D D002      1393            pop     ar2
042F           1394   ;        Device.c:407: test++;
042F 0A        1395            inc     r2
0430 BA0060    1396            cjne    r2,#0x00,L016011?
0433 0B        1397            inc     r3
0434           1398   L016011?:
0434           1399   ;        Device.c:408: sprintf(tbuff,"%5d\n",test);
0434 C002      1400            push    ar2
0436 C003      1401            push    ar3
0438 C002      1402            push    ar2
043A C003      1403            push    ar3
043C 7420      1404            mov     a,#__str_16
043E C0E0      1405            push    acc
0440 746D      1406            mov     a,#(__str_16 >> 8)
0442 C0E0      1407            push    acc
0444 7480      1408            mov     a,#0x80
0446 C0E0      1409            push    acc
0448 74E0      1410            mov     a,#_tbuff
044A C0E0      1411            push    acc
044C 7495      1412            mov     a,#(_tbuff >> 8)
044E C0E0      1413            push    acc
0450 7440      1414            mov     a,#0x40
0452 C0E0      1415            push    acc
0454 120000    1416            lcall   _sprintf
0457 E581      1417            mov     a,sp
0459 24F8      1418            add     a,#0xf8
045B F581      1419            mov     sp,a
045D           1420   ;        Device.c:409: sendstr1(tbuff);
045D 9095E0    1421            mov     dptr,#_tbuff
0460 75F040    1422            mov     b,#0x40
0463 120000    1423            lcall   _sendstr1
0466 D003      1424            pop     ar3
0468 D002      1425            pop     ar2
046A 020000    1426            ljmp    L016004?
046D           1427            rseg R_CSEG
046D           1428   
0000           1429            rseg R_XINIT
0000           1430   
0000           1431            rseg R_CONST
0000           1432   __str_0:
0000 436F6D6D  1433            db 'Command: %s'
     616E643A
     202573
000B 00        1434            db 0x00
000C           1435   __str_1:
000C 52657370  1436            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        1437            db 0x0D
0019 0A        1438            db 0x0A
001A 00        1439            db 0x00
001B           1440   __str_2:
001B 2564      1441            db '%d'
001D 00        1442            db 0x00
001E           1443   __str_3:
001E 0A        1444            db 0x0A
001F 00        1445            db 0x00
0020           1446   __str_4:
0020 0D        1447            db 0x0D
0021 0A        1448            db 0x0A
0022 4A44592D  1449            db 'JDY-40 test'
     34302074
     657374
002D 0D        1450            db 0x0D
002E 0A        1451            db 0x0A
002F 00        1452            db 0x00
0030           1453   __str_5:
0030 41542B44  1454            db 'AT+DVIDA0C4'
     56494441
     304334
003B 0D        1455            db 0x0D
003C 0A        1456            db 0x0A
003D 00        1457            db 0x00
003E           1458   __str_6:
003E 41542B56  1459            db 'AT+VER'
     4552
0044 0D        1460            db 0x0D
0045 0A        1461            db 0x0A
0046 00        1462            db 0x00
0047           1463   __str_7:
0047 41542B42  1464            db 'AT+BAUD'
     415544
004E 0D        1465            db 0x0D
004F 0A        1466            db 0x0A
0050 00        1467            db 0x00
0051           1468   __str_8:
0051 41542B52  1469            db 'AT+RFID'
     464944
0058 0D        1470            db 0x0D
0059 0A        1471            db 0x0A
005A 00        1472            db 0x00
005B           1473   __str_9:
005B 41542B44  1474            db 'AT+DVID'
     564944
0062 0D        1475            db 0x0D
0063 0A        1476            db 0x0A
0064 00        1477            db 0x00
0065           1478   __str_10:
0065 41542B52  1479            db 'AT+RFC'
     4643
006B 0D        1480            db 0x0D
006C 0A        1481            db 0x0A
006D 00        1482            db 0x00
006E           1483   __str_11:
006E 41542B50  1484            db 'AT+POWE'
     4F5745
0075 0D        1485            db 0x0D
0076 0A        1486            db 0x0A
0077 00        1487            db 0x00
0078           1488   __str_12:
0078 41542B43  1489            db 'AT+CLSS'
     4C5353
007F 0D        1490            db 0x0D
0080 0A        1491            db 0x0A
0081 00        1492            db 0x00
0082           1493   __str_13:
0082 44455649  1494            db 'DEVICE SETUP COMPLETE'
     43452053
     45545550
     20434F4D
     504C4554
     45
0097 0A        1495            db 0x0A
0098 0A        1496            db 0x0A
0099 00        1497            db 0x00
009A           1498   __str_14:
009A 25642564  1499            db '%d%d'
009E 00        1500            db 0x00
009F           1501   __str_15:
009F 2533642C  1502            db '%3d,%3d'
     253364
00A6 0A        1503            db 0x0A
00A7 00        1504            db 0x00
00A8           1505   __str_16:
00A8 253564    1506            db '%5d'
00AB 0A        1507            db 0x0A
00AC 00        1508            db 0x00
00AD           1509   
0003           1510            CSEG
0003           1511   
0003           1512   end
