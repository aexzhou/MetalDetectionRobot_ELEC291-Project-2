0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Apr 03 18:41:35 2024
0000              5   ;--------------------------------------------------------
                  5   $name Controller
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _Generate_Pivot_Command_PARM_3
0000             27            public _Generate_Pivot_Command_PARM_2
0000             28            public _main
0000             29            public _printCharAsBinary
0000             30            public _getsn
0000             31            public _LCDprint
0000             32            public _LCD_4BIT
0000             33            public _WriteCommand
0000             34            public _WriteData
0000             35            public _LCD_byte
0000             36            public _LCD_pulse
0000             37            public _Wait_For_Calibration
0000             38            public _Weigh_Dual_Inputs
0000             39            public _Generate_Pivot_Command
0000             40            public _Generate_Motor_Command
0000             41            public _Check_Joystick_Button
0000             42            public _Voltage_to_Coordinate
0000             43            public _Package_Signed_int
0000             44            public _SendATCommand
0000             45            public _waitms_or_RI1
0000             46            public _RXU1
0000             47            public _getstr1
0000             48            public _getchar1_with_timeout
0000             49            public _getchar1
0000             50            public _sendstr2
0000             51            public _sendstr1
0000             52            public _putchar1
0000             53            public _UART1_Init
0000             54            public _waitms
0000             55            public _Timer3us
0000             56            public _Volts_at_Pin
0000             57            public _ADC_at_Pin
0000             58            public _InitPinADC
0000             59            public _InitADC
0000             60            public __c51_external_startup
0000             61            public _buff
0000             62            public _LCDprint_PARM_3
0000             63            public _mcmd
0000             64            public _mcmd2
0000             65            public _mcmd1
0000             66            public _rbuff
0000             67            public _tbuff
0000             68            public _t
0000             69            public _getsn_PARM_2
0000             70            public _LCDprint_PARM_2
0000             71            public _Weigh_Dual_Inputs_PARM_4
0000             72            public _Weigh_Dual_Inputs_PARM_3
0000             73            public _Weigh_Dual_Inputs_PARM_2
0000             74            public _Generate_Motor_Command_PARM_3
0000             75            public _Generate_Motor_Command_PARM_2
0000             76            public _InitPinADC_PARM_2
0000             77   ;--------------------------------------------------------
0000             78   ; Special Function Registers
0000             79   ;--------------------------------------------------------
0000             80   _ACC            DATA 0xe0
0000             81   _ADC0ASAH       DATA 0xb6
0000             82   _ADC0ASAL       DATA 0xb5
0000             83   _ADC0ASCF       DATA 0xa1
0000             84   _ADC0ASCT       DATA 0xc7
0000             85   _ADC0CF0        DATA 0xbc
0000             86   _ADC0CF1        DATA 0xb9
0000             87   _ADC0CF2        DATA 0xdf
0000             88   _ADC0CN0        DATA 0xe8
0000             89   _ADC0CN1        DATA 0xb2
0000             90   _ADC0CN2        DATA 0xb3
0000             91   _ADC0GTH        DATA 0xc4
0000             92   _ADC0GTL        DATA 0xc3
0000             93   _ADC0H          DATA 0xbe
0000             94   _ADC0L          DATA 0xbd
0000             95   _ADC0LTH        DATA 0xc6
0000             96   _ADC0LTL        DATA 0xc5
0000             97   _ADC0MX         DATA 0xbb
0000             98   _B              DATA 0xf0
0000             99   _CKCON0         DATA 0x8e
0000            100   _CKCON1         DATA 0xa6
0000            101   _CLEN0          DATA 0xc6
0000            102   _CLIE0          DATA 0xc7
0000            103   _CLIF0          DATA 0xe8
0000            104   _CLKSEL         DATA 0xa9
0000            105   _CLOUT0         DATA 0xd1
0000            106   _CLU0CF         DATA 0xb1
0000            107   _CLU0FN         DATA 0xaf
0000            108   _CLU0MX         DATA 0x84
0000            109   _CLU1CF         DATA 0xb3
0000            110   _CLU1FN         DATA 0xb2
0000            111   _CLU1MX         DATA 0x85
0000            112   _CLU2CF         DATA 0xb6
0000            113   _CLU2FN         DATA 0xb5
0000            114   _CLU2MX         DATA 0x91
0000            115   _CLU3CF         DATA 0xbf
0000            116   _CLU3FN         DATA 0xbe
0000            117   _CLU3MX         DATA 0xae
0000            118   _CMP0CN0        DATA 0x9b
0000            119   _CMP0CN1        DATA 0x99
0000            120   _CMP0MD         DATA 0x9d
0000            121   _CMP0MX         DATA 0x9f
0000            122   _CMP1CN0        DATA 0xbf
0000            123   _CMP1CN1        DATA 0xac
0000            124   _CMP1MD         DATA 0xab
0000            125   _CMP1MX         DATA 0xaa
0000            126   _CRC0CN0        DATA 0xce
0000            127   _CRC0CN1        DATA 0x86
0000            128   _CRC0CNT        DATA 0xd3
0000            129   _CRC0DAT        DATA 0xcb
0000            130   _CRC0FLIP       DATA 0xcf
0000            131   _CRC0IN         DATA 0xca
0000            132   _CRC0ST         DATA 0xd2
0000            133   _DAC0CF0        DATA 0x91
0000            134   _DAC0CF1        DATA 0x92
0000            135   _DAC0H          DATA 0x85
0000            136   _DAC0L          DATA 0x84
0000            137   _DAC1CF0        DATA 0x93
0000            138   _DAC1CF1        DATA 0x94
0000            139   _DAC1H          DATA 0x8a
0000            140   _DAC1L          DATA 0x89
0000            141   _DAC2CF0        DATA 0x95
0000            142   _DAC2CF1        DATA 0x96
0000            143   _DAC2H          DATA 0x8c
0000            144   _DAC2L          DATA 0x8b
0000            145   _DAC3CF0        DATA 0x9a
0000            146   _DAC3CF1        DATA 0x9c
0000            147   _DAC3H          DATA 0x8e
0000            148   _DAC3L          DATA 0x8d
0000            149   _DACGCF0        DATA 0x88
0000            150   _DACGCF1        DATA 0x98
0000            151   _DACGCF2        DATA 0xa2
0000            152   _DERIVID        DATA 0xad
0000            153   _DEVICEID       DATA 0xb5
0000            154   _DPH            DATA 0x83
0000            155   _DPL            DATA 0x82
0000            156   _EIE1           DATA 0xe6
0000            157   _EIE2           DATA 0xf3
0000            158   _EIP1           DATA 0xbb
0000            159   _EIP1H          DATA 0xee
0000            160   _EIP2           DATA 0xed
0000            161   _EIP2H          DATA 0xf6
0000            162   _EMI0CN         DATA 0xe7
0000            163   _FLKEY          DATA 0xb7
0000            164   _HFO0CAL        DATA 0xc7
0000            165   _HFO1CAL        DATA 0xd6
0000            166   _HFOCN          DATA 0xef
0000            167   _I2C0ADM        DATA 0xff
0000            168   _I2C0CN0        DATA 0xba
0000            169   _I2C0DIN        DATA 0xbc
0000            170   _I2C0DOUT       DATA 0xbb
0000            171   _I2C0FCN0       DATA 0xad
0000            172   _I2C0FCN1       DATA 0xab
0000            173   _I2C0FCT        DATA 0xf5
0000            174   _I2C0SLAD       DATA 0xbd
0000            175   _I2C0STAT       DATA 0xb9
0000            176   _IE             DATA 0xa8
0000            177   _IP             DATA 0xb8
0000            178   _IPH            DATA 0xf2
0000            179   _IT01CF         DATA 0xe4
0000            180   _LFO0CN         DATA 0xb1
0000            181   _P0             DATA 0x80
0000            182   _P0MASK         DATA 0xfe
0000            183   _P0MAT          DATA 0xfd
0000            184   _P0MDIN         DATA 0xf1
0000            185   _P0MDOUT        DATA 0xa4
0000            186   _P0SKIP         DATA 0xd4
0000            187   _P1             DATA 0x90
0000            188   _P1MASK         DATA 0xee
0000            189   _P1MAT          DATA 0xed
0000            190   _P1MDIN         DATA 0xf2
0000            191   _P1MDOUT        DATA 0xa5
0000            192   _P1SKIP         DATA 0xd5
0000            193   _P2             DATA 0xa0
0000            194   _P2MASK         DATA 0xfc
0000            195   _P2MAT          DATA 0xfb
0000            196   _P2MDIN         DATA 0xf3
0000            197   _P2MDOUT        DATA 0xa6
0000            198   _P2SKIP         DATA 0xcc
0000            199   _P3             DATA 0xb0
0000            200   _P3MDIN         DATA 0xf4
0000            201   _P3MDOUT        DATA 0x9c
0000            202   _PCA0CENT       DATA 0x9e
0000            203   _PCA0CLR        DATA 0x9c
0000            204   _PCA0CN0        DATA 0xd8
0000            205   _PCA0CPH0       DATA 0xfc
0000            206   _PCA0CPH1       DATA 0xea
0000            207   _PCA0CPH2       DATA 0xec
0000            208   _PCA0CPH3       DATA 0xf5
0000            209   _PCA0CPH4       DATA 0x85
0000            210   _PCA0CPH5       DATA 0xde
0000            211   _PCA0CPL0       DATA 0xfb
0000            212   _PCA0CPL1       DATA 0xe9
0000            213   _PCA0CPL2       DATA 0xeb
0000            214   _PCA0CPL3       DATA 0xf4
0000            215   _PCA0CPL4       DATA 0x84
0000            216   _PCA0CPL5       DATA 0xdd
0000            217   _PCA0CPM0       DATA 0xda
0000            218   _PCA0CPM1       DATA 0xdb
0000            219   _PCA0CPM2       DATA 0xdc
0000            220   _PCA0CPM3       DATA 0xae
0000            221   _PCA0CPM4       DATA 0xaf
0000            222   _PCA0CPM5       DATA 0xcc
0000            223   _PCA0H          DATA 0xfa
0000            224   _PCA0L          DATA 0xf9
0000            225   _PCA0MD         DATA 0xd9
0000            226   _PCA0POL        DATA 0x96
0000            227   _PCA0PWM        DATA 0xf7
0000            228   _PCON0          DATA 0x87
0000            229   _PCON1          DATA 0xcd
0000            230   _PFE0CN         DATA 0xc1
0000            231   _PRTDRV         DATA 0xf6
0000            232   _PSCTL          DATA 0x8f
0000            233   _PSTAT0         DATA 0xaa
0000            234   _PSW            DATA 0xd0
0000            235   _REF0CN         DATA 0xd1
0000            236   _REG0CN         DATA 0xc9
0000            237   _REVID          DATA 0xb6
0000            238   _RSTSRC         DATA 0xef
0000            239   _SBCON1         DATA 0x94
0000            240   _SBRLH1         DATA 0x96
0000            241   _SBRLL1         DATA 0x95
0000            242   _SBUF           DATA 0x99
0000            243   _SBUF0          DATA 0x99
0000            244   _SBUF1          DATA 0x92
0000            245   _SCON           DATA 0x98
0000            246   _SCON0          DATA 0x98
0000            247   _SCON1          DATA 0xc8
0000            248   _SFRPAGE        DATA 0xa7
0000            249   _SFRPGCN        DATA 0xbc
0000            250   _SFRSTACK       DATA 0xd7
0000            251   _SMB0ADM        DATA 0xd6
0000            252   _SMB0ADR        DATA 0xd7
0000            253   _SMB0CF         DATA 0xc1
0000            254   _SMB0CN0        DATA 0xc0
0000            255   _SMB0DAT        DATA 0xc2
0000            256   _SMB0FCN0       DATA 0xc3
0000            257   _SMB0FCN1       DATA 0xc4
0000            258   _SMB0FCT        DATA 0xef
0000            259   _SMB0RXLN       DATA 0xc5
0000            260   _SMB0TC         DATA 0xac
0000            261   _SMOD1          DATA 0x93
0000            262   _SP             DATA 0x81
0000            263   _SPI0CFG        DATA 0xa1
0000            264   _SPI0CKR        DATA 0xa2
0000            265   _SPI0CN0        DATA 0xf8
0000            266   _SPI0DAT        DATA 0xa3
0000            267   _SPI0FCN0       DATA 0x9a
0000            268   _SPI0FCN1       DATA 0x9b
0000            269   _SPI0FCT        DATA 0xf7
0000            270   _SPI0PCF        DATA 0xdf
0000            271   _TCON           DATA 0x88
0000            272   _TH0            DATA 0x8c
0000            273   _TH1            DATA 0x8d
0000            274   _TL0            DATA 0x8a
0000            275   _TL1            DATA 0x8b
0000            276   _TMOD           DATA 0x89
0000            277   _TMR2CN0        DATA 0xc8
0000            278   _TMR2CN1        DATA 0xfd
0000            279   _TMR2H          DATA 0xcf
0000            280   _TMR2L          DATA 0xce
0000            281   _TMR2RLH        DATA 0xcb
0000            282   _TMR2RLL        DATA 0xca
0000            283   _TMR3CN0        DATA 0x91
0000            284   _TMR3CN1        DATA 0xfe
0000            285   _TMR3H          DATA 0x95
0000            286   _TMR3L          DATA 0x94
0000            287   _TMR3RLH        DATA 0x93
0000            288   _TMR3RLL        DATA 0x92
0000            289   _TMR4CN0        DATA 0x98
0000            290   _TMR4CN1        DATA 0xff
0000            291   _TMR4H          DATA 0xa5
0000            292   _TMR4L          DATA 0xa4
0000            293   _TMR4RLH        DATA 0xa3
0000            294   _TMR4RLL        DATA 0xa2
0000            295   _TMR5CN0        DATA 0xc0
0000            296   _TMR5CN1        DATA 0xf1
0000            297   _TMR5H          DATA 0xd5
0000            298   _TMR5L          DATA 0xd4
0000            299   _TMR5RLH        DATA 0xd3
0000            300   _TMR5RLL        DATA 0xd2
0000            301   _UART0PCF       DATA 0xd9
0000            302   _UART1FCN0      DATA 0x9d
0000            303   _UART1FCN1      DATA 0xd8
0000            304   _UART1FCT       DATA 0xfa
0000            305   _UART1LIN       DATA 0x9e
0000            306   _UART1PCF       DATA 0xda
0000            307   _VDM0CN         DATA 0xff
0000            308   _WDTCN          DATA 0x97
0000            309   _XBR0           DATA 0xe1
0000            310   _XBR1           DATA 0xe2
0000            311   _XBR2           DATA 0xe3
0000            312   _XOSC0CN        DATA 0x86
0000            313   _DPTR           DATA 0x8382
0000            314   _TMR2RL         DATA 0xcbca
0000            315   _TMR3RL         DATA 0x9392
0000            316   _TMR4RL         DATA 0xa3a2
0000            317   _TMR5RL         DATA 0xd3d2
0000            318   _TMR0           DATA 0x8c8a
0000            319   _TMR1           DATA 0x8d8b
0000            320   _TMR2           DATA 0xcfce
0000            321   _TMR3           DATA 0x9594
0000            322   _TMR4           DATA 0xa5a4
0000            323   _TMR5           DATA 0xd5d4
0000            324   _SBRL1          DATA 0x9695
0000            325   _PCA0           DATA 0xfaf9
0000            326   _PCA0CP0        DATA 0xfcfb
0000            327   _PCA0CP1        DATA 0xeae9
0000            328   _PCA0CP2        DATA 0xeceb
0000            329   _PCA0CP3        DATA 0xf5f4
0000            330   _PCA0CP4        DATA 0x8584
0000            331   _PCA0CP5        DATA 0xdedd
0000            332   _ADC0ASA        DATA 0xb6b5
0000            333   _ADC0GT         DATA 0xc4c3
0000            334   _ADC0           DATA 0xbebd
0000            335   _ADC0LT         DATA 0xc6c5
0000            336   _DAC0           DATA 0x8584
0000            337   _DAC1           DATA 0x8a89
0000            338   _DAC2           DATA 0x8c8b
0000            339   _DAC3           DATA 0x8e8d
0000            340   ;--------------------------------------------------------
0000            341   ; special function bits
0000            342   ;--------------------------------------------------------
0000            343   _ACC_0          BIT 0xe0
0000            344   _ACC_1          BIT 0xe1
0000            345   _ACC_2          BIT 0xe2
0000            346   _ACC_3          BIT 0xe3
0000            347   _ACC_4          BIT 0xe4
0000            348   _ACC_5          BIT 0xe5
0000            349   _ACC_6          BIT 0xe6
0000            350   _ACC_7          BIT 0xe7
0000            351   _TEMPE          BIT 0xe8
0000            352   _ADGN0          BIT 0xe9
0000            353   _ADGN1          BIT 0xea
0000            354   _ADWINT         BIT 0xeb
0000            355   _ADBUSY         BIT 0xec
0000            356   _ADINT          BIT 0xed
0000            357   _IPOEN          BIT 0xee
0000            358   _ADEN           BIT 0xef
0000            359   _B_0            BIT 0xf0
0000            360   _B_1            BIT 0xf1
0000            361   _B_2            BIT 0xf2
0000            362   _B_3            BIT 0xf3
0000            363   _B_4            BIT 0xf4
0000            364   _B_5            BIT 0xf5
0000            365   _B_6            BIT 0xf6
0000            366   _B_7            BIT 0xf7
0000            367   _C0FIF          BIT 0xe8
0000            368   _C0RIF          BIT 0xe9
0000            369   _C1FIF          BIT 0xea
0000            370   _C1RIF          BIT 0xeb
0000            371   _C2FIF          BIT 0xec
0000            372   _C2RIF          BIT 0xed
0000            373   _C3FIF          BIT 0xee
0000            374   _C3RIF          BIT 0xef
0000            375   _D1SRC0         BIT 0x88
0000            376   _D1SRC1         BIT 0x89
0000            377   _D1AMEN         BIT 0x8a
0000            378   _D01REFSL       BIT 0x8b
0000            379   _D3SRC0         BIT 0x8c
0000            380   _D3SRC1         BIT 0x8d
0000            381   _D3AMEN         BIT 0x8e
0000            382   _D23REFSL       BIT 0x8f
0000            383   _D0UDIS         BIT 0x98
0000            384   _D1UDIS         BIT 0x99
0000            385   _D2UDIS         BIT 0x9a
0000            386   _D3UDIS         BIT 0x9b
0000            387   _EX0            BIT 0xa8
0000            388   _ET0            BIT 0xa9
0000            389   _EX1            BIT 0xaa
0000            390   _ET1            BIT 0xab
0000            391   _ES0            BIT 0xac
0000            392   _ET2            BIT 0xad
0000            393   _ESPI0          BIT 0xae
0000            394   _EA             BIT 0xaf
0000            395   _PX0            BIT 0xb8
0000            396   _PT0            BIT 0xb9
0000            397   _PX1            BIT 0xba
0000            398   _PT1            BIT 0xbb
0000            399   _PS0            BIT 0xbc
0000            400   _PT2            BIT 0xbd
0000            401   _PSPI0          BIT 0xbe
0000            402   _P0_0           BIT 0x80
0000            403   _P0_1           BIT 0x81
0000            404   _P0_2           BIT 0x82
0000            405   _P0_3           BIT 0x83
0000            406   _P0_4           BIT 0x84
0000            407   _P0_5           BIT 0x85
0000            408   _P0_6           BIT 0x86
0000            409   _P0_7           BIT 0x87
0000            410   _P1_0           BIT 0x90
0000            411   _P1_1           BIT 0x91
0000            412   _P1_2           BIT 0x92
0000            413   _P1_3           BIT 0x93
0000            414   _P1_4           BIT 0x94
0000            415   _P1_5           BIT 0x95
0000            416   _P1_6           BIT 0x96
0000            417   _P1_7           BIT 0x97
0000            418   _P2_0           BIT 0xa0
0000            419   _P2_1           BIT 0xa1
0000            420   _P2_2           BIT 0xa2
0000            421   _P2_3           BIT 0xa3
0000            422   _P2_4           BIT 0xa4
0000            423   _P2_5           BIT 0xa5
0000            424   _P2_6           BIT 0xa6
0000            425   _P3_0           BIT 0xb0
0000            426   _P3_1           BIT 0xb1
0000            427   _P3_2           BIT 0xb2
0000            428   _P3_3           BIT 0xb3
0000            429   _P3_4           BIT 0xb4
0000            430   _P3_7           BIT 0xb7
0000            431   _CCF0           BIT 0xd8
0000            432   _CCF1           BIT 0xd9
0000            433   _CCF2           BIT 0xda
0000            434   _CCF3           BIT 0xdb
0000            435   _CCF4           BIT 0xdc
0000            436   _CCF5           BIT 0xdd
0000            437   _CR             BIT 0xde
0000            438   _CF             BIT 0xdf
0000            439   _PARITY         BIT 0xd0
0000            440   _F1             BIT 0xd1
0000            441   _OV             BIT 0xd2
0000            442   _RS0            BIT 0xd3
0000            443   _RS1            BIT 0xd4
0000            444   _F0             BIT 0xd5
0000            445   _AC             BIT 0xd6
0000            446   _CY             BIT 0xd7
0000            447   _RI             BIT 0x98
0000            448   _TI             BIT 0x99
0000            449   _RB8            BIT 0x9a
0000            450   _TB8            BIT 0x9b
0000            451   _REN            BIT 0x9c
0000            452   _CE             BIT 0x9d
0000            453   _SMODE          BIT 0x9e
0000            454   _RI1            BIT 0xc8
0000            455   _TI1            BIT 0xc9
0000            456   _RBX1           BIT 0xca
0000            457   _TBX1           BIT 0xcb
0000            458   _REN1           BIT 0xcc
0000            459   _PERR1          BIT 0xcd
0000            460   _OVR1           BIT 0xce
0000            461   _SI             BIT 0xc0
0000            462   _ACK            BIT 0xc1
0000            463   _ARBLOST        BIT 0xc2
0000            464   _ACKRQ          BIT 0xc3
0000            465   _STO            BIT 0xc4
0000            466   _STA            BIT 0xc5
0000            467   _TXMODE         BIT 0xc6
0000            468   _MASTER         BIT 0xc7
0000            469   _SPIEN          BIT 0xf8
0000            470   _TXNF           BIT 0xf9
0000            471   _NSSMD0         BIT 0xfa
0000            472   _NSSMD1         BIT 0xfb
0000            473   _RXOVRN         BIT 0xfc
0000            474   _MODF           BIT 0xfd
0000            475   _WCOL           BIT 0xfe
0000            476   _SPIF           BIT 0xff
0000            477   _IT0            BIT 0x88
0000            478   _IE0            BIT 0x89
0000            479   _IT1            BIT 0x8a
0000            480   _IE1            BIT 0x8b
0000            481   _TR0            BIT 0x8c
0000            482   _TF0            BIT 0x8d
0000            483   _TR1            BIT 0x8e
0000            484   _TF1            BIT 0x8f
0000            485   _T2XCLK0        BIT 0xc8
0000            486   _T2XCLK1        BIT 0xc9
0000            487   _TR2            BIT 0xca
0000            488   _T2SPLIT        BIT 0xcb
0000            489   _TF2CEN         BIT 0xcc
0000            490   _TF2LEN         BIT 0xcd
0000            491   _TF2L           BIT 0xce
0000            492   _TF2H           BIT 0xcf
0000            493   _T4XCLK0        BIT 0x98
0000            494   _T4XCLK1        BIT 0x99
0000            495   _TR4            BIT 0x9a
0000            496   _T4SPLIT        BIT 0x9b
0000            497   _TF4CEN         BIT 0x9c
0000            498   _TF4LEN         BIT 0x9d
0000            499   _TF4L           BIT 0x9e
0000            500   _TF4H           BIT 0x9f
0000            501   _T5XCLK0        BIT 0xc0
0000            502   _T5XCLK1        BIT 0xc1
0000            503   _TR5            BIT 0xc2
0000            504   _T5SPLIT        BIT 0xc3
0000            505   _TF5CEN         BIT 0xc4
0000            506   _TF5LEN         BIT 0xc5
0000            507   _TF5L           BIT 0xc6
0000            508   _TF5H           BIT 0xc7
0000            509   _RIE            BIT 0xd8
0000            510   _RXTO0          BIT 0xd9
0000            511   _RXTO1          BIT 0xda
0000            512   _RFRQ           BIT 0xdb
0000            513   _TIE            BIT 0xdc
0000            514   _TXHOLD         BIT 0xdd
0000            515   _TXNF1          BIT 0xde
0000            516   _TFRQ           BIT 0xdf
0000            517   ;--------------------------------------------------------
0000            518   ; overlayable register banks
0000            519   ;--------------------------------------------------------
0000            520            rbank0 segment data overlay
0000            521   ;--------------------------------------------------------
0000            522   ; internal ram data
0000            523   ;--------------------------------------------------------
0000            524            rseg R_DSEG
0000            525   _InitPinADC_PARM_2:
0000            526            ds 1
0001            527   _Generate_Motor_Command_PARM_2:
0001            528            ds 2
0003            529   _Generate_Motor_Command_PARM_3:
0003            530            ds 2
0005            531   _Generate_Motor_Command_sloc0_1_0:
0005            532            ds 3
0008            533   _Weigh_Dual_Inputs_PARM_2:
0008            534            ds 3
000B            535   _Weigh_Dual_Inputs_PARM_3:
000B            536            ds 3
000E            537   _Weigh_Dual_Inputs_PARM_4:
000E            538            ds 4
0012            539   _Weigh_Dual_Inputs_mout_1_144:
0012            540            ds 3
0015            541   _Weigh_Dual_Inputs_sloc0_1_0:
0015            542            ds 2
0017            543   _Weigh_Dual_Inputs_sloc1_1_0:
0017            544            ds 3
001A            545   _Weigh_Dual_Inputs_sloc2_1_0:
001A            546            ds 4
001E            547   _Weigh_Dual_Inputs_sloc3_1_0:
001E            548            ds 3
0021            549   _LCDprint_PARM_2:
0021            550            ds 1
0022            551   _getsn_PARM_2:
0022            552            ds 2
0024            553   _getsn_buff_1_162:
0024            554            ds 3
0027            555   _getsn_sloc0_1_0:
0027            556            ds 2
0029            557   _t:
0029            558            ds 2
002B            559   _main_vx_right_1_171:
002B            560            ds 4
002F            561   _main_sw_right_1_171:
002F            562            ds 4
0033            563   _main_vx_left_1_171:
0033            564            ds 4
0037            565   _main_vy_left_1_171:
0037            566            ds 4
003B            567   _main_sw_left_1_171:
003B            568            ds 4
003F            569   _main_vx1_1_171:
003F            570            ds 2
0041            571   _main_vy1_1_171:
0041            572            ds 2
0043            573   _main_freq_1_171:
0043            574            ds 2
0045            575   ;--------------------------------------------------------
0045            576   ; overlayable items in internal ram 
0045            577   ;--------------------------------------------------------
0000            578            rseg    R_OSEG
0000            579            rseg    R_OSEG
0000            580            rseg    R_OSEG
0000            581            rseg    R_OSEG
0000            582            rseg    R_OSEG
0000            583            rseg    R_OSEG
0000            584   _Generate_Pivot_Command_PARM_2:
0000            585            ds 2
0002            586   _Generate_Pivot_Command_PARM_3:
0002            587            ds 2
0004            588   ;--------------------------------------------------------
0004            589   ; indirectly addressable internal ram data
0004            590   ;--------------------------------------------------------
0000            591            rseg R_ISEG
0000            592   _tbuff:
0000            593            ds 20
0014            594   _rbuff:
0014            595            ds 20
0028            596   _mcmd1:
0028            597            ds 4
002C            598   _mcmd2:
002C            599            ds 4
0030            600   _mcmd:
0030            601            ds 4
0034            602   ;--------------------------------------------------------
0034            603   ; absolute internal ram data
0034            604   ;--------------------------------------------------------
0000            605            DSEG
0000            606   ;--------------------------------------------------------
0000            607   ; bit data
0000            608   ;--------------------------------------------------------
0000            609            rseg R_BSEG
0000            610   _LCDprint_PARM_3:
0000            611            DBIT    1
0001            612   ;--------------------------------------------------------
0001            613   ; paged external ram data
0001            614   ;--------------------------------------------------------
0000            615            rseg R_PSEG
0000            616   ;--------------------------------------------------------
0000            617   ; external ram data
0000            618   ;--------------------------------------------------------
0000            619            rseg R_XSEG
0000            620   _buff:
0000            621            ds 20
0014            622   ;--------------------------------------------------------
0014            623   ; absolute external ram data
0014            624   ;--------------------------------------------------------
0000            625            XSEG
0000            626   ;--------------------------------------------------------
0000            627   ; external initialized ram data
0000            628   ;--------------------------------------------------------
0000            629            rseg R_IXSEG
0000            630            rseg R_HOME
0000            631            rseg R_GSINIT
0000            632            rseg R_CSEG
0000            633   ;--------------------------------------------------------
0000            634   ; Reset entry point and interrupt vectors
0000            635   ;--------------------------------------------------------
0000            636            CSEG at 0x0000
0000 020000     637            ljmp    _crt0
0003            638   ;--------------------------------------------------------
0003            639   ; global & static initialisations
0003            640   ;--------------------------------------------------------
0000            641            rseg R_HOME
0000            642            rseg R_GSINIT
0000            643            rseg R_GSINIT
0000            644   ;--------------------------------------------------------
0000            645   ; data variables initialization
0000            646   ;--------------------------------------------------------
0000            647            rseg R_DINIT
0000            648   ;        Controller.c:7: int t = 0; //global variable, used to reduce the speed for timer4 isr
0000 E4         649            clr     a
0001 F580       650            mov     _t,a
0003 F581       651            mov     (_t + 1),a
0005            652            ; The linker places a 'ret' at the end of segment R_DINIT.
0005            653   ;--------------------------------------------------------
0005            654   ; code
0005            655   ;--------------------------------------------------------
0000            656            rseg R_CSEG
0000            657   ;------------------------------------------------------------
0000            658   ;Allocation info for local variables in function '_c51_external_startup'
0000            659   ;------------------------------------------------------------
0000            660   ;------------------------------------------------------------
0000            661   ;        ControllerCore.h:31: char _c51_external_startup (void)
0000            662   ;        -----------------------------------------
0000            663   ;         function _c51_external_startup
0000            664   ;        -----------------------------------------
0000            665   __c51_external_startup:
0000            666            using   0
0000            667   ;        ControllerCore.h:34: SFRPAGE = 0x00;
0000 75A700     668            mov     _SFRPAGE,#0x00
0003            669   ;        ControllerCore.h:35: WDTCN = 0xDE; //First key
0003 7597DE     670            mov     _WDTCN,#0xDE
0006            671   ;        ControllerCore.h:36: WDTCN = 0xAD; //Second key
0006 7597AD     672            mov     _WDTCN,#0xAD
0009            673   ;        ControllerCore.h:38: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     674            mov     _VDM0CN,#0x80
000C            675   ;        ControllerCore.h:39: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     676            mov     _RSTSRC,#0x06
000F            677   ;        ControllerCore.h:46: SFRPAGE = 0x10;
000F 75A710     678            mov     _SFRPAGE,#0x10
0012            679   ;        ControllerCore.h:47: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     680            mov     _PFE0CN,#0x20
0015            681   ;        ControllerCore.h:48: SFRPAGE = 0x00;
0015 75A700     682            mov     _SFRPAGE,#0x00
0018            683   ;        ControllerCore.h:69: CLKSEL = 0x00;
0018 75A900     684            mov     _CLKSEL,#0x00
001B            685   ;        ControllerCore.h:70: CLKSEL = 0x00;
001B 75A900     686            mov     _CLKSEL,#0x00
001E            687   ;        ControllerCore.h:71: while ((CLKSEL & 0x80) == 0);
001E            688   L002001?:
001E E5A9       689            mov     a,_CLKSEL
0020 30E730     690            jnb     acc.7,L002001?
0023            691   ;        ControllerCore.h:72: CLKSEL = 0x03;
0023 75A903     692            mov     _CLKSEL,#0x03
0026            693   ;        ControllerCore.h:73: CLKSEL = 0x03;
0026 75A903     694            mov     _CLKSEL,#0x03
0029            695   ;        ControllerCore.h:74: while ((CLKSEL & 0x80) == 0);
0029            696   L002004?:
0029 E5A9       697            mov     a,_CLKSEL
002B 30E7F0     698            jnb     acc.7,L002004?
002E            699   ;        ControllerCore.h:79: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     700            orl     _P0MDOUT,#0x11
0031            701   ;        ControllerCore.h:80: P3MDOUT |= 0x08; // P2.1 in push-pull mode
0031 439C08     702            orl     _P3MDOUT,#0x08
0034            703   ;        ControllerCore.h:81: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     704            mov     _XBR0,#0x01
0037            705   ;        ControllerCore.h:82: XBR1     = 0X00;
0037 75E200     706            mov     _XBR1,#0x00
003A            707   ;        ControllerCore.h:83: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     708            mov     _XBR2,#0x41
003D            709   ;        ControllerCore.h:89: SCON0 = 0x10;
003D 759810     710            mov     _SCON0,#0x10
0040            711   ;        ControllerCore.h:90: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     712            mov     _TH1,#0xE6
0043            713   ;        ControllerCore.h:91: TL1 = TH1;      // Init Timer1
0043 858D8B     714            mov     _TL1,_TH1
0046            715   ;        ControllerCore.h:92: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     716            anl     _TMOD,#0x0F
0049            717   ;        ControllerCore.h:93: TMOD |=  0x20;                       
0049 438920     718            orl     _TMOD,#0x20
004C            719   ;        ControllerCore.h:94: TR1 = 1; // START Timer1
004C D28E       720            setb    _TR1
004E            721   ;        ControllerCore.h:95: TI = 1;  // Indicate TX0 ready
004E D299       722            setb    _TI
0050            723   ;        ControllerCore.h:98: SFRPAGE=0x10;
0050 75A710     724            mov     _SFRPAGE,#0x10
0053            725   ;        ControllerCore.h:99: TMR4CN0=0x00;   // Stop Timer4; Clear TF4; WARNING: lives in SFR page 0x10
0053 759800     726            mov     _TMR4CN0,#0x00
0056            727   ;        ControllerCore.h:100: CKCON1|=0b_0000_0001; // Timer 4 uses the system clock
0056 43A601     728            orl     _CKCON1,#0x01
0059            729   ;        ControllerCore.h:101: TMR4RL=(0x10000L-(SYSCLK/(2*TIMER_4_FREQ))); // Initialize reload value
0059 75A260     730            mov     _TMR4RL,#0x60
005C 75A373     731            mov     (_TMR4RL >> 8),#0x73
005F            732   ;        ControllerCore.h:102: TMR4=0xffff;   // Set to reload immediately
005F 75A4FF     733            mov     _TMR4,#0xFF
0062 75A5FF     734            mov     (_TMR4 >> 8),#0xFF
0065            735   ;        ControllerCore.h:103: EIE2|=0b_0000_0100;     // Enable Timer4 interrupts
0065 43F304     736            orl     _EIE2,#0x04
0068            737   ;        ControllerCore.h:104: TR4=1;
0068 D29A       738            setb    _TR4
006A            739   ;        ControllerCore.h:106: SFRPAGE = 0x00;
006A 75A700     740            mov     _SFRPAGE,#0x00
006D            741   ;        ControllerCore.h:108: EA=1; // Enable interrupts
006D D2AF       742            setb    _EA
006F            743   ;        ControllerCore.h:109: return 0;
006F 758200     744            mov     dpl,#0x00
0072 22         745            ret
0073            746   ;------------------------------------------------------------
0073            747   ;Allocation info for local variables in function 'InitADC'
0073            748   ;------------------------------------------------------------
0073            749   ;------------------------------------------------------------
0073            750   ;        ControllerCore.h:112: void InitADC (void)
0073            751   ;        -----------------------------------------
0073            752   ;         function InitADC
0073            753   ;        -----------------------------------------
0073            754   _InitADC:
0073            755   ;        ControllerCore.h:114: SFRPAGE = 0x00;
0073 75A700     756            mov     _SFRPAGE,#0x00
0076            757   ;        ControllerCore.h:115: ADEN=0; // Disable ADC
0076 C2EF       758            clr     _ADEN
0078            759   ;        ControllerCore.h:120: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0078 75B280     760            mov     _ADC0CN1,#0x80
007B            761   ;        ControllerCore.h:124: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
007B 75BC20     762            mov     _ADC0CF0,#0x20
007E            763   ;        ControllerCore.h:128: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
007E 75B91E     764            mov     _ADC0CF1,#0x1E
0081            765   ;        ControllerCore.h:137: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0081 75E800     766            mov     _ADC0CN0,#0x00
0084            767   ;        ControllerCore.h:142: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0084 75DF3F     768            mov     _ADC0CF2,#0x3F
0087            769   ;        ControllerCore.h:146: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0087 75B300     770            mov     _ADC0CN2,#0x00
008A            771   ;        ControllerCore.h:148: ADEN=1; // Enable ADC
008A D2EF       772            setb    _ADEN
008C 22         773            ret
008D            774   ;------------------------------------------------------------
008D            775   ;Allocation info for local variables in function 'InitPinADC'
008D            776   ;------------------------------------------------------------
008D            777   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
008D            778   ;portno                    Allocated to registers r2 
008D            779   ;mask                      Allocated to registers r3 
008D            780   ;------------------------------------------------------------
008D            781   ;        ControllerCore.h:151: void InitPinADC (unsigned char portno, unsigned char pin_num)
008D            782   ;        -----------------------------------------
008D            783   ;         function InitPinADC
008D            784   ;        -----------------------------------------
008D            785   _InitPinADC:
008D AA82       786            mov     r2,dpl
008F            787   ;        ControllerCore.h:155: mask=1<<pin_num;
008F 8540F0     788            mov     b,_InitPinADC_PARM_2
0092 05F0       789            inc     b
0094 7401       790            mov     a,#0x01
0096 8000       791            sjmp    L004013?
0098            792   L004011?:
0098 25E0       793            add     a,acc
009A            794   L004013?:
009A D5F0F0     795            djnz    b,L004011?
009D FB         796            mov     r3,a
009E            797   ;        ControllerCore.h:157: SFRPAGE = 0x20;
009E 75A720     798            mov     _SFRPAGE,#0x20
00A1            799   ;        ControllerCore.h:158: switch (portno)
00A1 BA0030     800            cjne    r2,#0x00,L004014?
00A4 8000       801            sjmp    L004001?
00A6            802   L004014?:
00A6 BA0170     803            cjne    r2,#0x01,L004015?
00A9 8000       804            sjmp    L004002?
00AB            805   L004015?:
00AB            806   ;        ControllerCore.h:160: case 0:
00AB BA02B0     807            cjne    r2,#0x02,L004005?
00AE 8000       808            sjmp    L004003?
00B0            809   L004001?:
00B0            810   ;        ControllerCore.h:161: P0MDIN &= (~mask); // Set pin as analog input
00B0 EB         811            mov     a,r3
00B1 F4         812            cpl     a
00B2 FC         813            mov     r4,a
00B3 52F1       814            anl     _P0MDIN,a
00B5            815   ;        ControllerCore.h:162: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00B5 EB         816            mov     a,r3
00B6 42D4       817            orl     _P0SKIP,a
00B8            818   ;        ControllerCore.h:163: break;
00B8            819   ;        ControllerCore.h:164: case 1:
00B8 8000       820            sjmp    L004005?
00BA            821   L004002?:
00BA            822   ;        ControllerCore.h:165: P1MDIN &= (~mask); // Set pin as analog input
00BA EB         823            mov     a,r3
00BB F4         824            cpl     a
00BC FC         825            mov     r4,a
00BD 52F2       826            anl     _P1MDIN,a
00BF            827   ;        ControllerCore.h:166: P1SKIP |= mask; // Skip Crossbar decoding for this pin
00BF EB         828            mov     a,r3
00C0 42D5       829            orl     _P1SKIP,a
00C2            830   ;        ControllerCore.h:167: break;
00C2            831   ;        ControllerCore.h:168: case 2:
00C2 8000       832            sjmp    L004005?
00C4            833   L004003?:
00C4            834   ;        ControllerCore.h:169: P2MDIN &= (~mask); // Set pin as analog input
00C4 EB         835            mov     a,r3
00C5 F4         836            cpl     a
00C6 FC         837            mov     r4,a
00C7 52F3       838            anl     _P2MDIN,a
00C9            839   ;        ControllerCore.h:170: P2SKIP |= mask; // Skip Crossbar decoding for this pin
00C9 EB         840            mov     a,r3
00CA 42CC       841            orl     _P2SKIP,a
00CC            842   ;        ControllerCore.h:174: }
00CC            843   L004005?:
00CC            844   ;        ControllerCore.h:175: SFRPAGE = 0x00;
00CC 75A700     845            mov     _SFRPAGE,#0x00
00CF            846   ;        ControllerCore.h:176: printf("Initialized ADC at Pin %d_%d\n",portno,pin_num);
00CF AB40       847            mov     r3,_InitPinADC_PARM_2
00D1 7C00       848            mov     r4,#0x00
00D3 7D00       849            mov     r5,#0x00
00D5 C003       850            push    ar3
00D7 C004       851            push    ar4
00D9 C002       852            push    ar2
00DB C005       853            push    ar5
00DD 7450       854            mov     a,#__str_0
00DF C0E0       855            push    acc
00E1 746C       856            mov     a,#(__str_0 >> 8)
00E3 C0E0       857            push    acc
00E5 7480       858            mov     a,#0x80
00E7 C0E0       859            push    acc
00E9 120000     860            lcall   _printf
00EC E581       861            mov     a,sp
00EE 24F9       862            add     a,#0xf9
00F0 F581       863            mov     sp,a
00F2 22         864            ret
00F3            865   ;------------------------------------------------------------
00F3            866   ;Allocation info for local variables in function 'ADC_at_Pin'
00F3            867   ;------------------------------------------------------------
00F3            868   ;pin                       Allocated to registers 
00F3            869   ;------------------------------------------------------------
00F3            870   ;        ControllerCore.h:179: unsigned int ADC_at_Pin(unsigned char pin)
00F3            871   ;        -----------------------------------------
00F3            872   ;         function ADC_at_Pin
00F3            873   ;        -----------------------------------------
00F3            874   _ADC_at_Pin:
00F3 8582BB     875            mov     _ADC0MX,dpl
00F6            876   ;        ControllerCore.h:182: ADINT = 0;
00F6 C2ED       877            clr     _ADINT
00F8            878   ;        ControllerCore.h:183: ADBUSY = 1;     // Convert voltage at the pin
00F8 D2EC       879            setb    _ADBUSY
00FA            880   ;        ControllerCore.h:184: while (!ADINT); // Wait for conversion to complete
00FA            881   L005001?:
00FA 30ED50     882            jnb     _ADINT,L005001?
00FD            883   ;        ControllerCore.h:185: return (ADC0);
00FD 85BD82     884            mov     dpl,_ADC0
0100 85BE83     885            mov     dph,(_ADC0 >> 8)
0103 22         886            ret
0104            887   ;------------------------------------------------------------
0104            888   ;Allocation info for local variables in function 'Volts_at_Pin'
0104            889   ;------------------------------------------------------------
0104            890   ;pin                       Allocated to registers r2 
0104            891   ;------------------------------------------------------------
0104            892   ;        ControllerCore.h:188: float Volts_at_Pin(unsigned char pin)
0104            893   ;        -----------------------------------------
0104            894   ;         function Volts_at_Pin
0104            895   ;        -----------------------------------------
0104            896   _Volts_at_Pin:
0104            897   ;        ControllerCore.h:190: return ((ADC_at_Pin(pin)*VDD)/16383.0);
0104 120000     898            lcall   _ADC_at_Pin
0107 120000     899            lcall   ___uint2fs
010A AA82       900            mov     r2,dpl
010C AB83       901            mov     r3,dph
010E ACF0       902            mov     r4,b
0110 FD         903            mov     r5,a
0111 C002       904            push    ar2
0113 C003       905            push    ar3
0115 C004       906            push    ar4
0117 C005       907            push    ar5
0119 906C8B     908            mov     dptr,#0x6C8B
011C 75F053     909            mov     b,#0x53
011F 7440       910            mov     a,#0x40
0121 120000     911            lcall   ___fsmul
0124 AA82       912            mov     r2,dpl
0126 AB83       913            mov     r3,dph
0128 ACF0       914            mov     r4,b
012A FD         915            mov     r5,a
012B E581       916            mov     a,sp
012D 24FC       917            add     a,#0xfc
012F F581       918            mov     sp,a
0131 E4         919            clr     a
0132 C0E0       920            push    acc
0134 74FC       921            mov     a,#0xFC
0136 C0E0       922            push    acc
0138 747F       923            mov     a,#0x7F
013A C0E0       924            push    acc
013C 7446       925            mov     a,#0x46
013E C0E0       926            push    acc
0140 8A82       927            mov     dpl,r2
0142 8B83       928            mov     dph,r3
0144 8CF0       929            mov     b,r4
0146 ED         930            mov     a,r5
0147 120000     931            lcall   ___fsdiv
014A AA82       932            mov     r2,dpl
014C AB83       933            mov     r3,dph
014E ACF0       934            mov     r4,b
0150 FD         935            mov     r5,a
0151 E581       936            mov     a,sp
0153 24FC       937            add     a,#0xfc
0155 F581       938            mov     sp,a
0157 8A82       939            mov     dpl,r2
0159 8B83       940            mov     dph,r3
015B 8CF0       941            mov     b,r4
015D ED         942            mov     a,r5
015E 22         943            ret
015F            944   ;------------------------------------------------------------
015F            945   ;Allocation info for local variables in function 'Timer3us'
015F            946   ;------------------------------------------------------------
015F            947   ;us                        Allocated to registers r2 
015F            948   ;i                         Allocated to registers r3 
015F            949   ;------------------------------------------------------------
015F            950   ;        ControllerCore.h:194: void Timer3us(unsigned char us)
015F            951   ;        -----------------------------------------
015F            952   ;         function Timer3us
015F            953   ;        -----------------------------------------
015F            954   _Timer3us:
015F AA82       955            mov     r2,dpl
0161            956   ;        ControllerCore.h:199: CKCON0|=0b_0100_0000;
0161 438E40     957            orl     _CKCON0,#0x40
0164            958   ;        ControllerCore.h:201: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0164 7592B8     959            mov     _TMR3RL,#0xB8
0167 7593FF     960            mov     (_TMR3RL >> 8),#0xFF
016A            961   ;        ControllerCore.h:202: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
016A 859294     962            mov     _TMR3,_TMR3RL
016D 859395     963            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0170            964   ;        ControllerCore.h:204: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0170 759104     965            mov     _TMR3CN0,#0x04
0173            966   ;        ControllerCore.h:205: for (i = 0; i < us; i++)       // Count <us> overflows
0173 7B00       967            mov     r3,#0x00
0175            968   L007004?:
0175 C3         969            clr     c
0176 EB         970            mov     a,r3
0177 9A         971            subb    a,r2
0178 5000       972            jnc     L007007?
017A            973   ;        ControllerCore.h:207: while (!(TMR3CN0 & 0x80));  // Wait for overflow
017A            974   L007001?:
017A E591       975            mov     a,_TMR3CN0
017C 30E750     976            jnb     acc.7,L007001?
017F            977   ;        ControllerCore.h:208: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
017F 53917F     978            anl     _TMR3CN0,#0x7F
0182            979   ;        ControllerCore.h:205: for (i = 0; i < us; i++)       // Count <us> overflows
0182 0B         980            inc     r3
0183 8000       981            sjmp    L007004?
0185            982   L007007?:
0185            983   ;        ControllerCore.h:210: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0185 759100     984            mov     _TMR3CN0,#0x00
0188 22         985            ret
0189            986   ;------------------------------------------------------------
0189            987   ;Allocation info for local variables in function 'waitms'
0189            988   ;------------------------------------------------------------
0189            989   ;ms                        Allocated to registers r2 r3 
0189            990   ;j                         Allocated to registers r4 r5 
0189            991   ;k                         Allocated to registers r6 
0189            992   ;------------------------------------------------------------
0189            993   ;        ControllerCore.h:213: void waitms (unsigned int ms)
0189            994   ;        -----------------------------------------
0189            995   ;         function waitms
0189            996   ;        -----------------------------------------
0189            997   _waitms:
0189 AA82       998            mov     r2,dpl
018B AB83       999            mov     r3,dph
018D           1000   ;        ControllerCore.h:217: for(j=0; j<ms; j++)
018D 7C00      1001            mov     r4,#0x00
018F 7D00      1002            mov     r5,#0x00
0191           1003   L008005?:
0191 C3        1004            clr     c
0192 EC        1005            mov     a,r4
0193 9A        1006            subb    a,r2
0194 ED        1007            mov     a,r5
0195 9B        1008            subb    a,r3
0196 5000      1009            jnc     L008009?
0198           1010   ;        ControllerCore.h:218: for (k=0; k<4; k++) Timer3us(250);
0198 7E00      1011            mov     r6,#0x00
019A           1012   L008001?:
019A BE0410    1013            cjne    r6,#0x04,L008018?
019D           1014   L008018?:
019D 5000      1015            jnc     L008007?
019F 7582FA    1016            mov     dpl,#0xFA
01A2 C002      1017            push    ar2
01A4 C003      1018            push    ar3
01A6 C004      1019            push    ar4
01A8 C005      1020            push    ar5
01AA C006      1021            push    ar6
01AC 120000    1022            lcall   _Timer3us
01AF D006      1023            pop     ar6
01B1 D005      1024            pop     ar5
01B3 D004      1025            pop     ar4
01B5 D003      1026            pop     ar3
01B7 D002      1027            pop     ar2
01B9 0E        1028            inc     r6
01BA 8000      1029            sjmp    L008001?
01BC           1030   L008007?:
01BC           1031   ;        ControllerCore.h:217: for(j=0; j<ms; j++)
01BC 0C        1032            inc     r4
01BD BC00D0    1033            cjne    r4,#0x00,L008005?
01C0 0D        1034            inc     r5
01C1 8000      1035            sjmp    L008005?
01C3           1036   L008009?:
01C3 22        1037            ret
01C4           1038   ;------------------------------------------------------------
01C4           1039   ;Allocation info for local variables in function 'UART1_Init'
01C4           1040   ;------------------------------------------------------------
01C4           1041   ;baudrate                  Allocated to registers r2 r3 r4 r5 
01C4           1042   ;------------------------------------------------------------
01C4           1043   ;        ControllerCore.h:221: void UART1_Init (unsigned long baudrate)
01C4           1044   ;        -----------------------------------------
01C4           1045   ;         function UART1_Init
01C4           1046   ;        -----------------------------------------
01C4           1047   _UART1_Init:
01C4 AA82      1048            mov     r2,dpl
01C6 AB83      1049            mov     r3,dph
01C8 ACF0      1050            mov     r4,b
01CA FD        1051            mov     r5,a
01CB           1052   ;        ControllerCore.h:223: SFRPAGE = 0x20;
01CB 75A720    1053            mov     _SFRPAGE,#0x20
01CE           1054   ;        ControllerCore.h:224: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
01CE 75930C    1055            mov     _SMOD1,#0x0C
01D1           1056   ;        ControllerCore.h:225: SCON1 = 0x10;
01D1 75C810    1057            mov     _SCON1,#0x10
01D4           1058   ;        ControllerCore.h:226: SBCON1 =0x00;   // disable baud rate generator
01D4 759400    1059            mov     _SBCON1,#0x00
01D7           1060   ;        ControllerCore.h:227: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
01D7 8A00      1061            mov     __divulong_PARM_2,r2
01D9 8B01      1062            mov     (__divulong_PARM_2 + 1),r3
01DB 8C02      1063            mov     (__divulong_PARM_2 + 2),r4
01DD 8D03      1064            mov     (__divulong_PARM_2 + 3),r5
01DF 90A200    1065            mov     dptr,#0xA200
01E2 75F04A    1066            mov     b,#0x4A
01E5 7404      1067            mov     a,#0x04
01E7 120000    1068            lcall   __divulong
01EA AA82      1069            mov     r2,dpl
01EC AB83      1070            mov     r3,dph
01EE ACF0      1071            mov     r4,b
01F0 FD        1072            mov     r5,a
01F1 750018    1073            mov     __divulong_PARM_2,#0x18
01F4 E4        1074            clr     a
01F5 F501      1075            mov     (__divulong_PARM_2 + 1),a
01F7 F502      1076            mov     (__divulong_PARM_2 + 2),a
01F9 F503      1077            mov     (__divulong_PARM_2 + 3),a
01FB 8A82      1078            mov     dpl,r2
01FD 8B83      1079            mov     dph,r3
01FF 8CF0      1080            mov     b,r4
0201 ED        1081            mov     a,r5
0202 120000    1082            lcall   __divulong
0205 AA82      1083            mov     r2,dpl
0207 AB83      1084            mov     r3,dph
0209 ACF0      1085            mov     r4,b
020B FD        1086            mov     r5,a
020C E4        1087            clr     a
020D C3        1088            clr     c
020E 9A        1089            subb    a,r2
020F FA        1090            mov     r2,a
0210 E4        1091            clr     a
0211 9B        1092            subb    a,r3
0212 FB        1093            mov     r3,a
0213 7401      1094            mov     a,#0x01
0215 9C        1095            subb    a,r4
0216 E4        1096            clr     a
0217 9D        1097            subb    a,r5
0218 8A95      1098            mov     _SBRL1,r2
021A 8B96      1099            mov     (_SBRL1 >> 8),r3
021C           1100   ;        ControllerCore.h:228: TI1 = 1; // indicate ready for TX
021C D2C9      1101            setb    _TI1
021E           1102   ;        ControllerCore.h:229: SBCON1 |= 0x40;   // enable baud rate generator
021E 439440    1103            orl     _SBCON1,#0x40
0221           1104   ;        ControllerCore.h:230: SFRPAGE = 0x00;
0221 75A700    1105            mov     _SFRPAGE,#0x00
0224 22        1106            ret
0225           1107   ;------------------------------------------------------------
0225           1108   ;Allocation info for local variables in function 'putchar1'
0225           1109   ;------------------------------------------------------------
0225           1110   ;c                         Allocated to registers r2 
0225           1111   ;------------------------------------------------------------
0225           1112   ;        ControllerCore.h:233: void putchar1 (char c) 
0225           1113   ;        -----------------------------------------
0225           1114   ;         function putchar1
0225           1115   ;        -----------------------------------------
0225           1116   _putchar1:
0225 AA82      1117            mov     r2,dpl
0227           1118   ;        ControllerCore.h:235: SFRPAGE = 0x20;
0227 75A720    1119            mov     _SFRPAGE,#0x20
022A           1120   ;        ControllerCore.h:236: while (!TI1);
022A           1121   L010001?:
022A           1122   ;        ControllerCore.h:237: TI1=0;
022A 10C910    1123            jbc     _TI1,L010008?
022D 8000      1124            sjmp    L010001?
022F           1125   L010008?:
022F           1126   ;        ControllerCore.h:238: SBUF1 = c;
022F 8A92      1127            mov     _SBUF1,r2
0231           1128   ;        ControllerCore.h:239: SFRPAGE = 0x00;
0231 75A700    1129            mov     _SFRPAGE,#0x00
0234 22        1130            ret
0235           1131   ;------------------------------------------------------------
0235           1132   ;Allocation info for local variables in function 'sendstr1'
0235           1133   ;------------------------------------------------------------
0235           1134   ;s                         Allocated to registers r2 r3 r4 
0235           1135   ;------------------------------------------------------------
0235           1136   ;        ControllerCore.h:242: void sendstr1 (char * s)
0235           1137   ;        -----------------------------------------
0235           1138   ;         function sendstr1
0235           1139   ;        -----------------------------------------
0235           1140   _sendstr1:
0235 AA82      1141            mov     r2,dpl
0237 AB83      1142            mov     r3,dph
0239 ACF0      1143            mov     r4,b
023B           1144   ;        ControllerCore.h:244: while(*s)
023B           1145   L011001?:
023B 8A82      1146            mov     dpl,r2
023D 8B83      1147            mov     dph,r3
023F 8CF0      1148            mov     b,r4
0241 120000    1149            lcall   __gptrget
0244 FD        1150            mov     r5,a
0245 6000      1151            jz      L011004?
0247           1152   ;        ControllerCore.h:246: putchar1(*s);
0247 8D82      1153            mov     dpl,r5
0249 C002      1154            push    ar2
024B C003      1155            push    ar3
024D C004      1156            push    ar4
024F 120000    1157            lcall   _putchar1
0252 D004      1158            pop     ar4
0254 D003      1159            pop     ar3
0256 D002      1160            pop     ar2
0258           1161   ;        ControllerCore.h:247: s++;      
0258 0A        1162            inc     r2
0259 BA0090    1163            cjne    r2,#0x00,L011001?
025C 0B        1164            inc     r3
025D 8000      1165            sjmp    L011001?
025F           1166   L011004?:
025F 22        1167            ret
0260           1168   ;------------------------------------------------------------
0260           1169   ;Allocation info for local variables in function 'sendstr2'
0260           1170   ;------------------------------------------------------------
0260           1171   ;s                         Allocated to registers r2 r3 r4 
0260           1172   ;------------------------------------------------------------
0260           1173   ;        ControllerCore.h:251: void sendstr2 (char * s)
0260           1174   ;        -----------------------------------------
0260           1175   ;         function sendstr2
0260           1176   ;        -----------------------------------------
0260           1177   _sendstr2:
0260 AA82      1178            mov     r2,dpl
0262 AB83      1179            mov     r3,dph
0264 ACF0      1180            mov     r4,b
0266           1181   ;        ControllerCore.h:253: while(*s && (*s != 0x0A))
0266           1182   L012002?:
0266 8A82      1183            mov     dpl,r2
0268 8B83      1184            mov     dph,r3
026A 8CF0      1185            mov     b,r4
026C 120000    1186            lcall   __gptrget
026F FD        1187            mov     r5,a
0270 6000      1188            jz      L012005?
0272 BD0AD0    1189            cjne    r5,#0x0A,L012012?
0275 22        1190            ret
0276           1191   L012012?:
0276           1192   ;        ControllerCore.h:255: putchar1(*s);
0276 8D82      1193            mov     dpl,r5
0278 C002      1194            push    ar2
027A C003      1195            push    ar3
027C C004      1196            push    ar4
027E 120000    1197            lcall   _putchar1
0281 D004      1198            pop     ar4
0283 D003      1199            pop     ar3
0285 D002      1200            pop     ar2
0287           1201   ;        ControllerCore.h:256: s++;      
0287 0A        1202            inc     r2
0288 BA0010    1203            cjne    r2,#0x00,L012002?
028B 0B        1204            inc     r3
028C 8000      1205            sjmp    L012002?
028E           1206   L012005?:
028E 22        1207            ret
028F           1208   ;------------------------------------------------------------
028F           1209   ;Allocation info for local variables in function 'getchar1'
028F           1210   ;------------------------------------------------------------
028F           1211   ;c                         Allocated to registers 
028F           1212   ;------------------------------------------------------------
028F           1213   ;        ControllerCore.h:260: char getchar1 (void)
028F           1214   ;        -----------------------------------------
028F           1215   ;         function getchar1
028F           1216   ;        -----------------------------------------
028F           1217   _getchar1:
028F           1218   ;        ControllerCore.h:263: SFRPAGE = 0x20;
028F 75A720    1219            mov     _SFRPAGE,#0x20
0292           1220   ;        ControllerCore.h:264: while (!RI1);
0292           1221   L013001?:
0292           1222   ;        ControllerCore.h:265: RI1=0;
0292 10C810    1223            jbc     _RI1,L013008?
0295 8000      1224            sjmp    L013001?
0297           1225   L013008?:
0297           1226   ;        ControllerCore.h:267: SCON1&=0b_0011_1111;
0297 53C83F    1227            anl     _SCON1,#0x3F
029A           1228   ;        ControllerCore.h:268: c = SBUF1;
029A 859282    1229            mov     dpl,_SBUF1
029D           1230   ;        ControllerCore.h:269: SFRPAGE = 0x00;
029D 75A700    1231            mov     _SFRPAGE,#0x00
02A0           1232   ;        ControllerCore.h:270: return (c);
02A0 22        1233            ret
02A1           1234   ;------------------------------------------------------------
02A1           1235   ;Allocation info for local variables in function 'getchar1_with_timeout'
02A1           1236   ;------------------------------------------------------------
02A1           1237   ;c                         Allocated to registers 
02A1           1238   ;timeout                   Allocated to registers r2 r3 
02A1           1239   ;------------------------------------------------------------
02A1           1240   ;        ControllerCore.h:273: char getchar1_with_timeout (void)
02A1           1241   ;        -----------------------------------------
02A1           1242   ;         function getchar1_with_timeout
02A1           1243   ;        -----------------------------------------
02A1           1244   _getchar1_with_timeout:
02A1           1245   ;        ControllerCore.h:277: SFRPAGE = 0x20;
02A1 75A720    1246            mov     _SFRPAGE,#0x20
02A4           1247   ;        ControllerCore.h:279: while (!RI1)
02A4 7A00      1248            mov     r2,#0x00
02A6 7B00      1249            mov     r3,#0x00
02A8           1250   L014003?:
02A8 20C8D0    1251            jb      _RI1,L014005?
02AB           1252   ;        ControllerCore.h:281: SFRPAGE = 0x00;
02AB 75A700    1253            mov     _SFRPAGE,#0x00
02AE           1254   ;        ControllerCore.h:282: Timer3us(20);
02AE 758214    1255            mov     dpl,#0x14
02B1 C002      1256            push    ar2
02B3 C003      1257            push    ar3
02B5 120000    1258            lcall   _Timer3us
02B8 D003      1259            pop     ar3
02BA D002      1260            pop     ar2
02BC           1261   ;        ControllerCore.h:283: SFRPAGE = 0x20;
02BC 75A720    1262            mov     _SFRPAGE,#0x20
02BF           1263   ;        ControllerCore.h:284: timeout++;
02BF 0A        1264            inc     r2
02C0 BA0010    1265            cjne    r2,#0x00,L014012?
02C3 0B        1266            inc     r3
02C4           1267   L014012?:
02C4           1268   ;        ControllerCore.h:285: if(timeout==25000)
02C4 BAA8D0    1269            cjne    r2,#0xA8,L014003?
02C7 BB61D0    1270            cjne    r3,#0x61,L014003?
02CA           1271   ;        ControllerCore.h:287: SFRPAGE = 0x00;
02CA 75A700    1272            mov     _SFRPAGE,#0x00
02CD           1273   ;        ControllerCore.h:288: return ('\n'); // Timeout after half second
02CD 75820A    1274            mov     dpl,#0x0A
02D0 22        1275            ret
02D1           1276   L014005?:
02D1           1277   ;        ControllerCore.h:291: RI1=0;
02D1 C2C8      1278            clr     _RI1
02D3           1279   ;        ControllerCore.h:293: SCON1&=0b_0011_1111;
02D3 53C83F    1280            anl     _SCON1,#0x3F
02D6           1281   ;        ControllerCore.h:294: c = SBUF1;
02D6 859282    1282            mov     dpl,_SBUF1
02D9           1283   ;        ControllerCore.h:295: SFRPAGE = 0x00;
02D9 75A700    1284            mov     _SFRPAGE,#0x00
02DC           1285   ;        ControllerCore.h:296: return (c);
02DC 22        1286            ret
02DD           1287   ;------------------------------------------------------------
02DD           1288   ;Allocation info for local variables in function 'getstr1'
02DD           1289   ;------------------------------------------------------------
02DD           1290   ;s                         Allocated to registers r2 r3 r4 
02DD           1291   ;c                         Allocated to registers r5 
02DD           1292   ;------------------------------------------------------------
02DD           1293   ;        ControllerCore.h:299: void getstr1 (char * s)
02DD           1294   ;        -----------------------------------------
02DD           1295   ;         function getstr1
02DD           1296   ;        -----------------------------------------
02DD           1297   _getstr1:
02DD AA82      1298            mov     r2,dpl
02DF AB83      1299            mov     r3,dph
02E1 ACF0      1300            mov     r4,b
02E3           1301   ;        ControllerCore.h:303: while(1)
02E3           1302   L015004?:
02E3           1303   ;        ControllerCore.h:305: c=getchar1_with_timeout();
02E3 C002      1304            push    ar2
02E5 C003      1305            push    ar3
02E7 C004      1306            push    ar4
02E9 120000    1307            lcall   _getchar1_with_timeout
02EC AD82      1308            mov     r5,dpl
02EE D004      1309            pop     ar4
02F0 D003      1310            pop     ar3
02F2 D002      1311            pop     ar2
02F4           1312   ;        ControllerCore.h:306: if(c=='\n')
02F4 BD0A50    1313            cjne    r5,#0x0A,L015002?
02F7           1314   ;        ControllerCore.h:308: *s=0;
02F7 8A82      1315            mov     dpl,r2
02F9 8B83      1316            mov     dph,r3
02FB 8CF0      1317            mov     b,r4
02FD E4        1318            clr     a
02FE           1319   ;        ControllerCore.h:309: return;
02FE 020000    1320            ljmp    __gptrput
0301           1321   L015002?:
0301           1322   ;        ControllerCore.h:311: *s=c;
0301 8A82      1323            mov     dpl,r2
0303 8B83      1324            mov     dph,r3
0305 8CF0      1325            mov     b,r4
0307 ED        1326            mov     a,r5
0308 120000    1327            lcall   __gptrput
030B A3        1328            inc     dptr
030C AA82      1329            mov     r2,dpl
030E AB83      1330            mov     r3,dph
0310           1331   ;        ControllerCore.h:312: s++;
0310 8000      1332            sjmp    L015004?
0312           1333   ;------------------------------------------------------------
0312           1334   ;Allocation info for local variables in function 'RXU1'
0312           1335   ;------------------------------------------------------------
0312           1336   ;------------------------------------------------------------
0312           1337   ;        ControllerCore.h:317: bit RXU1 (void)
0312           1338   ;        -----------------------------------------
0312           1339   ;         function RXU1
0312           1340   ;        -----------------------------------------
0312           1341   _RXU1:
0312           1342   ;        ControllerCore.h:320: SFRPAGE = 0x20;
0312 75A720    1343            mov     _SFRPAGE,#0x20
0315           1344   ;        ControllerCore.h:321: mybit=RI1;
0315 A2C8      1345            mov     c,_RI1
0317           1346   ;        ControllerCore.h:322: SFRPAGE = 0x00;
0317 75A700    1347            mov     _SFRPAGE,#0x00
031A           1348   ;        ControllerCore.h:323: return mybit;
031A 22        1349            ret
031B           1350   ;------------------------------------------------------------
031B           1351   ;Allocation info for local variables in function 'waitms_or_RI1'
031B           1352   ;------------------------------------------------------------
031B           1353   ;ms                        Allocated to registers r2 r3 
031B           1354   ;j                         Allocated to registers r4 r5 
031B           1355   ;k                         Allocated to registers r6 
031B           1356   ;------------------------------------------------------------
031B           1357   ;        ControllerCore.h:326: void waitms_or_RI1 (unsigned int ms)
031B           1358   ;        -----------------------------------------
031B           1359   ;         function waitms_or_RI1
031B           1360   ;        -----------------------------------------
031B           1361   _waitms_or_RI1:
031B AA82      1362            mov     r2,dpl
031D AB83      1363            mov     r3,dph
031F           1364   ;        ControllerCore.h:330: for(j=0; j<ms; j++)
031F 7C00      1365            mov     r4,#0x00
0321 7D00      1366            mov     r5,#0x00
0323           1367   L017007?:
0323 C3        1368            clr     c
0324 EC        1369            mov     a,r4
0325 9A        1370            subb    a,r2
0326 ED        1371            mov     a,r5
0327 9B        1372            subb    a,r3
0328 5000      1373            jnc     L017011?
032A           1374   ;        ControllerCore.h:332: for (k=0; k<4; k++)
032A 7E00      1375            mov     r6,#0x00
032C           1376   L017003?:
032C BE0450    1377            cjne    r6,#0x04,L017019?
032F           1378   L017019?:
032F 5000      1379            jnc     L017009?
0331           1380   ;        ControllerCore.h:334: if(RXU1()) return;
0331 C002      1381            push    ar2
0333 C003      1382            push    ar3
0335 C004      1383            push    ar4
0337 C005      1384            push    ar5
0339 C006      1385            push    ar6
033B 120000    1386            lcall   _RXU1
033E E4        1387            clr     a
033F 33        1388            rlc     a
0340 D006      1389            pop     ar6
0342 D005      1390            pop     ar5
0344 D004      1391            pop     ar4
0346 D003      1392            pop     ar3
0348 D002      1393            pop     ar2
034A 6000      1394            jz      L017002?
034C 22        1395            ret
034D           1396   L017002?:
034D           1397   ;        ControllerCore.h:335: Timer3us(250);
034D 7582FA    1398            mov     dpl,#0xFA
0350 C002      1399            push    ar2
0352 C003      1400            push    ar3
0354 C004      1401            push    ar4
0356 C005      1402            push    ar5
0358 C006      1403            push    ar6
035A 120000    1404            lcall   _Timer3us
035D D006      1405            pop     ar6
035F D005      1406            pop     ar5
0361 D004      1407            pop     ar4
0363 D003      1408            pop     ar3
0365 D002      1409            pop     ar2
0367           1410   ;        ControllerCore.h:332: for (k=0; k<4; k++)
0367 0E        1411            inc     r6
0368 8000      1412            sjmp    L017003?
036A           1413   L017009?:
036A           1414   ;        ControllerCore.h:330: for(j=0; j<ms; j++)
036A 0C        1415            inc     r4
036B BC0090    1416            cjne    r4,#0x00,L017007?
036E 0D        1417            inc     r5
036F 8000      1418            sjmp    L017007?
0371           1419   L017011?:
0371 22        1420            ret
0372           1421   ;------------------------------------------------------------
0372           1422   ;Allocation info for local variables in function 'SendATCommand'
0372           1423   ;------------------------------------------------------------
0372           1424   ;s                         Allocated to registers r2 r3 r4 
0372           1425   ;------------------------------------------------------------
0372           1426   ;        ControllerCore.h:340: void SendATCommand (char * s)
0372           1427   ;        -----------------------------------------
0372           1428   ;         function SendATCommand
0372           1429   ;        -----------------------------------------
0372           1430   _SendATCommand:
0372 AA82      1431            mov     r2,dpl
0374 AB83      1432            mov     r3,dph
0376 ACF0      1433            mov     r4,b
0378           1434   ;        ControllerCore.h:342: printf("Command: %s", s);
0378 C002      1435            push    ar2
037A C003      1436            push    ar3
037C C004      1437            push    ar4
037E C002      1438            push    ar2
0380 C003      1439            push    ar3
0382 C004      1440            push    ar4
0384 7450      1441            mov     a,#__str_1
0386 C0E0      1442            push    acc
0388 7460      1443            mov     a,#(__str_1 >> 8)
038A C0E0      1444            push    acc
038C 7480      1445            mov     a,#0x80
038E C0E0      1446            push    acc
0390 120000    1447            lcall   _printf
0393 E581      1448            mov     a,sp
0395 24FA      1449            add     a,#0xfa
0397 F581      1450            mov     sp,a
0399           1451   ;        ControllerCore.h:343: P3_3=0; // 'set' pin to 0 is 'AT' mode.
0399 C2B3      1452            clr     _P3_3
039B           1453   ;        ControllerCore.h:344: waitms(5);
039B 900005    1454            mov     dptr,#0x0005
039E 120000    1455            lcall   _waitms
03A1 D004      1456            pop     ar4
03A3 D003      1457            pop     ar3
03A5 D002      1458            pop     ar2
03A7           1459   ;        ControllerCore.h:345: sendstr1(s);
03A7 8A82      1460            mov     dpl,r2
03A9 8B83      1461            mov     dph,r3
03AB 8CF0      1462            mov     b,r4
03AD 120000    1463            lcall   _sendstr1
03B0           1464   ;        ControllerCore.h:346: getstr1(buff);
03B0 90A780    1465            mov     dptr,#_buff
03B3 75F000    1466            mov     b,#0x00
03B6 120000    1467            lcall   _getstr1
03B9           1468   ;        ControllerCore.h:347: waitms(10);
03B9 90000A    1469            mov     dptr,#0x000A
03BC 120000    1470            lcall   _waitms
03BF           1471   ;        ControllerCore.h:348: P3_3=1; // 'set' pin to 1 is normal operation mode.
03BF D2B3      1472            setb    _P3_3
03C1           1473   ;        ControllerCore.h:349: printf("Response: %s\r\n", buff);
03C1 7480      1474            mov     a,#_buff
03C3 C0E0      1475            push    acc
03C5 74A7      1476            mov     a,#(_buff >> 8)
03C7 C0E0      1477            push    acc
03C9 E4        1478            clr     a
03CA C0E0      1479            push    acc
03CC 74D0      1480            mov     a,#__str_2
03CE C0E0      1481            push    acc
03D0 7466      1482            mov     a,#(__str_2 >> 8)
03D2 C0E0      1483            push    acc
03D4 7480      1484            mov     a,#0x80
03D6 C0E0      1485            push    acc
03D8 120000    1486            lcall   _printf
03DB E581      1487            mov     a,sp
03DD 24FA      1488            add     a,#0xfa
03DF F581      1489            mov     sp,a
03E1 22        1490            ret
03E2           1491   ;------------------------------------------------------------
03E2           1492   ;Allocation info for local variables in function 'Package_Signed_int'
03E2           1493   ;------------------------------------------------------------
03E2           1494   ;in                        Allocated to registers r2 r3 
03E2           1495   ;out                       Allocated to registers r4 
03E2           1496   ;------------------------------------------------------------
03E2           1497   ;        ControllerCore.h:352: char Package_Signed_int(int in){
03E2           1498   ;        -----------------------------------------
03E2           1499   ;         function Package_Signed_int
03E2           1500   ;        -----------------------------------------
03E2           1501   _Package_Signed_int:
03E2 AA82      1502            mov     r2,dpl
03E4 AB83      1503            mov     r3,dph
03E6           1504   ;        ControllerCore.h:353: char out = 0x80; //set bit 7, 6 = 0b10 to indicate motor cmd
03E6 7C80      1505            mov     r4,#0x80
03E8           1506   ;        ControllerCore.h:355: if(in<0){
03E8 EB        1507            mov     a,r3
03E9 30E710    1508            jnb     acc.7,L019002?
03EC           1509   ;        ControllerCore.h:356: out |= 0x20; //set bit 5 to 1 if negative
03EC 7CA0      1510            mov     r4,#0xA0
03EE           1511   L019002?:
03EE           1512   ;        ControllerCore.h:358: out |= abs(in) & 0x1F; //preserve only bits 0-4
03EE 8A82      1513            mov     dpl,r2
03F0 8B83      1514            mov     dph,r3
03F2 C004      1515            push    ar4
03F4 120000    1516            lcall   _abs
03F7 E582      1517            mov     a,dpl
03F9 8583F0    1518            mov     b,dph
03FC D004      1519            pop     ar4
03FE 541F      1520            anl     a,#0x1F
0400 FA        1521            mov     r2,a
0401 7B00      1522            mov     r3,#0x00
0403 EC        1523            mov     a,r4
0404 FD        1524            mov     r5,a
0405 33        1525            rlc     a
0406 95E0      1526            subb    a,acc
0408 FE        1527            mov     r6,a
0409 ED        1528            mov     a,r5
040A 4202      1529            orl     ar2,a
040C EE        1530            mov     a,r6
040D 4203      1531            orl     ar3,a
040F 8A04      1532            mov     ar4,r2
0411           1533   ;        ControllerCore.h:359: return out;
0411 8C82      1534            mov     dpl,r4
0413 22        1535            ret
0414           1536   ;------------------------------------------------------------
0414           1537   ;Allocation info for local variables in function 'Voltage_to_Coordinate'
0414           1538   ;------------------------------------------------------------
0414           1539   ;v                         Allocated to registers r2 r3 r4 r5 
0414           1540   ;------------------------------------------------------------
0414           1541   ;        ControllerUI.h:21: int Voltage_to_Coordinate(float v){
0414           1542   ;        -----------------------------------------
0414           1543   ;         function Voltage_to_Coordinate
0414           1544   ;        -----------------------------------------
0414           1545   _Voltage_to_Coordinate:
0414 AA82      1546            mov     r2,dpl
0416 AB83      1547            mov     r3,dph
0418 ACF0      1548            mov     r4,b
041A FD        1549            mov     r5,a
041B           1550   ;        ControllerUI.h:22: if(1.65 < v){
041B C002      1551            push    ar2
041D C003      1552            push    ar3
041F C004      1553            push    ar4
0421 C005      1554            push    ar5
0423 C002      1555            push    ar2
0425 C003      1556            push    ar3
0427 C004      1557            push    ar4
0429 C005      1558            push    ar5
042B 903333    1559            mov     dptr,#0x3333
042E 75F0D3    1560            mov     b,#0xD3
0431 743F      1561            mov     a,#0x3F
0433 120000    1562            lcall   ___fslt
0436 AE82      1563            mov     r6,dpl
0438 E581      1564            mov     a,sp
043A 24FC      1565            add     a,#0xfc
043C F581      1566            mov     sp,a
043E D005      1567            pop     ar5
0440 D004      1568            pop     ar4
0442 D003      1569            pop     ar3
0444 D002      1570            pop     ar2
0446 EE        1571            mov     a,r6
0447 6000      1572            jz      L020005?
0449           1573   ;        ControllerUI.h:23: return (int)((v-1.65)/(3.30-1.65)*20);
0449 7433      1574            mov     a,#0x33
044B C0E0      1575            push    acc
044D C0E0      1576            push    acc
044F 74D3      1577            mov     a,#0xD3
0451 C0E0      1578            push    acc
0453 743F      1579            mov     a,#0x3F
0455 C0E0      1580            push    acc
0457 8A82      1581            mov     dpl,r2
0459 8B83      1582            mov     dph,r3
045B 8CF0      1583            mov     b,r4
045D ED        1584            mov     a,r5
045E 120000    1585            lcall   ___fssub
0461 AE82      1586            mov     r6,dpl
0463 AF83      1587            mov     r7,dph
0465 A8F0      1588            mov     r0,b
0467 F9        1589            mov     r1,a
0468 E581      1590            mov     a,sp
046A 24FC      1591            add     a,#0xfc
046C F581      1592            mov     sp,a
046E 7433      1593            mov     a,#0x33
0470 C0E0      1594            push    acc
0472 C0E0      1595            push    acc
0474 74D3      1596            mov     a,#0xD3
0476 C0E0      1597            push    acc
0478 743F      1598            mov     a,#0x3F
047A C0E0      1599            push    acc
047C 8E82      1600            mov     dpl,r6
047E 8F83      1601            mov     dph,r7
0480 88F0      1602            mov     b,r0
0482 E9        1603            mov     a,r1
0483 120000    1604            lcall   ___fsdiv
0486 AE82      1605            mov     r6,dpl
0488 AF83      1606            mov     r7,dph
048A A8F0      1607            mov     r0,b
048C F9        1608            mov     r1,a
048D E581      1609            mov     a,sp
048F 24FC      1610            add     a,#0xfc
0491 F581      1611            mov     sp,a
0493 C006      1612            push    ar6
0495 C007      1613            push    ar7
0497 C000      1614            push    ar0
0499 C001      1615            push    ar1
049B 900000    1616            mov     dptr,#0x0000
049E 75F0A0    1617            mov     b,#0xA0
04A1 7441      1618            mov     a,#0x41
04A3 120000    1619            lcall   ___fsmul
04A6 AE82      1620            mov     r6,dpl
04A8 AF83      1621            mov     r7,dph
04AA A8F0      1622            mov     r0,b
04AC F9        1623            mov     r1,a
04AD E581      1624            mov     a,sp
04AF 24FC      1625            add     a,#0xfc
04B1 F581      1626            mov     sp,a
04B3 8E82      1627            mov     dpl,r6
04B5 8F83      1628            mov     dph,r7
04B7 88F0      1629            mov     b,r0
04B9 E9        1630            mov     a,r1
04BA 020000    1631            ljmp    ___fs2sint
04BD           1632   L020005?:
04BD           1633   ;        ControllerUI.h:24: }else if(1.65 > v){
04BD C002      1634            push    ar2
04BF C003      1635            push    ar3
04C1 C004      1636            push    ar4
04C3 C005      1637            push    ar5
04C5 C002      1638            push    ar2
04C7 C003      1639            push    ar3
04C9 C004      1640            push    ar4
04CB C005      1641            push    ar5
04CD 903333    1642            mov     dptr,#0x3333
04D0 75F0D3    1643            mov     b,#0xD3
04D3 743F      1644            mov     a,#0x3F
04D5 120000    1645            lcall   ___fsgt
04D8 AE82      1646            mov     r6,dpl
04DA E581      1647            mov     a,sp
04DC 24FC      1648            add     a,#0xfc
04DE F581      1649            mov     sp,a
04E0 D005      1650            pop     ar5
04E2 D004      1651            pop     ar4
04E4 D003      1652            pop     ar3
04E6 D002      1653            pop     ar2
04E8 EE        1654            mov     a,r6
04E9 6000      1655            jz      L020002?
04EB           1656   ;        ControllerUI.h:25: return (int)((1-v/1.65)*(-20));
04EB 7433      1657            mov     a,#0x33
04ED C0E0      1658            push    acc
04EF C0E0      1659            push    acc
04F1 74D3      1660            mov     a,#0xD3
04F3 C0E0      1661            push    acc
04F5 743F      1662            mov     a,#0x3F
04F7 C0E0      1663            push    acc
04F9 8A82      1664            mov     dpl,r2
04FB 8B83      1665            mov     dph,r3
04FD 8CF0      1666            mov     b,r4
04FF ED        1667            mov     a,r5
0500 120000    1668            lcall   ___fsdiv
0503 AA82      1669            mov     r2,dpl
0505 AB83      1670            mov     r3,dph
0507 ACF0      1671            mov     r4,b
0509 FD        1672            mov     r5,a
050A E581      1673            mov     a,sp
050C 24FC      1674            add     a,#0xfc
050E F581      1675            mov     sp,a
0510 C002      1676            push    ar2
0512 C003      1677            push    ar3
0514 C004      1678            push    ar4
0516 C005      1679            push    ar5
0518 900000    1680            mov     dptr,#0x0000
051B 75F080    1681            mov     b,#0x80
051E 743F      1682            mov     a,#0x3F
0520 120000    1683            lcall   ___fssub
0523 AA82      1684            mov     r2,dpl
0525 AB83      1685            mov     r3,dph
0527 ACF0      1686            mov     r4,b
0529 FD        1687            mov     r5,a
052A E581      1688            mov     a,sp
052C 24FC      1689            add     a,#0xfc
052E F581      1690            mov     sp,a
0530 C002      1691            push    ar2
0532 C003      1692            push    ar3
0534 C004      1693            push    ar4
0536 C005      1694            push    ar5
0538 900000    1695            mov     dptr,#0x0000
053B 75F0A0    1696            mov     b,#0xA0
053E 74C1      1697            mov     a,#0xC1
0540 120000    1698            lcall   ___fsmul
0543 AA82      1699            mov     r2,dpl
0545 AB83      1700            mov     r3,dph
0547 ACF0      1701            mov     r4,b
0549 FD        1702            mov     r5,a
054A E581      1703            mov     a,sp
054C 24FC      1704            add     a,#0xfc
054E F581      1705            mov     sp,a
0550 8A82      1706            mov     dpl,r2
0552 8B83      1707            mov     dph,r3
0554 8CF0      1708            mov     b,r4
0556 ED        1709            mov     a,r5
0557           1710   ;        ControllerUI.h:27: return 0;
0557 020000    1711            ljmp    ___fs2sint
055A           1712   L020002?:
055A 900000    1713            mov     dptr,#0x0000
055D 22        1714            ret
055E           1715   ;------------------------------------------------------------
055E           1716   ;Allocation info for local variables in function 'Check_Joystick_Button'
055E           1717   ;------------------------------------------------------------
055E           1718   ;v                         Allocated to registers r2 r3 r4 r5 
055E           1719   ;------------------------------------------------------------
055E           1720   ;        ControllerUI.h:31: char Check_Joystick_Button(float v){
055E           1721   ;        -----------------------------------------
055E           1722   ;         function Check_Joystick_Button
055E           1723   ;        -----------------------------------------
055E           1724   _Check_Joystick_Button:
055E AA82      1725            mov     r2,dpl
0560 AB83      1726            mov     r3,dph
0562 ACF0      1727            mov     r4,b
0564 FD        1728            mov     r5,a
0565           1729   ;        ControllerUI.h:32: if(v != 0.0){
0565 EA        1730            mov     a,r2
0566 4B        1731            orl     a,r3
0567 4C        1732            orl     a,r4
0568 8DF0      1733            mov     b,r5
056A C2F7      1734            clr     b.7 ; Clear the sign bit
056C 45F0      1735            orl     a,b
056E 6000      1736            jz      L021002?
0570           1737   ;        ControllerUI.h:33: return 0;
0570 758200    1738            mov     dpl,#0x00
0573           1739   ;        ControllerUI.h:35: return 1;
0573 22        1740            ret
0574           1741   L021002?:
0574 758201    1742            mov     dpl,#0x01
0577 22        1743            ret
0578           1744   ;------------------------------------------------------------
0578           1745   ;Allocation info for local variables in function 'Generate_Motor_Command'
0578           1746   ;------------------------------------------------------------
0578           1747   ;x                         Allocated with name '_Generate_Motor_Command_PARM_2'
0578           1748   ;y                         Allocated with name '_Generate_Motor_Command_PARM_3'
0578           1749   ;cmd                       Allocated to registers r2 r3 r4 
0578           1750   ;sloc0                     Allocated with name '_Generate_Motor_Command_sloc0_1_0'
0578           1751   ;------------------------------------------------------------
0578           1752   ;        ControllerUI.h:40: void Generate_Motor_Command(Motor* cmd, int x, int y){
0578           1753   ;        -----------------------------------------
0578           1754   ;         function Generate_Motor_Command
0578           1755   ;        -----------------------------------------
0578           1756   _Generate_Motor_Command:
0578 AA82      1757            mov     r2,dpl
057A AB83      1758            mov     r3,dph
057C ACF0      1759            mov     r4,b
057E           1760   ;        ControllerUI.h:42: if((x==0) && (y==0)){
057E E540      1761            mov     a,_Generate_Motor_Command_PARM_2
0580 4541      1762            orl     a,(_Generate_Motor_Command_PARM_2 + 1)
0582 7000      1763            jnz     L022002?
0584 E540      1764            mov     a,_Generate_Motor_Command_PARM_3
0586 4541      1765            orl     a,(_Generate_Motor_Command_PARM_3 + 1)
0588 7000      1766            jnz     L022002?
058A           1767   ;        ControllerUI.h:43: cmd->left = 0;
058A 8A82      1768            mov     dpl,r2
058C 8B83      1769            mov     dph,r3
058E 8CF0      1770            mov     b,r4
0590 E4        1771            clr     a
0591 120000    1772            lcall   __gptrput
0594 A3        1773            inc     dptr
0595 E4        1774            clr     a
0596 120000    1775            lcall   __gptrput
0599           1776   ;        ControllerUI.h:44: cmd->right = 0;
0599 7402      1777            mov     a,#0x02
059B 2A        1778            add     a,r2
059C FD        1779            mov     r5,a
059D E4        1780            clr     a
059E 3B        1781            addc    a,r3
059F FE        1782            mov     r6,a
05A0 8C07      1783            mov     ar7,r4
05A2 8D82      1784            mov     dpl,r5
05A4 8E83      1785            mov     dph,r6
05A6 8FF0      1786            mov     b,r7
05A8 E4        1787            clr     a
05A9 120000    1788            lcall   __gptrput
05AC A3        1789            inc     dptr
05AD E4        1790            clr     a
05AE           1791   ;        ControllerUI.h:45: return;
05AE 020000    1792            ljmp    __gptrput
05B1           1793   L022002?:
05B1           1794   ;        ControllerUI.h:48: if(y >= 0){
05B1 E541      1795            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
05B3 33        1796            rlc     a
05B4 E4        1797            clr     a
05B5 33        1798            rlc     a
05B6 FD        1799            mov     r5,a
05B7 6000      1800            jz      L022064?
05B9 020000    1801            ljmp    L022042?
05BC           1802   L022064?:
05BC           1803   ;        ControllerUI.h:49: if(x > 0){
05BC C3        1804            clr     c
05BD E4        1805            clr     a
05BE 9540      1806            subb    a,_Generate_Motor_Command_PARM_2
05C0 E4        1807            clr     a
05C1 6480      1808            xrl     a,#0x80
05C3 8541F0    1809            mov     b,(_Generate_Motor_Command_PARM_2 + 1)
05C6 63F080    1810            xrl     b,#0x80
05C9 95F0      1811            subb    a,b
05CB 4000      1812            jc      L022065?
05CD 020000    1813            ljmp    L022017?
05D0           1814   L022065?:
05D0           1815   ;        ControllerUI.h:50: if(x < y){
05D0 C3        1816            clr     c
05D1 E540      1817            mov     a,_Generate_Motor_Command_PARM_2
05D3 9540      1818            subb    a,_Generate_Motor_Command_PARM_3
05D5 E541      1819            mov     a,(_Generate_Motor_Command_PARM_2 + 1)
05D7 6480      1820            xrl     a,#0x80
05D9 8541F0    1821            mov     b,(_Generate_Motor_Command_PARM_3 + 1)
05DC 63F080    1822            xrl     b,#0x80
05DF 95F0      1823            subb    a,b
05E1 5000      1824            jnc     L022008?
05E3           1825   ;        ControllerUI.h:51: cmd->left = y;
05E3 8A82      1826            mov     dpl,r2
05E5 8B83      1827            mov     dph,r3
05E7 8CF0      1828            mov     b,r4
05E9 E540      1829            mov     a,_Generate_Motor_Command_PARM_3
05EB 120000    1830            lcall   __gptrput
05EE A3        1831            inc     dptr
05EF E541      1832            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
05F1 120000    1833            lcall   __gptrput
05F4           1834   ;        ControllerUI.h:52: cmd->right = y - x/2;
05F4 7402      1835            mov     a,#0x02
05F6 2A        1836            add     a,r2
05F7 F570      1837            mov     _Generate_Motor_Command_sloc0_1_0,a
05F9 E4        1838            clr     a
05FA 3B        1839            addc    a,r3
05FB F571      1840            mov     (_Generate_Motor_Command_sloc0_1_0 + 1),a
05FD 8C72      1841            mov     (_Generate_Motor_Command_sloc0_1_0 + 2),r4
05FF 750002    1842            mov     __divsint_PARM_2,#0x02
0602 E4        1843            clr     a
0603 F501      1844            mov     (__divsint_PARM_2 + 1),a
0605 854082    1845            mov     dpl,_Generate_Motor_Command_PARM_2
0608 854183    1846            mov     dph,(_Generate_Motor_Command_PARM_2 + 1)
060B 120000    1847            lcall   __divsint
060E A982      1848            mov     r1,dpl
0610 AE83      1849            mov     r6,dph
0612 E540      1850            mov     a,_Generate_Motor_Command_PARM_3
0614 C3        1851            clr     c
0615 99        1852            subb    a,r1
0616 F9        1853            mov     r1,a
0617 E541      1854            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0619 9E        1855            subb    a,r6
061A FE        1856            mov     r6,a
061B 857082    1857            mov     dpl,_Generate_Motor_Command_sloc0_1_0
061E 857183    1858            mov     dph,(_Generate_Motor_Command_sloc0_1_0 + 1)
0621 8572F0    1859            mov     b,(_Generate_Motor_Command_sloc0_1_0 + 2)
0624 E9        1860            mov     a,r1
0625 120000    1861            lcall   __gptrput
0628 A3        1862            inc     dptr
0629 EE        1863            mov     a,r6
062A 020000    1864            ljmp    __gptrput
062D           1865   L022008?:
062D           1866   ;        ControllerUI.h:53: }else if(x == y){
062D E540      1867            mov     a,_Generate_Motor_Command_PARM_3
062F B540D0    1868            cjne    a,_Generate_Motor_Command_PARM_2,L022005?
0632 E541      1869            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0634 B541D0    1870            cjne    a,(_Generate_Motor_Command_PARM_2 + 1),L022005?
0637           1871   ;        ControllerUI.h:54: cmd->left = y;
0637 8A82      1872            mov     dpl,r2
0639 8B83      1873            mov     dph,r3
063B 8CF0      1874            mov     b,r4
063D E540      1875            mov     a,_Generate_Motor_Command_PARM_3
063F 120000    1876            lcall   __gptrput
0642 A3        1877            inc     dptr
0643 E541      1878            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0645 120000    1879            lcall   __gptrput
0648           1880   ;        ControllerUI.h:55: cmd->right = y/2;
0648 7402      1881            mov     a,#0x02
064A 2A        1882            add     a,r2
064B F570      1883            mov     _Generate_Motor_Command_sloc0_1_0,a
064D E4        1884            clr     a
064E 3B        1885            addc    a,r3
064F F571      1886            mov     (_Generate_Motor_Command_sloc0_1_0 + 1),a
0651 8C72      1887            mov     (_Generate_Motor_Command_sloc0_1_0 + 2),r4
0653 750002    1888            mov     __divsint_PARM_2,#0x02
0656 E4        1889            clr     a
0657 F501      1890            mov     (__divsint_PARM_2 + 1),a
0659 854082    1891            mov     dpl,_Generate_Motor_Command_PARM_3
065C 854183    1892            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
065F 120000    1893            lcall   __divsint
0662 A982      1894            mov     r1,dpl
0664 AE83      1895            mov     r6,dph
0666 857082    1896            mov     dpl,_Generate_Motor_Command_sloc0_1_0
0669 857183    1897            mov     dph,(_Generate_Motor_Command_sloc0_1_0 + 1)
066C 8572F0    1898            mov     b,(_Generate_Motor_Command_sloc0_1_0 + 2)
066F E9        1899            mov     a,r1
0670 120000    1900            lcall   __gptrput
0673 A3        1901            inc     dptr
0674 EE        1902            mov     a,r6
0675 020000    1903            ljmp    __gptrput
0678           1904   L022005?:
0678           1905   ;        ControllerUI.h:57: cmd->left = x;
0678 8A82      1906            mov     dpl,r2
067A 8B83      1907            mov     dph,r3
067C 8CF0      1908            mov     b,r4
067E E540      1909            mov     a,_Generate_Motor_Command_PARM_2
0680 120000    1910            lcall   __gptrput
0683 A3        1911            inc     dptr
0684 E541      1912            mov     a,(_Generate_Motor_Command_PARM_2 + 1)
0686 120000    1913            lcall   __gptrput
0689           1914   ;        ControllerUI.h:58: cmd->right = y/2;
0689 7402      1915            mov     a,#0x02
068B 2A        1916            add     a,r2
068C F570      1917            mov     _Generate_Motor_Command_sloc0_1_0,a
068E E4        1918            clr     a
068F 3B        1919            addc    a,r3
0690 F571      1920            mov     (_Generate_Motor_Command_sloc0_1_0 + 1),a
0692 8C72      1921            mov     (_Generate_Motor_Command_sloc0_1_0 + 2),r4
0694 750002    1922            mov     __divsint_PARM_2,#0x02
0697 E4        1923            clr     a
0698 F501      1924            mov     (__divsint_PARM_2 + 1),a
069A 854082    1925            mov     dpl,_Generate_Motor_Command_PARM_3
069D 854183    1926            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
06A0 120000    1927            lcall   __divsint
06A3 A982      1928            mov     r1,dpl
06A5 AE83      1929            mov     r6,dph
06A7 857082    1930            mov     dpl,_Generate_Motor_Command_sloc0_1_0
06AA 857183    1931            mov     dph,(_Generate_Motor_Command_sloc0_1_0 + 1)
06AD 8572F0    1932            mov     b,(_Generate_Motor_Command_sloc0_1_0 + 2)
06B0 E9        1933            mov     a,r1
06B1 120000    1934            lcall   __gptrput
06B4 A3        1935            inc     dptr
06B5 EE        1936            mov     a,r6
06B6 020000    1937            ljmp    __gptrput
06B9           1938   L022017?:
06B9           1939   ;        ControllerUI.h:62: x *= -1;
06B9 C3        1940            clr     c
06BA E4        1941            clr     a
06BB 9540      1942            subb    a,_Generate_Motor_Command_PARM_2
06BD F540      1943            mov     _Generate_Motor_Command_PARM_2,a
06BF E4        1944            clr     a
06C0 9541      1945            subb    a,(_Generate_Motor_Command_PARM_2 + 1)
06C2 F541      1946            mov     (_Generate_Motor_Command_PARM_2 + 1),a
06C4           1947   ;        ControllerUI.h:63: if(x < y){
06C4 C3        1948            clr     c
06C5 E540      1949            mov     a,_Generate_Motor_Command_PARM_2
06C7 9540      1950            subb    a,_Generate_Motor_Command_PARM_3
06C9 E541      1951            mov     a,(_Generate_Motor_Command_PARM_2 + 1)
06CB 6480      1952            xrl     a,#0x80
06CD 8541F0    1953            mov     b,(_Generate_Motor_Command_PARM_3 + 1)
06D0 63F080    1954            xrl     b,#0x80
06D3 95F0      1955            subb    a,b
06D5 5000      1956            jnc     L022014?
06D7           1957   ;        ControllerUI.h:64: cmd->left = y - x/2;
06D7 750002    1958            mov     __divsint_PARM_2,#0x02
06DA E4        1959            clr     a
06DB F501      1960            mov     (__divsint_PARM_2 + 1),a
06DD 854082    1961            mov     dpl,_Generate_Motor_Command_PARM_2
06E0 854183    1962            mov     dph,(_Generate_Motor_Command_PARM_2 + 1)
06E3 C002      1963            push    ar2
06E5 C003      1964            push    ar3
06E7 C004      1965            push    ar4
06E9 120000    1966            lcall   __divsint
06EC AE82      1967            mov     r6,dpl
06EE AF83      1968            mov     r7,dph
06F0 D004      1969            pop     ar4
06F2 D003      1970            pop     ar3
06F4 D002      1971            pop     ar2
06F6 E540      1972            mov     a,_Generate_Motor_Command_PARM_3
06F8 C3        1973            clr     c
06F9 9E        1974            subb    a,r6
06FA FE        1975            mov     r6,a
06FB E541      1976            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
06FD 9F        1977            subb    a,r7
06FE FF        1978            mov     r7,a
06FF 8A82      1979            mov     dpl,r2
0701 8B83      1980            mov     dph,r3
0703 8CF0      1981            mov     b,r4
0705 EE        1982            mov     a,r6
0706 120000    1983            lcall   __gptrput
0709 A3        1984            inc     dptr
070A EF        1985            mov     a,r7
070B 120000    1986            lcall   __gptrput
070E           1987   ;        ControllerUI.h:65: cmd->right = y;
070E 7402      1988            mov     a,#0x02
0710 2A        1989            add     a,r2
0711 FE        1990            mov     r6,a
0712 E4        1991            clr     a
0713 3B        1992            addc    a,r3
0714 FF        1993            mov     r7,a
0715 8C00      1994            mov     ar0,r4
0717 8E82      1995            mov     dpl,r6
0719 8F83      1996            mov     dph,r7
071B 88F0      1997            mov     b,r0
071D E540      1998            mov     a,_Generate_Motor_Command_PARM_3
071F 120000    1999            lcall   __gptrput
0722 A3        2000            inc     dptr
0723 E541      2001            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0725 020000    2002            ljmp    __gptrput
0728           2003   L022014?:
0728           2004   ;        ControllerUI.h:66: }else if(x == y){
0728 E540      2005            mov     a,_Generate_Motor_Command_PARM_3
072A B540D0    2006            cjne    a,_Generate_Motor_Command_PARM_2,L022011?
072D E541      2007            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
072F B541D0    2008            cjne    a,(_Generate_Motor_Command_PARM_2 + 1),L022011?
0732           2009   ;        ControllerUI.h:67: cmd->left = y/2;
0732 750002    2010            mov     __divsint_PARM_2,#0x02
0735 E4        2011            clr     a
0736 F501      2012            mov     (__divsint_PARM_2 + 1),a
0738 854082    2013            mov     dpl,_Generate_Motor_Command_PARM_3
073B 854183    2014            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
073E C002      2015            push    ar2
0740 C003      2016            push    ar3
0742 C004      2017            push    ar4
0744 120000    2018            lcall   __divsint
0747 AE82      2019            mov     r6,dpl
0749 AF83      2020            mov     r7,dph
074B D004      2021            pop     ar4
074D D003      2022            pop     ar3
074F D002      2023            pop     ar2
0751 8A82      2024            mov     dpl,r2
0753 8B83      2025            mov     dph,r3
0755 8CF0      2026            mov     b,r4
0757 EE        2027            mov     a,r6
0758 120000    2028            lcall   __gptrput
075B A3        2029            inc     dptr
075C EF        2030            mov     a,r7
075D 120000    2031            lcall   __gptrput
0760           2032   ;        ControllerUI.h:68: cmd->right = y;
0760 7402      2033            mov     a,#0x02
0762 2A        2034            add     a,r2
0763 FE        2035            mov     r6,a
0764 E4        2036            clr     a
0765 3B        2037            addc    a,r3
0766 FF        2038            mov     r7,a
0767 8C00      2039            mov     ar0,r4
0769 8E82      2040            mov     dpl,r6
076B 8F83      2041            mov     dph,r7
076D 88F0      2042            mov     b,r0
076F E540      2043            mov     a,_Generate_Motor_Command_PARM_3
0771 120000    2044            lcall   __gptrput
0774 A3        2045            inc     dptr
0775 E541      2046            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0777 020000    2047            ljmp    __gptrput
077A           2048   L022011?:
077A           2049   ;        ControllerUI.h:70: cmd->left = y/2;
077A 750002    2050            mov     __divsint_PARM_2,#0x02
077D E4        2051            clr     a
077E F501      2052            mov     (__divsint_PARM_2 + 1),a
0780 854082    2053            mov     dpl,_Generate_Motor_Command_PARM_3
0783 854183    2054            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
0786 C002      2055            push    ar2
0788 C003      2056            push    ar3
078A C004      2057            push    ar4
078C 120000    2058            lcall   __divsint
078F AE82      2059            mov     r6,dpl
0791 AF83      2060            mov     r7,dph
0793 D004      2061            pop     ar4
0795 D003      2062            pop     ar3
0797 D002      2063            pop     ar2
0799 8A82      2064            mov     dpl,r2
079B 8B83      2065            mov     dph,r3
079D 8CF0      2066            mov     b,r4
079F EE        2067            mov     a,r6
07A0 120000    2068            lcall   __gptrput
07A3 A3        2069            inc     dptr
07A4 EF        2070            mov     a,r7
07A5 120000    2071            lcall   __gptrput
07A8           2072   ;        ControllerUI.h:71: cmd->right = x;
07A8 7402      2073            mov     a,#0x02
07AA 2A        2074            add     a,r2
07AB FE        2075            mov     r6,a
07AC E4        2076            clr     a
07AD 3B        2077            addc    a,r3
07AE FF        2078            mov     r7,a
07AF 8C00      2079            mov     ar0,r4
07B1 8E82      2080            mov     dpl,r6
07B3 8F83      2081            mov     dph,r7
07B5 88F0      2082            mov     b,r0
07B7 E540      2083            mov     a,_Generate_Motor_Command_PARM_2
07B9 120000    2084            lcall   __gptrput
07BC A3        2085            inc     dptr
07BD E541      2086            mov     a,(_Generate_Motor_Command_PARM_2 + 1)
07BF 020000    2087            ljmp    __gptrput
07C2           2088   L022042?:
07C2           2089   ;        ControllerUI.h:76: if((y<0) && (y>=-8)){ // check if position is in stall zone from y = [-8,0]
07C2 ED        2090            mov     a,r5
07C3 7000      2091            jnz     L022072?
07C5 020000    2092            ljmp    L022038?
07C8           2093   L022072?:
07C8 C3        2094            clr     c
07C9 E540      2095            mov     a,_Generate_Motor_Command_PARM_3
07CB 94F8      2096            subb    a,#0xF8
07CD E541      2097            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
07CF 6480      2098            xrl     a,#0x80
07D1 947F      2099            subb    a,#0x7f
07D3 5000      2100            jnc     L022073?
07D5 020000    2101            ljmp    L022038?
07D8           2102   L022073?:
07D8           2103   ;        ControllerUI.h:78: if(x > 0){
07D8 C3        2104            clr     c
07D9 E4        2105            clr     a
07DA 9540      2106            subb    a,_Generate_Motor_Command_PARM_2
07DC E4        2107            clr     a
07DD 6480      2108            xrl     a,#0x80
07DF 8541F0    2109            mov     b,(_Generate_Motor_Command_PARM_2 + 1)
07E2 63F080    2110            xrl     b,#0x80
07E5 95F0      2111            subb    a,b
07E7 5000      2112            jnc     L022020?
07E9           2113   ;        ControllerUI.h:79: cmd->left = ((y+4)*(x))/4;
07E9 854082    2114            mov     dpl,_Generate_Motor_Command_PARM_3
07EC 854183    2115            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
07EF A3        2116            inc     dptr
07F0 A3        2117            inc     dptr
07F1 A3        2118            inc     dptr
07F2 A3        2119            inc     dptr
07F3 854000    2120            mov     __mulint_PARM_2,_Generate_Motor_Command_PARM_2
07F6 854101    2121            mov     (__mulint_PARM_2 + 1),(_Generate_Motor_Command_PARM_2 + 1)
07F9 C002      2122            push    ar2
07FB C003      2123            push    ar3
07FD C004      2124            push    ar4
07FF 120000    2125            lcall   __mulint
0802 AD82      2126            mov     r5,dpl
0804 AE83      2127            mov     r6,dph
0806 750004    2128            mov     __divsint_PARM_2,#0x04
0809 E4        2129            clr     a
080A F501      2130            mov     (__divsint_PARM_2 + 1),a
080C 8D82      2131            mov     dpl,r5
080E 8E83      2132            mov     dph,r6
0810 120000    2133            lcall   __divsint
0813 AD82      2134            mov     r5,dpl
0815 AE83      2135            mov     r6,dph
0817 D004      2136            pop     ar4
0819 D003      2137            pop     ar3
081B D002      2138            pop     ar2
081D 8A82      2139            mov     dpl,r2
081F 8B83      2140            mov     dph,r3
0821 8CF0      2141            mov     b,r4
0823 ED        2142            mov     a,r5
0824 120000    2143            lcall   __gptrput
0827 A3        2144            inc     dptr
0828 EE        2145            mov     a,r6
0829 120000    2146            lcall   __gptrput
082C           2147   ;        ControllerUI.h:80: cmd->right = 0;
082C 7402      2148            mov     a,#0x02
082E 2A        2149            add     a,r2
082F FD        2150            mov     r5,a
0830 E4        2151            clr     a
0831 3B        2152            addc    a,r3
0832 FE        2153            mov     r6,a
0833 8C07      2154            mov     ar7,r4
0835 8D82      2155            mov     dpl,r5
0837 8E83      2156            mov     dph,r6
0839 8FF0      2157            mov     b,r7
083B E4        2158            clr     a
083C 120000    2159            lcall   __gptrput
083F A3        2160            inc     dptr
0840 E4        2161            clr     a
0841 020000    2162            ljmp    __gptrput
0844           2163   L022020?:
0844           2164   ;        ControllerUI.h:82: cmd->left = 0;
0844 8A82      2165            mov     dpl,r2
0846 8B83      2166            mov     dph,r3
0848 8CF0      2167            mov     b,r4
084A E4        2168            clr     a
084B 120000    2169            lcall   __gptrput
084E A3        2170            inc     dptr
084F E4        2171            clr     a
0850 120000    2172            lcall   __gptrput
0853           2173   ;        ControllerUI.h:83: cmd->right = ((y+4)*(abs(x)))/4;
0853 7402      2174            mov     a,#0x02
0855 2A        2175            add     a,r2
0856 FD        2176            mov     r5,a
0857 E4        2177            clr     a
0858 3B        2178            addc    a,r3
0859 FE        2179            mov     r6,a
085A 8C07      2180            mov     ar7,r4
085C 7404      2181            mov     a,#0x04
085E 2540      2182            add     a,_Generate_Motor_Command_PARM_3
0860 F8        2183            mov     r0,a
0861 E4        2184            clr     a
0862 3541      2185            addc    a,(_Generate_Motor_Command_PARM_3 + 1)
0864 F9        2186            mov     r1,a
0865 854082    2187            mov     dpl,_Generate_Motor_Command_PARM_2
0868 854183    2188            mov     dph,(_Generate_Motor_Command_PARM_2 + 1)
086B C005      2189            push    ar5
086D C006      2190            push    ar6
086F C007      2191            push    ar7
0871 C000      2192            push    ar0
0873 C001      2193            push    ar1
0875 120000    2194            lcall   _abs
0878 858200    2195            mov     __mulint_PARM_2,dpl
087B 858301    2196            mov     (__mulint_PARM_2 + 1),dph
087E D001      2197            pop     ar1
0880 D000      2198            pop     ar0
0882 8882      2199            mov     dpl,r0
0884 8983      2200            mov     dph,r1
0886 120000    2201            lcall   __mulint
0889 A882      2202            mov     r0,dpl
088B A983      2203            mov     r1,dph
088D 750004    2204            mov     __divsint_PARM_2,#0x04
0890 E4        2205            clr     a
0891 F501      2206            mov     (__divsint_PARM_2 + 1),a
0893 8882      2207            mov     dpl,r0
0895 8983      2208            mov     dph,r1
0897 120000    2209            lcall   __divsint
089A A882      2210            mov     r0,dpl
089C A983      2211            mov     r1,dph
089E D007      2212            pop     ar7
08A0 D006      2213            pop     ar6
08A2 D005      2214            pop     ar5
08A4 8D82      2215            mov     dpl,r5
08A6 8E83      2216            mov     dph,r6
08A8 8FF0      2217            mov     b,r7
08AA E8        2218            mov     a,r0
08AB 120000    2219            lcall   __gptrput
08AE A3        2220            inc     dptr
08AF E9        2221            mov     a,r1
08B0 020000    2222            ljmp    __gptrput
08B3           2223   L022038?:
08B3           2224   ;        ControllerUI.h:88: if(x > 0){
08B3 C3        2225            clr     c
08B4 E4        2226            clr     a
08B5 9540      2227            subb    a,_Generate_Motor_Command_PARM_2
08B7 E4        2228            clr     a
08B8 6480      2229            xrl     a,#0x80
08BA 8541F0    2230            mov     b,(_Generate_Motor_Command_PARM_2 + 1)
08BD 63F080    2231            xrl     b,#0x80
08C0 95F0      2232            subb    a,b
08C2 4000      2233            jc      L022075?
08C4 020000    2234            ljmp    L022035?
08C7           2235   L022075?:
08C7           2236   ;        ControllerUI.h:89: if(x < -1*y){
08C7 C3        2237            clr     c
08C8 E4        2238            clr     a
08C9 9540      2239            subb    a,_Generate_Motor_Command_PARM_3
08CB FD        2240            mov     r5,a
08CC E4        2241            clr     a
08CD 9541      2242            subb    a,(_Generate_Motor_Command_PARM_3 + 1)
08CF FE        2243            mov     r6,a
08D0 C3        2244            clr     c
08D1 E540      2245            mov     a,_Generate_Motor_Command_PARM_2
08D3 9D        2246            subb    a,r5
08D4 E541      2247            mov     a,(_Generate_Motor_Command_PARM_2 + 1)
08D6 6480      2248            xrl     a,#0x80
08D8 8EF0      2249            mov     b,r6
08DA 63F080    2250            xrl     b,#0x80
08DD 95F0      2251            subb    a,b
08DF 5000      2252            jnc     L022026?
08E1           2253   ;        ControllerUI.h:90: cmd->left = y;
08E1 8A82      2254            mov     dpl,r2
08E3 8B83      2255            mov     dph,r3
08E5 8CF0      2256            mov     b,r4
08E7 E540      2257            mov     a,_Generate_Motor_Command_PARM_3
08E9 120000    2258            lcall   __gptrput
08EC A3        2259            inc     dptr
08ED E541      2260            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
08EF 120000    2261            lcall   __gptrput
08F2           2262   ;        ControllerUI.h:91: cmd->right = y + x/2;
08F2 7402      2263            mov     a,#0x02
08F4 2A        2264            add     a,r2
08F5 F570      2265            mov     _Generate_Motor_Command_sloc0_1_0,a
08F7 E4        2266            clr     a
08F8 3B        2267            addc    a,r3
08F9 F571      2268            mov     (_Generate_Motor_Command_sloc0_1_0 + 1),a
08FB 8C72      2269            mov     (_Generate_Motor_Command_sloc0_1_0 + 2),r4
08FD 750002    2270            mov     __divsint_PARM_2,#0x02
0900 E4        2271            clr     a
0901 F501      2272            mov     (__divsint_PARM_2 + 1),a
0903 854082    2273            mov     dpl,_Generate_Motor_Command_PARM_2
0906 854183    2274            mov     dph,(_Generate_Motor_Command_PARM_2 + 1)
0909 120000    2275            lcall   __divsint
090C AF82      2276            mov     r7,dpl
090E A883      2277            mov     r0,dph
0910 EF        2278            mov     a,r7
0911 2540      2279            add     a,_Generate_Motor_Command_PARM_3
0913 FF        2280            mov     r7,a
0914 E8        2281            mov     a,r0
0915 3541      2282            addc    a,(_Generate_Motor_Command_PARM_3 + 1)
0917 F8        2283            mov     r0,a
0918 857082    2284            mov     dpl,_Generate_Motor_Command_sloc0_1_0
091B 857183    2285            mov     dph,(_Generate_Motor_Command_sloc0_1_0 + 1)
091E 8572F0    2286            mov     b,(_Generate_Motor_Command_sloc0_1_0 + 2)
0921 EF        2287            mov     a,r7
0922 120000    2288            lcall   __gptrput
0925 A3        2289            inc     dptr
0926 E8        2290            mov     a,r0
0927 020000    2291            ljmp    __gptrput
092A           2292   L022026?:
092A           2293   ;        ControllerUI.h:92: }else if(x == -1*y){
092A ED        2294            mov     a,r5
092B B54090    2295            cjne    a,_Generate_Motor_Command_PARM_2,L022023?
092E EE        2296            mov     a,r6
092F B54190    2297            cjne    a,(_Generate_Motor_Command_PARM_2 + 1),L022023?
0932           2298   ;        ControllerUI.h:93: cmd->left = y;
0932 8A82      2299            mov     dpl,r2
0934 8B83      2300            mov     dph,r3
0936 8CF0      2301            mov     b,r4
0938 E540      2302            mov     a,_Generate_Motor_Command_PARM_3
093A 120000    2303            lcall   __gptrput
093D A3        2304            inc     dptr
093E E541      2305            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0940 120000    2306            lcall   __gptrput
0943           2307   ;        ControllerUI.h:94: cmd->right = y/2;
0943 7402      2308            mov     a,#0x02
0945 2A        2309            add     a,r2
0946 FD        2310            mov     r5,a
0947 E4        2311            clr     a
0948 3B        2312            addc    a,r3
0949 FE        2313            mov     r6,a
094A 8C07      2314            mov     ar7,r4
094C 750002    2315            mov     __divsint_PARM_2,#0x02
094F E4        2316            clr     a
0950 F501      2317            mov     (__divsint_PARM_2 + 1),a
0952 854082    2318            mov     dpl,_Generate_Motor_Command_PARM_3
0955 854183    2319            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
0958 C005      2320            push    ar5
095A C006      2321            push    ar6
095C C007      2322            push    ar7
095E 120000    2323            lcall   __divsint
0961 A882      2324            mov     r0,dpl
0963 A983      2325            mov     r1,dph
0965 D007      2326            pop     ar7
0967 D006      2327            pop     ar6
0969 D005      2328            pop     ar5
096B 8D82      2329            mov     dpl,r5
096D 8E83      2330            mov     dph,r6
096F 8FF0      2331            mov     b,r7
0971 E8        2332            mov     a,r0
0972 120000    2333            lcall   __gptrput
0975 A3        2334            inc     dptr
0976 E9        2335            mov     a,r1
0977 020000    2336            ljmp    __gptrput
097A           2337   L022023?:
097A           2338   ;        ControllerUI.h:96: cmd->left = -1*x;
097A C3        2339            clr     c
097B E4        2340            clr     a
097C 9540      2341            subb    a,_Generate_Motor_Command_PARM_2
097E FD        2342            mov     r5,a
097F E4        2343            clr     a
0980 9541      2344            subb    a,(_Generate_Motor_Command_PARM_2 + 1)
0982 FE        2345            mov     r6,a
0983 8A82      2346            mov     dpl,r2
0985 8B83      2347            mov     dph,r3
0987 8CF0      2348            mov     b,r4
0989 ED        2349            mov     a,r5
098A 120000    2350            lcall   __gptrput
098D A3        2351            inc     dptr
098E EE        2352            mov     a,r6
098F 120000    2353            lcall   __gptrput
0992           2354   ;        ControllerUI.h:97: cmd->right = y/2;
0992 7402      2355            mov     a,#0x02
0994 2A        2356            add     a,r2
0995 FD        2357            mov     r5,a
0996 E4        2358            clr     a
0997 3B        2359            addc    a,r3
0998 FE        2360            mov     r6,a
0999 8C07      2361            mov     ar7,r4
099B 750002    2362            mov     __divsint_PARM_2,#0x02
099E E4        2363            clr     a
099F F501      2364            mov     (__divsint_PARM_2 + 1),a
09A1 854082    2365            mov     dpl,_Generate_Motor_Command_PARM_3
09A4 854183    2366            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
09A7 C005      2367            push    ar5
09A9 C006      2368            push    ar6
09AB C007      2369            push    ar7
09AD 120000    2370            lcall   __divsint
09B0 A882      2371            mov     r0,dpl
09B2 A983      2372            mov     r1,dph
09B4 D007      2373            pop     ar7
09B6 D006      2374            pop     ar6
09B8 D005      2375            pop     ar5
09BA 8D82      2376            mov     dpl,r5
09BC 8E83      2377            mov     dph,r6
09BE 8FF0      2378            mov     b,r7
09C0 E8        2379            mov     a,r0
09C1 120000    2380            lcall   __gptrput
09C4 A3        2381            inc     dptr
09C5 E9        2382            mov     a,r1
09C6 020000    2383            ljmp    __gptrput
09C9           2384   L022035?:
09C9           2385   ;        ControllerUI.h:105: if(x > y){
09C9 C3        2386            clr     c
09CA E540      2387            mov     a,_Generate_Motor_Command_PARM_3
09CC 9540      2388            subb    a,_Generate_Motor_Command_PARM_2
09CE E541      2389            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
09D0 6480      2390            xrl     a,#0x80
09D2 8541F0    2391            mov     b,(_Generate_Motor_Command_PARM_2 + 1)
09D5 63F080    2392            xrl     b,#0x80
09D8 95F0      2393            subb    a,b
09DA 5000      2394            jnc     L022032?
09DC           2395   ;        ControllerUI.h:106: cmd->left = y - x/2;
09DC 750002    2396            mov     __divsint_PARM_2,#0x02
09DF E4        2397            clr     a
09E0 F501      2398            mov     (__divsint_PARM_2 + 1),a
09E2 854082    2399            mov     dpl,_Generate_Motor_Command_PARM_2
09E5 854183    2400            mov     dph,(_Generate_Motor_Command_PARM_2 + 1)
09E8 C002      2401            push    ar2
09EA C003      2402            push    ar3
09EC C004      2403            push    ar4
09EE 120000    2404            lcall   __divsint
09F1 AD82      2405            mov     r5,dpl
09F3 AE83      2406            mov     r6,dph
09F5 D004      2407            pop     ar4
09F7 D003      2408            pop     ar3
09F9 D002      2409            pop     ar2
09FB E540      2410            mov     a,_Generate_Motor_Command_PARM_3
09FD C3        2411            clr     c
09FE 9D        2412            subb    a,r5
09FF FD        2413            mov     r5,a
0A00 E541      2414            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0A02 9E        2415            subb    a,r6
0A03 FE        2416            mov     r6,a
0A04 8A82      2417            mov     dpl,r2
0A06 8B83      2418            mov     dph,r3
0A08 8CF0      2419            mov     b,r4
0A0A ED        2420            mov     a,r5
0A0B 120000    2421            lcall   __gptrput
0A0E A3        2422            inc     dptr
0A0F EE        2423            mov     a,r6
0A10 120000    2424            lcall   __gptrput
0A13           2425   ;        ControllerUI.h:107: cmd->right = y;
0A13 7402      2426            mov     a,#0x02
0A15 2A        2427            add     a,r2
0A16 FD        2428            mov     r5,a
0A17 E4        2429            clr     a
0A18 3B        2430            addc    a,r3
0A19 FE        2431            mov     r6,a
0A1A 8C07      2432            mov     ar7,r4
0A1C 8D82      2433            mov     dpl,r5
0A1E 8E83      2434            mov     dph,r6
0A20 8FF0      2435            mov     b,r7
0A22 E540      2436            mov     a,_Generate_Motor_Command_PARM_3
0A24 120000    2437            lcall   __gptrput
0A27 A3        2438            inc     dptr
0A28 E541      2439            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0A2A 020000    2440            ljmp    __gptrput
0A2D           2441   L022032?:
0A2D           2442   ;        ControllerUI.h:108: }else if(x == y){
0A2D E540      2443            mov     a,_Generate_Motor_Command_PARM_3
0A2F B540D0    2444            cjne    a,_Generate_Motor_Command_PARM_2,L022029?
0A32 E541      2445            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0A34 B541D0    2446            cjne    a,(_Generate_Motor_Command_PARM_2 + 1),L022029?
0A37           2447   ;        ControllerUI.h:109: cmd->left = y/2;
0A37 750002    2448            mov     __divsint_PARM_2,#0x02
0A3A E4        2449            clr     a
0A3B F501      2450            mov     (__divsint_PARM_2 + 1),a
0A3D 854082    2451            mov     dpl,_Generate_Motor_Command_PARM_3
0A40 854183    2452            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
0A43 C002      2453            push    ar2
0A45 C003      2454            push    ar3
0A47 C004      2455            push    ar4
0A49 120000    2456            lcall   __divsint
0A4C AD82      2457            mov     r5,dpl
0A4E AE83      2458            mov     r6,dph
0A50 D004      2459            pop     ar4
0A52 D003      2460            pop     ar3
0A54 D002      2461            pop     ar2
0A56 8A82      2462            mov     dpl,r2
0A58 8B83      2463            mov     dph,r3
0A5A 8CF0      2464            mov     b,r4
0A5C ED        2465            mov     a,r5
0A5D 120000    2466            lcall   __gptrput
0A60 A3        2467            inc     dptr
0A61 EE        2468            mov     a,r6
0A62 120000    2469            lcall   __gptrput
0A65           2470   ;        ControllerUI.h:110: cmd->right = y;
0A65 7402      2471            mov     a,#0x02
0A67 2A        2472            add     a,r2
0A68 FD        2473            mov     r5,a
0A69 E4        2474            clr     a
0A6A 3B        2475            addc    a,r3
0A6B FE        2476            mov     r6,a
0A6C 8C07      2477            mov     ar7,r4
0A6E 8D82      2478            mov     dpl,r5
0A70 8E83      2479            mov     dph,r6
0A72 8FF0      2480            mov     b,r7
0A74 E540      2481            mov     a,_Generate_Motor_Command_PARM_3
0A76 120000    2482            lcall   __gptrput
0A79 A3        2483            inc     dptr
0A7A E541      2484            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0A7C 020000    2485            ljmp    __gptrput
0A7F           2486   L022029?:
0A7F           2487   ;        ControllerUI.h:112: cmd->left = y/2;
0A7F 750002    2488            mov     __divsint_PARM_2,#0x02
0A82 E4        2489            clr     a
0A83 F501      2490            mov     (__divsint_PARM_2 + 1),a
0A85 854082    2491            mov     dpl,_Generate_Motor_Command_PARM_3
0A88 854183    2492            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
0A8B C002      2493            push    ar2
0A8D C003      2494            push    ar3
0A8F C004      2495            push    ar4
0A91 120000    2496            lcall   __divsint
0A94 AD82      2497            mov     r5,dpl
0A96 AE83      2498            mov     r6,dph
0A98 D004      2499            pop     ar4
0A9A D003      2500            pop     ar3
0A9C D002      2501            pop     ar2
0A9E 8A82      2502            mov     dpl,r2
0AA0 8B83      2503            mov     dph,r3
0AA2 8CF0      2504            mov     b,r4
0AA4 ED        2505            mov     a,r5
0AA5 120000    2506            lcall   __gptrput
0AA8 A3        2507            inc     dptr
0AA9 EE        2508            mov     a,r6
0AAA 120000    2509            lcall   __gptrput
0AAD           2510   ;        ControllerUI.h:113: cmd->right = x;
0AAD 7402      2511            mov     a,#0x02
0AAF 2A        2512            add     a,r2
0AB0 FA        2513            mov     r2,a
0AB1 E4        2514            clr     a
0AB2 3B        2515            addc    a,r3
0AB3 FB        2516            mov     r3,a
0AB4 8A82      2517            mov     dpl,r2
0AB6 8B83      2518            mov     dph,r3
0AB8 8CF0      2519            mov     b,r4
0ABA E540      2520            mov     a,_Generate_Motor_Command_PARM_2
0ABC 120000    2521            lcall   __gptrput
0ABF A3        2522            inc     dptr
0AC0 E541      2523            mov     a,(_Generate_Motor_Command_PARM_2 + 1)
0AC2 020000    2524            ljmp    __gptrput
0AC5           2525   ;------------------------------------------------------------
0AC5           2526   ;Allocation info for local variables in function 'Generate_Pivot_Command'
0AC5           2527   ;------------------------------------------------------------
0AC5           2528   ;y1                        Allocated with name '_Generate_Pivot_Command_PARM_2'
0AC5           2529   ;y2                        Allocated with name '_Generate_Pivot_Command_PARM_3'
0AC5           2530   ;cmd                       Allocated to registers r2 r3 r4 
0AC5           2531   ;------------------------------------------------------------
0AC5           2532   ;        ControllerUI.h:123: void Generate_Pivot_Command(Motor* cmd, int y1, int y2){
0AC5           2533   ;        -----------------------------------------
0AC5           2534   ;         function Generate_Pivot_Command
0AC5           2535   ;        -----------------------------------------
0AC5           2536   _Generate_Pivot_Command:
0AC5           2537   ;        ControllerUI.h:124: cmd->left = y1;
0AC5 AA82      2538            mov     r2,dpl
0AC7 AB83      2539            mov     r3,dph
0AC9 ACF0      2540            mov     r4,b
0ACB E5A0      2541            mov     a,_Generate_Pivot_Command_PARM_2
0ACD 120000    2542            lcall   __gptrput
0AD0 A3        2543            inc     dptr
0AD1 E5A1      2544            mov     a,(_Generate_Pivot_Command_PARM_2 + 1)
0AD3 120000    2545            lcall   __gptrput
0AD6           2546   ;        ControllerUI.h:125: cmd->right = y2;
0AD6 7402      2547            mov     a,#0x02
0AD8 2A        2548            add     a,r2
0AD9 FA        2549            mov     r2,a
0ADA E4        2550            clr     a
0ADB 3B        2551            addc    a,r3
0ADC FB        2552            mov     r3,a
0ADD 8A82      2553            mov     dpl,r2
0ADF 8B83      2554            mov     dph,r3
0AE1 8CF0      2555            mov     b,r4
0AE3 E560      2556            mov     a,_Generate_Pivot_Command_PARM_3
0AE5 120000    2557            lcall   __gptrput
0AE8 A3        2558            inc     dptr
0AE9 E561      2559            mov     a,(_Generate_Pivot_Command_PARM_3 + 1)
0AEB 020000    2560            ljmp    __gptrput
0AEE           2561   ;------------------------------------------------------------
0AEE           2562   ;Allocation info for local variables in function 'Weigh_Dual_Inputs'
0AEE           2563   ;------------------------------------------------------------
0AEE           2564   ;m1                        Allocated with name '_Weigh_Dual_Inputs_PARM_2'
0AEE           2565   ;m2                        Allocated with name '_Weigh_Dual_Inputs_PARM_3'
0AEE           2566   ;ratio                     Allocated with name '_Weigh_Dual_Inputs_PARM_4'
0AEE           2567   ;mout                      Allocated with name '_Weigh_Dual_Inputs_mout_1_144'
0AEE           2568   ;sloc0                     Allocated with name '_Weigh_Dual_Inputs_sloc0_1_0'
0AEE           2569   ;sloc1                     Allocated with name '_Weigh_Dual_Inputs_sloc1_1_0'
0AEE           2570   ;sloc2                     Allocated with name '_Weigh_Dual_Inputs_sloc2_1_0'
0AEE           2571   ;sloc3                     Allocated with name '_Weigh_Dual_Inputs_sloc3_1_0'
0AEE           2572   ;------------------------------------------------------------
0AEE           2573   ;        ControllerUI.h:128: void Weigh_Dual_Inputs(Motor* mout, Motor* m1, Motor* m2,float ratio){
0AEE           2574   ;        -----------------------------------------
0AEE           2575   ;         function Weigh_Dual_Inputs
0AEE           2576   ;        -----------------------------------------
0AEE           2577   _Weigh_Dual_Inputs:
0AEE 8582F0    2578            mov     _Weigh_Dual_Inputs_mout_1_144,dpl
0AF1 8583F1    2579            mov     (_Weigh_Dual_Inputs_mout_1_144 + 1),dph
0AF4 85F0F2    2580            mov     (_Weigh_Dual_Inputs_mout_1_144 + 2),b
0AF7           2581   ;        ControllerUI.h:129: mout->left = (int)((m1->left)*(1-ratio)+(m2->left)*ratio);
0AF7 8580B0    2582            mov     _Weigh_Dual_Inputs_sloc1_1_0,_Weigh_Dual_Inputs_PARM_2
0AFA 8581B1    2583            mov     (_Weigh_Dual_Inputs_sloc1_1_0 + 1),(_Weigh_Dual_Inputs_PARM_2 + 1)
0AFD 8582B2    2584            mov     (_Weigh_Dual_Inputs_sloc1_1_0 + 2),(_Weigh_Dual_Inputs_PARM_2 + 2)
0B00 85B082    2585            mov     dpl,_Weigh_Dual_Inputs_sloc1_1_0
0B03 85B183    2586            mov     dph,(_Weigh_Dual_Inputs_sloc1_1_0 + 1)
0B06 85B2F0    2587            mov     b,(_Weigh_Dual_Inputs_sloc1_1_0 + 2)
0B09 120000    2588            lcall   __gptrget
0B0C F570      2589            mov     _Weigh_Dual_Inputs_sloc0_1_0,a
0B0E A3        2590            inc     dptr
0B0F 120000    2591            lcall   __gptrget
0B12 F571      2592            mov     (_Weigh_Dual_Inputs_sloc0_1_0 + 1),a
0B14 C000      2593            push    _Weigh_Dual_Inputs_PARM_4
0B16 C001      2594            push    (_Weigh_Dual_Inputs_PARM_4 + 1)
0B18 C002      2595            push    (_Weigh_Dual_Inputs_PARM_4 + 2)
0B1A C003      2596            push    (_Weigh_Dual_Inputs_PARM_4 + 3)
0B1C 900000    2597            mov     dptr,#0x0000
0B1F 75F080    2598            mov     b,#0x80
0B22 743F      2599            mov     a,#0x3F
0B24 120000    2600            lcall   ___fssub
0B27 AA82      2601            mov     r2,dpl
0B29 AB83      2602            mov     r3,dph
0B2B ACF0      2603            mov     r4,b
0B2D F8        2604            mov     r0,a
0B2E E581      2605            mov     a,sp
0B30 24FC      2606            add     a,#0xfc
0B32 F581      2607            mov     sp,a
0B34 857082    2608            mov     dpl,_Weigh_Dual_Inputs_sloc0_1_0
0B37 857183    2609            mov     dph,(_Weigh_Dual_Inputs_sloc0_1_0 + 1)
0B3A C002      2610            push    ar2
0B3C C003      2611            push    ar3
0B3E C004      2612            push    ar4
0B40 C000      2613            push    ar0
0B42 120000    2614            lcall   ___sint2fs
0B45 A982      2615            mov     r1,dpl
0B47 AD83      2616            mov     r5,dph
0B49 AEF0      2617            mov     r6,b
0B4B FF        2618            mov     r7,a
0B4C D000      2619            pop     ar0
0B4E D004      2620            pop     ar4
0B50 D003      2621            pop     ar3
0B52 D002      2622            pop     ar2
0B54 C002      2623            push    ar2
0B56 C003      2624            push    ar3
0B58 C004      2625            push    ar4
0B5A C000      2626            push    ar0
0B5C C002      2627            push    ar2
0B5E C003      2628            push    ar3
0B60 C004      2629            push    ar4
0B62 C000      2630            push    ar0
0B64 8982      2631            mov     dpl,r1
0B66 8D83      2632            mov     dph,r5
0B68 8EF0      2633            mov     b,r6
0B6A EF        2634            mov     a,r7
0B6B 120000    2635            lcall   ___fsmul
0B6E 858230    2636            mov     _Weigh_Dual_Inputs_sloc2_1_0,dpl
0B71 858331    2637            mov     (_Weigh_Dual_Inputs_sloc2_1_0 + 1),dph
0B74 85F032    2638            mov     (_Weigh_Dual_Inputs_sloc2_1_0 + 2),b
0B77 F533      2639            mov     (_Weigh_Dual_Inputs_sloc2_1_0 + 3),a
0B79 E581      2640            mov     a,sp
0B7B 24FC      2641            add     a,#0xfc
0B7D F581      2642            mov     sp,a
0B7F 850030    2643            mov     _Weigh_Dual_Inputs_sloc3_1_0,_Weigh_Dual_Inputs_PARM_3
0B82 850131    2644            mov     (_Weigh_Dual_Inputs_sloc3_1_0 + 1),(_Weigh_Dual_Inputs_PARM_3 + 1)
0B85 850232    2645            mov     (_Weigh_Dual_Inputs_sloc3_1_0 + 2),(_Weigh_Dual_Inputs_PARM_3 + 2)
0B88 853082    2646            mov     dpl,_Weigh_Dual_Inputs_sloc3_1_0
0B8B 853183    2647            mov     dph,(_Weigh_Dual_Inputs_sloc3_1_0 + 1)
0B8E 8532F0    2648            mov     b,(_Weigh_Dual_Inputs_sloc3_1_0 + 2)
0B91 120000    2649            lcall   __gptrget
0B94 F9        2650            mov     r1,a
0B95 A3        2651            inc     dptr
0B96 120000    2652            lcall   __gptrget
0B99 FD        2653            mov     r5,a
0B9A 8982      2654            mov     dpl,r1
0B9C 8D83      2655            mov     dph,r5
0B9E 120000    2656            lcall   ___sint2fs
0BA1 AD82      2657            mov     r5,dpl
0BA3 AE83      2658            mov     r6,dph
0BA5 AFF0      2659            mov     r7,b
0BA7 F9        2660            mov     r1,a
0BA8 C000      2661            push    _Weigh_Dual_Inputs_PARM_4
0BAA C001      2662            push    (_Weigh_Dual_Inputs_PARM_4 + 1)
0BAC C002      2663            push    (_Weigh_Dual_Inputs_PARM_4 + 2)
0BAE C003      2664            push    (_Weigh_Dual_Inputs_PARM_4 + 3)
0BB0 8D82      2665            mov     dpl,r5
0BB2 8E83      2666            mov     dph,r6
0BB4 8FF0      2667            mov     b,r7
0BB6 E9        2668            mov     a,r1
0BB7 120000    2669            lcall   ___fsmul
0BBA AD82      2670            mov     r5,dpl
0BBC AE83      2671            mov     r6,dph
0BBE AFF0      2672            mov     r7,b
0BC0 F9        2673            mov     r1,a
0BC1 E581      2674            mov     a,sp
0BC3 24FC      2675            add     a,#0xfc
0BC5 F581      2676            mov     sp,a
0BC7 C005      2677            push    ar5
0BC9 C006      2678            push    ar6
0BCB C007      2679            push    ar7
0BCD C001      2680            push    ar1
0BCF 853082    2681            mov     dpl,_Weigh_Dual_Inputs_sloc2_1_0
0BD2 853183    2682            mov     dph,(_Weigh_Dual_Inputs_sloc2_1_0 + 1)
0BD5 8532F0    2683            mov     b,(_Weigh_Dual_Inputs_sloc2_1_0 + 2)
0BD8 E533      2684            mov     a,(_Weigh_Dual_Inputs_sloc2_1_0 + 3)
0BDA 120000    2685            lcall   ___fsadd
0BDD AD82      2686            mov     r5,dpl
0BDF AE83      2687            mov     r6,dph
0BE1 AFF0      2688            mov     r7,b
0BE3 F9        2689            mov     r1,a
0BE4 E581      2690            mov     a,sp
0BE6 24FC      2691            add     a,#0xfc
0BE8 F581      2692            mov     sp,a
0BEA 8D82      2693            mov     dpl,r5
0BEC 8E83      2694            mov     dph,r6
0BEE 8FF0      2695            mov     b,r7
0BF0 E9        2696            mov     a,r1
0BF1 120000    2697            lcall   ___fs2sint
0BF4 AD82      2698            mov     r5,dpl
0BF6 AE83      2699            mov     r6,dph
0BF8 85F082    2700            mov     dpl,_Weigh_Dual_Inputs_mout_1_144
0BFB 85F183    2701            mov     dph,(_Weigh_Dual_Inputs_mout_1_144 + 1)
0BFE 85F2F0    2702            mov     b,(_Weigh_Dual_Inputs_mout_1_144 + 2)
0C01 ED        2703            mov     a,r5
0C02 120000    2704            lcall   __gptrput
0C05 A3        2705            inc     dptr
0C06 EE        2706            mov     a,r6
0C07 120000    2707            lcall   __gptrput
0C0A           2708   ;        ControllerUI.h:130: mout->right = (int)((m1->right)*(1-ratio)+(m2->right)*ratio);
0C0A 7402      2709            mov     a,#0x02
0C0C 25F0      2710            add     a,_Weigh_Dual_Inputs_mout_1_144
0C0E F530      2711            mov     _Weigh_Dual_Inputs_sloc2_1_0,a
0C10 E4        2712            clr     a
0C11 35F1      2713            addc    a,(_Weigh_Dual_Inputs_mout_1_144 + 1)
0C13 F531      2714            mov     (_Weigh_Dual_Inputs_sloc2_1_0 + 1),a
0C15 85F232    2715            mov     (_Weigh_Dual_Inputs_sloc2_1_0 + 2),(_Weigh_Dual_Inputs_mout_1_144 + 2)
0C18 7402      2716            mov     a,#0x02
0C1A 25B0      2717            add     a,_Weigh_Dual_Inputs_sloc1_1_0
0C1C F9        2718            mov     r1,a
0C1D E4        2719            clr     a
0C1E 35B1      2720            addc    a,(_Weigh_Dual_Inputs_sloc1_1_0 + 1)
0C20 FD        2721            mov     r5,a
0C21 AEB2      2722            mov     r6,(_Weigh_Dual_Inputs_sloc1_1_0 + 2)
0C23 8982      2723            mov     dpl,r1
0C25 8D83      2724            mov     dph,r5
0C27 8EF0      2725            mov     b,r6
0C29 120000    2726            lcall   __gptrget
0C2C F9        2727            mov     r1,a
0C2D A3        2728            inc     dptr
0C2E 120000    2729            lcall   __gptrget
0C31 FD        2730            mov     r5,a
0C32 8982      2731            mov     dpl,r1
0C34 8D83      2732            mov     dph,r5
0C36 120000    2733            lcall   ___sint2fs
0C39 120000    2734            lcall   ___fsmul
0C3C AA82      2735            mov     r2,dpl
0C3E AB83      2736            mov     r3,dph
0C40 ACF0      2737            mov     r4,b
0C42 FD        2738            mov     r5,a
0C43 E581      2739            mov     a,sp
0C45 24FC      2740            add     a,#0xfc
0C47 F581      2741            mov     sp,a
0C49 7402      2742            mov     a,#0x02
0C4B 2530      2743            add     a,_Weigh_Dual_Inputs_sloc3_1_0
0C4D FE        2744            mov     r6,a
0C4E E4        2745            clr     a
0C4F 3531      2746            addc    a,(_Weigh_Dual_Inputs_sloc3_1_0 + 1)
0C51 FF        2747            mov     r7,a
0C52 A832      2748            mov     r0,(_Weigh_Dual_Inputs_sloc3_1_0 + 2)
0C54 8E82      2749            mov     dpl,r6
0C56 8F83      2750            mov     dph,r7
0C58 88F0      2751            mov     b,r0
0C5A 120000    2752            lcall   __gptrget
0C5D FE        2753            mov     r6,a
0C5E A3        2754            inc     dptr
0C5F 120000    2755            lcall   __gptrget
0C62 FF        2756            mov     r7,a
0C63 8E82      2757            mov     dpl,r6
0C65 8F83      2758            mov     dph,r7
0C67 C002      2759            push    ar2
0C69 C003      2760            push    ar3
0C6B C004      2761            push    ar4
0C6D C005      2762            push    ar5
0C6F 120000    2763            lcall   ___sint2fs
0C72 AE82      2764            mov     r6,dpl
0C74 AF83      2765            mov     r7,dph
0C76 A8F0      2766            mov     r0,b
0C78 F9        2767            mov     r1,a
0C79 C000      2768            push    _Weigh_Dual_Inputs_PARM_4
0C7B C001      2769            push    (_Weigh_Dual_Inputs_PARM_4 + 1)
0C7D C002      2770            push    (_Weigh_Dual_Inputs_PARM_4 + 2)
0C7F C003      2771            push    (_Weigh_Dual_Inputs_PARM_4 + 3)
0C81 8E82      2772            mov     dpl,r6
0C83 8F83      2773            mov     dph,r7
0C85 88F0      2774            mov     b,r0
0C87 E9        2775            mov     a,r1
0C88 120000    2776            lcall   ___fsmul
0C8B AE82      2777            mov     r6,dpl
0C8D AF83      2778            mov     r7,dph
0C8F A8F0      2779            mov     r0,b
0C91 F9        2780            mov     r1,a
0C92 E581      2781            mov     a,sp
0C94 24FC      2782            add     a,#0xfc
0C96 F581      2783            mov     sp,a
0C98 D005      2784            pop     ar5
0C9A D004      2785            pop     ar4
0C9C D003      2786            pop     ar3
0C9E D002      2787            pop     ar2
0CA0 C006      2788            push    ar6
0CA2 C007      2789            push    ar7
0CA4 C000      2790            push    ar0
0CA6 C001      2791            push    ar1
0CA8 8A82      2792            mov     dpl,r2
0CAA 8B83      2793            mov     dph,r3
0CAC 8CF0      2794            mov     b,r4
0CAE ED        2795            mov     a,r5
0CAF 120000    2796            lcall   ___fsadd
0CB2 AA82      2797            mov     r2,dpl
0CB4 AB83      2798            mov     r3,dph
0CB6 ACF0      2799            mov     r4,b
0CB8 FD        2800            mov     r5,a
0CB9 E581      2801            mov     a,sp
0CBB 24FC      2802            add     a,#0xfc
0CBD F581      2803            mov     sp,a
0CBF 8A82      2804            mov     dpl,r2
0CC1 8B83      2805            mov     dph,r3
0CC3 8CF0      2806            mov     b,r4
0CC5 ED        2807            mov     a,r5
0CC6 120000    2808            lcall   ___fs2sint
0CC9 AA82      2809            mov     r2,dpl
0CCB AB83      2810            mov     r3,dph
0CCD 853082    2811            mov     dpl,_Weigh_Dual_Inputs_sloc2_1_0
0CD0 853183    2812            mov     dph,(_Weigh_Dual_Inputs_sloc2_1_0 + 1)
0CD3 8532F0    2813            mov     b,(_Weigh_Dual_Inputs_sloc2_1_0 + 2)
0CD6 EA        2814            mov     a,r2
0CD7 120000    2815            lcall   __gptrput
0CDA A3        2816            inc     dptr
0CDB EB        2817            mov     a,r3
0CDC 020000    2818            ljmp    __gptrput
0CDF           2819   ;------------------------------------------------------------
0CDF           2820   ;Allocation info for local variables in function 'Wait_For_Calibration'
0CDF           2821   ;------------------------------------------------------------
0CDF           2822   ;b1                        Allocated to registers r2 r3 r4 r5 
0CDF           2823   ;b2                        Allocated to registers r6 r7 r0 r1 
0CDF           2824   ;------------------------------------------------------------
0CDF           2825   ;        ControllerUI.h:134: void Wait_For_Calibration(){
0CDF           2826   ;        -----------------------------------------
0CDF           2827   ;         function Wait_For_Calibration
0CDF           2828   ;        -----------------------------------------
0CDF           2829   _Wait_For_Calibration:
0CDF           2830   ;        ControllerUI.h:138: while(1){
0CDF           2831   L025012?:
0CDF           2832   ;        ControllerUI.h:139: b1 = Volts_at_Pin(QFP32_MUX_P2_6);
0CDF 758213    2833            mov     dpl,#0x13
0CE2 120000    2834            lcall   _Volts_at_Pin
0CE5 AA82      2835            mov     r2,dpl
0CE7 AB83      2836            mov     r3,dph
0CE9 ACF0      2837            mov     r4,b
0CEB FD        2838            mov     r5,a
0CEC           2839   ;        ControllerUI.h:140: b2 = Volts_at_Pin(QFP32_MUX_P2_1);
0CEC 75820E    2840            mov     dpl,#0x0E
0CEF C002      2841            push    ar2
0CF1 C003      2842            push    ar3
0CF3 C004      2843            push    ar4
0CF5 C005      2844            push    ar5
0CF7 120000    2845            lcall   _Volts_at_Pin
0CFA AE82      2846            mov     r6,dpl
0CFC AF83      2847            mov     r7,dph
0CFE A8F0      2848            mov     r0,b
0D00 F9        2849            mov     r1,a
0D01 D005      2850            pop     ar5
0D03 D004      2851            pop     ar4
0D05 D003      2852            pop     ar3
0D07 D002      2853            pop     ar2
0D09           2854   ;        ControllerUI.h:141: if((b1 == 0.0) || (b2 == 0.0)){
0D09 EA        2855            mov     a,r2
0D0A 4B        2856            orl     a,r3
0D0B 4C        2857            orl     a,r4
0D0C 8DF0      2858            mov     b,r5
0D0E C2F7      2859            clr     b.7 ; Clear the sign bit
0D10 45F0      2860            orl     a,b
0D12 6000      2861            jz      L025001?
0D14 EE        2862            mov     a,r6
0D15 4F        2863            orl     a,r7
0D16 48        2864            orl     a,r0
0D17 89F0      2865            mov     b,r1
0D19 C2F7      2866            clr     b.7 ; Clear the sign bit
0D1B 45F0      2867            orl     a,b
0D1D 7000      2868            jnz     L025002?
0D1F           2869   L025001?:
0D1F           2870   ;        ControllerUI.h:142: waitms(2000); //waits 2 seconds
0D1F 9007D0    2871            mov     dptr,#0x07D0
0D22 C002      2872            push    ar2
0D24 C003      2873            push    ar3
0D26 C004      2874            push    ar4
0D28 C005      2875            push    ar5
0D2A C006      2876            push    ar6
0D2C C007      2877            push    ar7
0D2E C000      2878            push    ar0
0D30 C001      2879            push    ar1
0D32 120000    2880            lcall   _waitms
0D35 D001      2881            pop     ar1
0D37 D000      2882            pop     ar0
0D39 D007      2883            pop     ar7
0D3B D006      2884            pop     ar6
0D3D D005      2885            pop     ar5
0D3F D004      2886            pop     ar4
0D41 D003      2887            pop     ar3
0D43 D002      2888            pop     ar2
0D45           2889   L025002?:
0D45           2890   ;        ControllerUI.h:144: if((b1 == 0.0) || (b2 == 0.0)){
0D45 EA        2891            mov     a,r2
0D46 4B        2892            orl     a,r3
0D47 4C        2893            orl     a,r4
0D48 8DF0      2894            mov     b,r5
0D4A C2F7      2895            clr     b.7 ; Clear the sign bit
0D4C 45F0      2896            orl     a,b
0D4E 6000      2897            jz      L025005?
0D50 EE        2898            mov     a,r6
0D51 4F        2899            orl     a,r7
0D52 48        2900            orl     a,r0
0D53 89F0      2901            mov     b,r1
0D55 C2F7      2902            clr     b.7 ; Clear the sign bit
0D57 45F0      2903            orl     a,b
0D59 6000      2904            jz      L025025?
0D5B 020000    2905            ljmp    L025012?
0D5E           2906   L025025?:
0D5E           2907   ;        ControllerUI.h:145: while((Volts_at_Pin(QFP32_MUX_P2_6) == 0.0)||(Volts_at_Pin(QFP32_MUX_P2_1) == 0.0));
0D5E           2908   L025005?:
0D5E 758213    2909            mov     dpl,#0x13
0D61 120000    2910            lcall   _Volts_at_Pin
0D64 AA82      2911            mov     r2,dpl
0D66 AB83      2912            mov     r3,dph
0D68 ACF0      2913            mov     r4,b
0D6A FD        2914            mov     r5,a
0D6B EA        2915            mov     a,r2
0D6C 4B        2916            orl     a,r3
0D6D 4C        2917            orl     a,r4
0D6E 8DF0      2918            mov     b,r5
0D70 C2F7      2919            clr     b.7 ; Clear the sign bit
0D72 45F0      2920            orl     a,b
0D74 6000      2921            jz      L025005?
0D76 75820E    2922            mov     dpl,#0x0E
0D79 120000    2923            lcall   _Volts_at_Pin
0D7C AA82      2924            mov     r2,dpl
0D7E AB83      2925            mov     r3,dph
0D80 ACF0      2926            mov     r4,b
0D82 FD        2927            mov     r5,a
0D83 EA        2928            mov     a,r2
0D84 4B        2929            orl     a,r3
0D85 4C        2930            orl     a,r4
0D86 8DF0      2931            mov     b,r5
0D88 C2F7      2932            clr     b.7 ; Clear the sign bit
0D8A 45F0      2933            orl     a,b
0D8C 6000      2934            jz      L025005?
0D8E           2935   ;        ControllerUI.h:146: return;
0D8E 22        2936            ret
0D8F           2937   ;------------------------------------------------------------
0D8F           2938   ;Allocation info for local variables in function 'LCD_pulse'
0D8F           2939   ;------------------------------------------------------------
0D8F           2940   ;------------------------------------------------------------
0D8F           2941   ;        ControllerLCD.h:13: void LCD_pulse (void)
0D8F           2942   ;        -----------------------------------------
0D8F           2943   ;         function LCD_pulse
0D8F           2944   ;        -----------------------------------------
0D8F           2945   _LCD_pulse:
0D8F           2946   ;        ControllerLCD.h:15: LCD_E=1;
0D8F D2A0      2947            setb    _P2_0
0D91           2948   ;        ControllerLCD.h:16: Timer3us(40);
0D91 758228    2949            mov     dpl,#0x28
0D94 120000    2950            lcall   _Timer3us
0D97           2951   ;        ControllerLCD.h:17: LCD_E=0;
0D97 C2A0      2952            clr     _P2_0
0D99 22        2953            ret
0D9A           2954   ;------------------------------------------------------------
0D9A           2955   ;Allocation info for local variables in function 'LCD_byte'
0D9A           2956   ;------------------------------------------------------------
0D9A           2957   ;x                         Allocated to registers r2 
0D9A           2958   ;------------------------------------------------------------
0D9A           2959   ;        ControllerLCD.h:20: void LCD_byte (unsigned char x)
0D9A           2960   ;        -----------------------------------------
0D9A           2961   ;         function LCD_byte
0D9A           2962   ;        -----------------------------------------
0D9A           2963   _LCD_byte:
0D9A AA82      2964            mov     r2,dpl
0D9C           2965   ;        ControllerLCD.h:23: ACC=x; //Send high nible
0D9C 8AE0      2966            mov     _ACC,r2
0D9E           2967   ;        ControllerLCD.h:24: LCD_D7=ACC_7;
0D9E A2E7      2968            mov     c,_ACC_7
0DA0 9290      2969            mov     _P1_0,c
0DA2           2970   ;        ControllerLCD.h:25: LCD_D6=ACC_6;
0DA2 A2E6      2971            mov     c,_ACC_6
0DA4 9291      2972            mov     _P1_1,c
0DA6           2973   ;        ControllerLCD.h:26: LCD_D5=ACC_5;
0DA6 A2E5      2974            mov     c,_ACC_5
0DA8 9292      2975            mov     _P1_2,c
0DAA           2976   ;        ControllerLCD.h:27: LCD_D4=ACC_4;
0DAA A2E4      2977            mov     c,_ACC_4
0DAC 9293      2978            mov     _P1_3,c
0DAE           2979   ;        ControllerLCD.h:28: LCD_pulse();
0DAE C002      2980            push    ar2
0DB0 120000    2981            lcall   _LCD_pulse
0DB3           2982   ;        ControllerLCD.h:29: Timer3us(40);
0DB3 758228    2983            mov     dpl,#0x28
0DB6 120000    2984            lcall   _Timer3us
0DB9 D002      2985            pop     ar2
0DBB           2986   ;        ControllerLCD.h:30: ACC=x; //Send low nible
0DBB 8AE0      2987            mov     _ACC,r2
0DBD           2988   ;        ControllerLCD.h:31: LCD_D7=ACC_3;
0DBD A2E3      2989            mov     c,_ACC_3
0DBF 9290      2990            mov     _P1_0,c
0DC1           2991   ;        ControllerLCD.h:32: LCD_D6=ACC_2;
0DC1 A2E2      2992            mov     c,_ACC_2
0DC3 9291      2993            mov     _P1_1,c
0DC5           2994   ;        ControllerLCD.h:33: LCD_D5=ACC_1;
0DC5 A2E1      2995            mov     c,_ACC_1
0DC7 9292      2996            mov     _P1_2,c
0DC9           2997   ;        ControllerLCD.h:34: LCD_D4=ACC_0;
0DC9 A2E0      2998            mov     c,_ACC_0
0DCB 9293      2999            mov     _P1_3,c
0DCD           3000   ;        ControllerLCD.h:35: LCD_pulse();
0DCD 020000    3001            ljmp    _LCD_pulse
0DD0           3002   ;------------------------------------------------------------
0DD0           3003   ;Allocation info for local variables in function 'WriteData'
0DD0           3004   ;------------------------------------------------------------
0DD0           3005   ;x                         Allocated to registers r2 
0DD0           3006   ;------------------------------------------------------------
0DD0           3007   ;        ControllerLCD.h:38: void WriteData (unsigned char x)
0DD0           3008   ;        -----------------------------------------
0DD0           3009   ;         function WriteData
0DD0           3010   ;        -----------------------------------------
0DD0           3011   _WriteData:
0DD0 AA82      3012            mov     r2,dpl
0DD2           3013   ;        ControllerLCD.h:40: LCD_RS=1;
0DD2 D297      3014            setb    _P1_7
0DD4           3015   ;        ControllerLCD.h:41: LCD_byte(x);
0DD4 8A82      3016            mov     dpl,r2
0DD6 120000    3017            lcall   _LCD_byte
0DD9           3018   ;        ControllerLCD.h:42: waitms(2);
0DD9 900002    3019            mov     dptr,#0x0002
0DDC 020000    3020            ljmp    _waitms
0DDF           3021   ;------------------------------------------------------------
0DDF           3022   ;Allocation info for local variables in function 'WriteCommand'
0DDF           3023   ;------------------------------------------------------------
0DDF           3024   ;x                         Allocated to registers r2 
0DDF           3025   ;------------------------------------------------------------
0DDF           3026   ;        ControllerLCD.h:45: void WriteCommand (unsigned char x)
0DDF           3027   ;        -----------------------------------------
0DDF           3028   ;         function WriteCommand
0DDF           3029   ;        -----------------------------------------
0DDF           3030   _WriteCommand:
0DDF AA82      3031            mov     r2,dpl
0DE1           3032   ;        ControllerLCD.h:47: LCD_RS=0;
0DE1 C297      3033            clr     _P1_7
0DE3           3034   ;        ControllerLCD.h:48: LCD_byte(x);
0DE3 8A82      3035            mov     dpl,r2
0DE5 120000    3036            lcall   _LCD_byte
0DE8           3037   ;        ControllerLCD.h:49: waitms(5);
0DE8 900005    3038            mov     dptr,#0x0005
0DEB 020000    3039            ljmp    _waitms
0DEE           3040   ;------------------------------------------------------------
0DEE           3041   ;Allocation info for local variables in function 'LCD_4BIT'
0DEE           3042   ;------------------------------------------------------------
0DEE           3043   ;------------------------------------------------------------
0DEE           3044   ;        ControllerLCD.h:52: void LCD_4BIT (void)
0DEE           3045   ;        -----------------------------------------
0DEE           3046   ;         function LCD_4BIT
0DEE           3047   ;        -----------------------------------------
0DEE           3048   _LCD_4BIT:
0DEE           3049   ;        ControllerLCD.h:54: LCD_E=0; // Resting state of LCD's enable is zero
0DEE C2A0      3050            clr     _P2_0
0DF0           3051   ;        ControllerLCD.h:56: waitms(20);
0DF0 900014    3052            mov     dptr,#0x0014
0DF3 120000    3053            lcall   _waitms
0DF6           3054   ;        ControllerLCD.h:58: WriteCommand(0x33);
0DF6 758233    3055            mov     dpl,#0x33
0DF9 120000    3056            lcall   _WriteCommand
0DFC           3057   ;        ControllerLCD.h:59: WriteCommand(0x33);
0DFC 758233    3058            mov     dpl,#0x33
0DFF 120000    3059            lcall   _WriteCommand
0E02           3060   ;        ControllerLCD.h:60: WriteCommand(0x32); // Change to 4-bit mode
0E02 758232    3061            mov     dpl,#0x32
0E05 120000    3062            lcall   _WriteCommand
0E08           3063   ;        ControllerLCD.h:63: WriteCommand(0x28);
0E08 758228    3064            mov     dpl,#0x28
0E0B 120000    3065            lcall   _WriteCommand
0E0E           3066   ;        ControllerLCD.h:64: WriteCommand(0x0c);
0E0E 75820C    3067            mov     dpl,#0x0C
0E11 120000    3068            lcall   _WriteCommand
0E14           3069   ;        ControllerLCD.h:65: WriteCommand(0x01); // Clear screen command (takes some time)
0E14 758201    3070            mov     dpl,#0x01
0E17 120000    3071            lcall   _WriteCommand
0E1A           3072   ;        ControllerLCD.h:66: waitms(20); // Wait for clear screen command to finsih.
0E1A 900014    3073            mov     dptr,#0x0014
0E1D 020000    3074            ljmp    _waitms
0E20           3075   ;------------------------------------------------------------
0E20           3076   ;Allocation info for local variables in function 'LCDprint'
0E20           3077   ;------------------------------------------------------------
0E20           3078   ;line                      Allocated with name '_LCDprint_PARM_2'
0E20           3079   ;string                    Allocated to registers r2 r3 r4 
0E20           3080   ;j                         Allocated to registers r5 r6 
0E20           3081   ;------------------------------------------------------------
0E20           3082   ;        ControllerLCD.h:69: void LCDprint(char * string, unsigned char line, bit clear)
0E20           3083   ;        -----------------------------------------
0E20           3084   ;         function LCDprint
0E20           3085   ;        -----------------------------------------
0E20           3086   _LCDprint:
0E20 AA82      3087            mov     r2,dpl
0E22 AB83      3088            mov     r3,dph
0E24 ACF0      3089            mov     r4,b
0E26           3090   ;        ControllerLCD.h:73: WriteCommand(line==2?0xc0:0x80);
0E26 7402      3091            mov     a,#0x02
0E28 B50090    3092            cjne    a,_LCDprint_PARM_2,L031013?
0E2B 7DC0      3093            mov     r5,#0xC0
0E2D 8000      3094            sjmp    L031014?
0E2F           3095   L031013?:
0E2F 7D80      3096            mov     r5,#0x80
0E31           3097   L031014?:
0E31 8D82      3098            mov     dpl,r5
0E33 C002      3099            push    ar2
0E35 C003      3100            push    ar3
0E37 C004      3101            push    ar4
0E39 120000    3102            lcall   _WriteCommand
0E3C           3103   ;        ControllerLCD.h:74: waitms(5);
0E3C 900005    3104            mov     dptr,#0x0005
0E3F 120000    3105            lcall   _waitms
0E42 D004      3106            pop     ar4
0E44 D003      3107            pop     ar3
0E46 D002      3108            pop     ar2
0E48           3109   ;        ControllerLCD.h:75: for(j=0; string[j]!=0; j++)         WriteData(string[j]);// Write the message
0E48 7D00      3110            mov     r5,#0x00
0E4A 7E00      3111            mov     r6,#0x00
0E4C           3112   L031003?:
0E4C ED        3113            mov     a,r5
0E4D 2A        3114            add     a,r2
0E4E FF        3115            mov     r7,a
0E4F EE        3116            mov     a,r6
0E50 3B        3117            addc    a,r3
0E51 F8        3118            mov     r0,a
0E52 8C01      3119            mov     ar1,r4
0E54 8F82      3120            mov     dpl,r7
0E56 8883      3121            mov     dph,r0
0E58 89F0      3122            mov     b,r1
0E5A 120000    3123            lcall   __gptrget
0E5D FF        3124            mov     r7,a
0E5E 6000      3125            jz      L031006?
0E60 8F82      3126            mov     dpl,r7
0E62 C002      3127            push    ar2
0E64 C003      3128            push    ar3
0E66 C004      3129            push    ar4
0E68 C005      3130            push    ar5
0E6A C006      3131            push    ar6
0E6C 120000    3132            lcall   _WriteData
0E6F D006      3133            pop     ar6
0E71 D005      3134            pop     ar5
0E73 D004      3135            pop     ar4
0E75 D003      3136            pop     ar3
0E77 D002      3137            pop     ar2
0E79 0D        3138            inc     r5
0E7A BD0050    3139            cjne    r5,#0x00,L031003?
0E7D 0E        3140            inc     r6
0E7E 8000      3141            sjmp    L031003?
0E80           3142   L031006?:
0E80           3143   ;        ControllerLCD.h:76: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0E80 30C010    3144            jnb     _LCDprint_PARM_3,L031011?
0E83 8D02      3145            mov     ar2,r5
0E85 8E03      3146            mov     ar3,r6
0E87           3147   L031007?:
0E87 C3        3148            clr     c
0E88 EA        3149            mov     a,r2
0E89 9410      3150            subb    a,#0x10
0E8B EB        3151            mov     a,r3
0E8C 6480      3152            xrl     a,#0x80
0E8E 9480      3153            subb    a,#0x80
0E90 5000      3154            jnc     L031011?
0E92 758220    3155            mov     dpl,#0x20
0E95 C002      3156            push    ar2
0E97 C003      3157            push    ar3
0E99 120000    3158            lcall   _WriteData
0E9C D003      3159            pop     ar3
0E9E D002      3160            pop     ar2
0EA0 0A        3161            inc     r2
0EA1 BA0010    3162            cjne    r2,#0x00,L031007?
0EA4 0B        3163            inc     r3
0EA5 8000      3164            sjmp    L031007?
0EA7           3165   L031011?:
0EA7 22        3166            ret
0EA8           3167   ;------------------------------------------------------------
0EA8           3168   ;Allocation info for local variables in function 'getsn'
0EA8           3169   ;------------------------------------------------------------
0EA8           3170   ;len                       Allocated with name '_getsn_PARM_2'
0EA8           3171   ;buff                      Allocated with name '_getsn_buff_1_162'
0EA8           3172   ;j                         Allocated with name '_getsn_sloc0_1_0'
0EA8           3173   ;c                         Allocated to registers r3 
0EA8           3174   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
0EA8           3175   ;------------------------------------------------------------
0EA8           3176   ;        ControllerLCD.h:79: int getsn (char * buff, int len)
0EA8           3177   ;        -----------------------------------------
0EA8           3178   ;         function getsn
0EA8           3179   ;        -----------------------------------------
0EA8           3180   _getsn:
0EA8 858230    3181            mov     _getsn_buff_1_162,dpl
0EAB 858331    3182            mov     (_getsn_buff_1_162 + 1),dph
0EAE 85F032    3183            mov     (_getsn_buff_1_162 + 2),b
0EB1           3184   ;        ControllerLCD.h:84: for(j=0; j<(len-1); j++)
0EB1 E4        3185            clr     a
0EB2 F570      3186            mov     _getsn_sloc0_1_0,a
0EB4 F571      3187            mov     (_getsn_sloc0_1_0 + 1),a
0EB6 E580      3188            mov     a,_getsn_PARM_2
0EB8 24FF      3189            add     a,#0xff
0EBA FF        3190            mov     r7,a
0EBB E581      3191            mov     a,(_getsn_PARM_2 + 1)
0EBD 34FF      3192            addc    a,#0xff
0EBF F8        3193            mov     r0,a
0EC0 7900      3194            mov     r1,#0x00
0EC2 7A00      3195            mov     r2,#0x00
0EC4           3196   L032005?:
0EC4 C3        3197            clr     c
0EC5 E9        3198            mov     a,r1
0EC6 9F        3199            subb    a,r7
0EC7 EA        3200            mov     a,r2
0EC8 6480      3201            xrl     a,#0x80
0ECA 88F0      3202            mov     b,r0
0ECC 63F080    3203            xrl     b,#0x80
0ECF 95F0      3204            subb    a,b
0ED1 5000      3205            jnc     L032008?
0ED3           3206   ;        ControllerLCD.h:86: c=getchar();
0ED3 C002      3207            push    ar2
0ED5 C007      3208            push    ar7
0ED7 C000      3209            push    ar0
0ED9 C001      3210            push    ar1
0EDB 120000    3211            lcall   _getchar
0EDE AB82      3212            mov     r3,dpl
0EE0 D001      3213            pop     ar1
0EE2 D000      3214            pop     ar0
0EE4 D007      3215            pop     ar7
0EE6 D002      3216            pop     ar2
0EE8           3217   ;        ControllerLCD.h:87: if ( (c=='\n') || (c=='\r') )
0EE8 BB0A50    3218            cjne    r3,#0x0A,L032015?
0EEB 8000      3219            sjmp    L032001?
0EED           3220   L032015?:
0EED BB0DD0    3221            cjne    r3,#0x0D,L032002?
0EF0           3222   L032001?:
0EF0           3223   ;        ControllerLCD.h:89: buff[j]=0;
0EF0 E570      3224            mov     a,_getsn_sloc0_1_0
0EF2 2530      3225            add     a,_getsn_buff_1_162
0EF4 FC        3226            mov     r4,a
0EF5 E571      3227            mov     a,(_getsn_sloc0_1_0 + 1)
0EF7 3531      3228            addc    a,(_getsn_buff_1_162 + 1)
0EF9 FD        3229            mov     r5,a
0EFA AE32      3230            mov     r6,(_getsn_buff_1_162 + 2)
0EFC 8C82      3231            mov     dpl,r4
0EFE 8D83      3232            mov     dph,r5
0F00 8EF0      3233            mov     b,r6
0F02 E4        3234            clr     a
0F03 120000    3235            lcall   __gptrput
0F06           3236   ;        ControllerLCD.h:90: return j;
0F06 857082    3237            mov     dpl,_getsn_sloc0_1_0
0F09 857183    3238            mov     dph,(_getsn_sloc0_1_0 + 1)
0F0C 22        3239            ret
0F0D           3240   L032002?:
0F0D           3241   ;        ControllerLCD.h:94: buff[j]=c;
0F0D E9        3242            mov     a,r1
0F0E 2530      3243            add     a,_getsn_buff_1_162
0F10 FC        3244            mov     r4,a
0F11 EA        3245            mov     a,r2
0F12 3531      3246            addc    a,(_getsn_buff_1_162 + 1)
0F14 FD        3247            mov     r5,a
0F15 AE32      3248            mov     r6,(_getsn_buff_1_162 + 2)
0F17 8C82      3249            mov     dpl,r4
0F19 8D83      3250            mov     dph,r5
0F1B 8EF0      3251            mov     b,r6
0F1D EB        3252            mov     a,r3
0F1E 120000    3253            lcall   __gptrput
0F21           3254   ;        ControllerLCD.h:84: for(j=0; j<(len-1); j++)
0F21 09        3255            inc     r1
0F22 B90090    3256            cjne    r1,#0x00,L032018?
0F25 0A        3257            inc     r2
0F26           3258   L032018?:
0F26 8970      3259            mov     _getsn_sloc0_1_0,r1
0F28 8A71      3260            mov     (_getsn_sloc0_1_0 + 1),r2
0F2A 8000      3261            sjmp    L032005?
0F2C           3262   L032008?:
0F2C           3263   ;        ControllerLCD.h:97: buff[j]=0;
0F2C E570      3264            mov     a,_getsn_sloc0_1_0
0F2E 2530      3265            add     a,_getsn_buff_1_162
0F30 FA        3266            mov     r2,a
0F31 E571      3267            mov     a,(_getsn_sloc0_1_0 + 1)
0F33 3531      3268            addc    a,(_getsn_buff_1_162 + 1)
0F35 FB        3269            mov     r3,a
0F36 AC32      3270            mov     r4,(_getsn_buff_1_162 + 2)
0F38 8A82      3271            mov     dpl,r2
0F3A 8B83      3272            mov     dph,r3
0F3C 8CF0      3273            mov     b,r4
0F3E E4        3274            clr     a
0F3F 120000    3275            lcall   __gptrput
0F42           3276   ;        ControllerLCD.h:98: return len;
0F42 858082    3277            mov     dpl,_getsn_PARM_2
0F45 858183    3278            mov     dph,(_getsn_PARM_2 + 1)
0F48 22        3279            ret
0F49           3280   ;------------------------------------------------------------
0F49           3281   ;Allocation info for local variables in function 'printCharAsBinary'
0F49           3282   ;------------------------------------------------------------
0F49           3283   ;c                         Allocated to registers r2 
0F49           3284   ;i                         Allocated to registers r3 r4 
0F49           3285   ;out                       Allocated to registers r5 
0F49           3286   ;------------------------------------------------------------
0F49           3287   ;        Controller.c:14: void printCharAsBinary(char c) {
0F49           3288   ;        -----------------------------------------
0F49           3289   ;         function printCharAsBinary
0F49           3290   ;        -----------------------------------------
0F49           3291   _printCharAsBinary:
0F49 AA82      3292            mov     r2,dpl
0F4B           3293   ;        Controller.c:18: for (i = 7; i >= 0; i--) {
0F4B 7B07      3294            mov     r3,#0x07
0F4D 7C00      3295            mov     r4,#0x00
0F4F           3296   L033001?:
0F4F EC        3297            mov     a,r4
0F50 20E750    3298            jb      acc.7,L033004?
0F53           3299   ;        Controller.c:19: out = (c >> i) & 1; // Shift right i bits, and mask all but the least significant bit
0F53 8BF0      3300            mov     b,r3
0F55 05F0      3301            inc     b
0F57 EA        3302            mov     a,r2
0F58 33        3303            rlc     a
0F59 92D2      3304            mov     ov,c
0F5B EA        3305            mov     a,r2
0F5C 8000      3306            sjmp    L033012?
0F5E           3307   L033011?:
0F5E A2D2      3308            mov     c,ov
0F60 13        3309            rrc     a
0F61           3310   L033012?:
0F61 D5F0D0    3311            djnz    b,L033011?
0F64 5401      3312            anl     a,#0x01
0F66           3313   ;        Controller.c:20: printf("%d", out);
0F66 FD        3314            mov     r5,a
0F67 33        3315            rlc     a
0F68 95E0      3316            subb    a,acc
0F6A FE        3317            mov     r6,a
0F6B C002      3318            push    ar2
0F6D C003      3319            push    ar3
0F6F C004      3320            push    ar4
0F71 C005      3321            push    ar5
0F73 C006      3322            push    ar6
0F75 7450      3323            mov     a,#__str_3
0F77 C0E0      3324            push    acc
0F79 7471      3325            mov     a,#(__str_3 >> 8)
0F7B C0E0      3326            push    acc
0F7D 7480      3327            mov     a,#0x80
0F7F C0E0      3328            push    acc
0F81 120000    3329            lcall   _printf
0F84 E581      3330            mov     a,sp
0F86 24FB      3331            add     a,#0xfb
0F88 F581      3332            mov     sp,a
0F8A D004      3333            pop     ar4
0F8C D003      3334            pop     ar3
0F8E D002      3335            pop     ar2
0F90           3336   ;        Controller.c:18: for (i = 7; i >= 0; i--) {
0F90 1B        3337            dec     r3
0F91 BBFF10    3338            cjne    r3,#0xff,L033013?
0F94 1C        3339            dec     r4
0F95           3340   L033013?:
0F95 8000      3341            sjmp    L033001?
0F97           3342   L033004?:
0F97           3343   ;        Controller.c:22: printf("\n"); // Move to a new line after printing the binary representation
0F97 7410      3344            mov     a,#__str_4
0F99 C0E0      3345            push    acc
0F9B 7476      3346            mov     a,#(__str_4 >> 8)
0F9D C0E0      3347            push    acc
0F9F 7480      3348            mov     a,#0x80
0FA1 C0E0      3349            push    acc
0FA3 120000    3350            lcall   _printf
0FA6 1581      3351            dec     sp
0FA8 1581      3352            dec     sp
0FAA 1581      3353            dec     sp
0FAC 22        3354            ret
0FAD           3355   ;------------------------------------------------------------
0FAD           3356   ;Allocation info for local variables in function 'main'
0FAD           3357   ;------------------------------------------------------------
0FAD           3358   ;cnt                       Allocated to registers 
0FAD           3359   ;vx_right                  Allocated with name '_main_vx_right_1_171'
0FAD           3360   ;vy_right                  Allocated to registers r6 r7 r2 r3 
0FAD           3361   ;sw_right                  Allocated with name '_main_sw_right_1_171'
0FAD           3362   ;vx_left                   Allocated with name '_main_vx_left_1_171'
0FAD           3363   ;vy_left                   Allocated with name '_main_vy_left_1_171'
0FAD           3364   ;sw_left                   Allocated with name '_main_sw_left_1_171'
0FAD           3365   ;vx1                       Allocated with name '_main_vx1_1_171'
0FAD           3366   ;vy1                       Allocated with name '_main_vy1_1_171'
0FAD           3367   ;vx2                       Allocated to registers r4 r5 
0FAD           3368   ;vy2                       Allocated to registers r2 r3 
0FAD           3369   ;timeout                   Allocated to registers r2 r3 
0FAD           3370   ;freq                      Allocated with name '_main_freq_1_171'
0FAD           3371   ;sw1                       Allocated to registers 
0FAD           3372   ;sw2                       Allocated to registers 
0FAD           3373   ;position                  Allocated to registers 
0FAD           3374   ;------------------------------------------------------------
0FAD           3375   ;        Controller.c:25: void main (void)
0FAD           3376   ;        -----------------------------------------
0FAD           3377   ;         function main
0FAD           3378   ;        -----------------------------------------
0FAD           3379   _main:
0FAD           3380   ;        Controller.c:36: waitms(500);
0FAD 9001F4    3381            mov     dptr,#0x01F4
0FB0 120000    3382            lcall   _waitms
0FB3           3383   ;        Controller.c:37: UART1_Init(9600);
0FB3 902580    3384            mov     dptr,#0x2580
0FB6 E4        3385            clr     a
0FB7 F5F0      3386            mov     b,a
0FB9 120000    3387            lcall   _UART1_Init
0FBC           3388   ;        Controller.c:40: InitPinADC(2, 1); // Configure P2.1 as analog input
0FBC 754001    3389            mov     _InitPinADC_PARM_2,#0x01
0FBF 758202    3390            mov     dpl,#0x02
0FC2 120000    3391            lcall   _InitPinADC
0FC5           3392   ;        Controller.c:41: InitPinADC(2, 2); // Configure P2.2 as analog input
0FC5 754002    3393            mov     _InitPinADC_PARM_2,#0x02
0FC8 758202    3394            mov     dpl,#0x02
0FCB 120000    3395            lcall   _InitPinADC
0FCE           3396   ;        Controller.c:42: InitPinADC(2, 3); // Configure P2.3 as analog input
0FCE 754003    3397            mov     _InitPinADC_PARM_2,#0x03
0FD1 758202    3398            mov     dpl,#0x02
0FD4 120000    3399            lcall   _InitPinADC
0FD7           3400   ;        Controller.c:43: InitPinADC(2, 4); // Configure P2.4 as analog input
0FD7 754004    3401            mov     _InitPinADC_PARM_2,#0x04
0FDA 758202    3402            mov     dpl,#0x02
0FDD 120000    3403            lcall   _InitPinADC
0FE0           3404   ;        Controller.c:44: InitPinADC(2, 5); // Configure P2.5 as analog input
0FE0 754005    3405            mov     _InitPinADC_PARM_2,#0x05
0FE3 758202    3406            mov     dpl,#0x02
0FE6 120000    3407            lcall   _InitPinADC
0FE9           3408   ;        Controller.c:45: InitPinADC(2, 6); // Configure P2.6 as analog input
0FE9 754006    3409            mov     _InitPinADC_PARM_2,#0x06
0FEC 758202    3410            mov     dpl,#0x02
0FEF 120000    3411            lcall   _InitPinADC
0FF2           3412   ;        Controller.c:46: InitADC();
0FF2 120000    3413            lcall   _InitADC
0FF5           3414   ;        Controller.c:48: LCD_4BIT();
0FF5 120000    3415            lcall   _LCD_4BIT
0FF8           3416   ;        Controller.c:50: printf("\n\n---- Press and Hold both Joysticks to Calibrate ----\n");
0FF8 7490      3417            mov     a,#__str_5
0FFA C0E0      3418            push    acc
0FFC 7478      3419            mov     a,#(__str_5 >> 8)
0FFE C0E0      3420            push    acc
1000 7480      3421            mov     a,#0x80
1002 C0E0      3422            push    acc
1004 120000    3423            lcall   _printf
1007 1581      3424            dec     sp
1009 1581      3425            dec     sp
100B 1581      3426            dec     sp
100D           3427   ;        Controller.c:51: Wait_For_Calibration();
100D 120000    3428            lcall   _Wait_For_Calibration
1010           3429   ;        Controller.c:52: waitms(200);
1010 9000C8    3430            mov     dptr,#0x00C8
1013 120000    3431            lcall   _waitms
1016           3432   ;        Controller.c:54: SendATCommand("AT+BAUD\r\n");
1016 907010    3433            mov     dptr,#__str_6
1019 75F080    3434            mov     b,#0x80
101C 120000    3435            lcall   _SendATCommand
101F           3436   ;        Controller.c:55: SendATCommand("AT+BAUD\r\n");
101F 907010    3437            mov     dptr,#__str_6
1022 75F080    3438            mov     b,#0x80
1025 120000    3439            lcall   _SendATCommand
1028           3440   ;        Controller.c:56: SendATCommand("AT+RFID\r\n");
1028 907C90    3441            mov     dptr,#__str_7
102B 75F080    3442            mov     b,#0x80
102E 120000    3443            lcall   _SendATCommand
1031           3444   ;        Controller.c:57: SendATCommand("AT+DVIDA0C4\r\n");
1031 9078D0    3445            mov     dptr,#__str_8
1034 75F080    3446            mov     b,#0x80
1037 120000    3447            lcall   _SendATCommand
103A           3448   ;        Controller.c:59: SendATCommand("AT+RFC\r\n");  
103A 907910    3449            mov     dptr,#__str_9
103D 75F080    3450            mov     b,#0x80
1040 120000    3451            lcall   _SendATCommand
1043           3452   ;        Controller.c:60: SendATCommand("AT+POWE\r\n");
1043 907950    3453            mov     dptr,#__str_10
1046 75F080    3454            mov     b,#0x80
1049 120000    3455            lcall   _SendATCommand
104C           3456   ;        Controller.c:61: SendATCommand("AT+CLSS\r\n");
104C 907990    3457            mov     dptr,#__str_11
104F 75F080    3458            mov     b,#0x80
1052 120000    3459            lcall   _SendATCommand
1055           3460   ;        Controller.c:62: SendATCommand("AT+VER\r\n");
1055 9079D0    3461            mov     dptr,#__str_12
1058 75F080    3462            mov     b,#0x80
105B 120000    3463            lcall   _SendATCommand
105E           3464   ;        Controller.c:65: printf("\n\n---- CONTROLLER SETUP COMPLETE ----\n");
105E 7450      3465            mov     a,#__str_13
1060 C0E0      3466            push    acc
1062 7474      3467            mov     a,#(__str_13 >> 8)
1064 C0E0      3468            push    acc
1066 7480      3469            mov     a,#0x80
1068 C0E0      3470            push    acc
106A 120000    3471            lcall   _printf
106D 1581      3472            dec     sp
106F 1581      3473            dec     sp
1071 1581      3474            dec     sp
1073           3475   ;        Controller.c:69: while(1)
1073           3476   L034011?:
1073           3477   ;        Controller.c:72: sw_left = Volts_at_Pin(QFP32_MUX_P2_6);
1073 758213    3478            mov     dpl,#0x13
1076 120000    3479            lcall   _Volts_at_Pin
1079 858230    3480            mov     _main_sw_left_1_171,dpl
107C 858331    3481            mov     (_main_sw_left_1_171 + 1),dph
107F 85F032    3482            mov     (_main_sw_left_1_171 + 2),b
1082 F533      3483            mov     (_main_sw_left_1_171 + 3),a
1084           3484   ;        Controller.c:73: vx_left = Volts_at_Pin(QFP32_MUX_P2_5);
1084 758212    3485            mov     dpl,#0x12
1087 120000    3486            lcall   _Volts_at_Pin
108A 8582F0    3487            mov     _main_vx_left_1_171,dpl
108D 8583F1    3488            mov     (_main_vx_left_1_171 + 1),dph
1090 85F0F2    3489            mov     (_main_vx_left_1_171 + 2),b
1093 F5F3      3490            mov     (_main_vx_left_1_171 + 3),a
1095           3491   ;        Controller.c:74: vy_left = Volts_at_Pin(QFP32_MUX_P2_4);
1095 758211    3492            mov     dpl,#0x11
1098 120000    3493            lcall   _Volts_at_Pin
109B 8582F0    3494            mov     _main_vy_left_1_171,dpl
109E 8583F1    3495            mov     (_main_vy_left_1_171 + 1),dph
10A1 85F0F2    3496            mov     (_main_vy_left_1_171 + 2),b
10A4 F5F3      3497            mov     (_main_vy_left_1_171 + 3),a
10A6           3498   ;        Controller.c:76: sw_right = Volts_at_Pin(QFP32_MUX_P2_1);
10A6 75820E    3499            mov     dpl,#0x0E
10A9 120000    3500            lcall   _Volts_at_Pin
10AC 8582B0    3501            mov     _main_sw_right_1_171,dpl
10AF 8583B1    3502            mov     (_main_sw_right_1_171 + 1),dph
10B2 85F0B2    3503            mov     (_main_sw_right_1_171 + 2),b
10B5 F5B3      3504            mov     (_main_sw_right_1_171 + 3),a
10B7           3505   ;        Controller.c:77: vx_right = Volts_at_Pin(QFP32_MUX_P2_2);
10B7 75820F    3506            mov     dpl,#0x0F
10BA 120000    3507            lcall   _Volts_at_Pin
10BD 8582B0    3508            mov     _main_vx_right_1_171,dpl
10C0 8583B1    3509            mov     (_main_vx_right_1_171 + 1),dph
10C3 85F0B2    3510            mov     (_main_vx_right_1_171 + 2),b
10C6 F5B3      3511            mov     (_main_vx_right_1_171 + 3),a
10C8           3512   ;        Controller.c:78: vy_right = Volts_at_Pin(QFP32_MUX_P2_3);
10C8 758210    3513            mov     dpl,#0x10
10CB 120000    3514            lcall   _Volts_at_Pin
10CE AE82      3515            mov     r6,dpl
10D0 AF83      3516            mov     r7,dph
10D2 AAF0      3517            mov     r2,b
10D4 FB        3518            mov     r3,a
10D5           3519   ;        Controller.c:80: vx1 = Voltage_to_Coordinate(vx_left);
10D5 85F082    3520            mov     dpl,_main_vx_left_1_171
10D8 85F183    3521            mov     dph,(_main_vx_left_1_171 + 1)
10DB 85F2F0    3522            mov     b,(_main_vx_left_1_171 + 2)
10DE E5F3      3523            mov     a,(_main_vx_left_1_171 + 3)
10E0 C002      3524            push    ar2
10E2 C003      3525            push    ar3
10E4 C006      3526            push    ar6
10E6 C007      3527            push    ar7
10E8 120000    3528            lcall   _Voltage_to_Coordinate
10EB 8582B0    3529            mov     _main_vx1_1_171,dpl
10EE 8583B1    3530            mov     (_main_vx1_1_171 + 1),dph
10F1           3531   ;        Controller.c:81: vy1 = Voltage_to_Coordinate(vy_left);
10F1 85F082    3532            mov     dpl,_main_vy_left_1_171
10F4 85F183    3533            mov     dph,(_main_vy_left_1_171 + 1)
10F7 85F2F0    3534            mov     b,(_main_vy_left_1_171 + 2)
10FA E5F3      3535            mov     a,(_main_vy_left_1_171 + 3)
10FC 120000    3536            lcall   _Voltage_to_Coordinate
10FF 8582F0    3537            mov     _main_vy1_1_171,dpl
1102 8583F1    3538            mov     (_main_vy1_1_171 + 1),dph
1105           3539   ;        Controller.c:82: vx2 = Voltage_to_Coordinate(vx_right);
1105 85B082    3540            mov     dpl,_main_vx_right_1_171
1108 85B183    3541            mov     dph,(_main_vx_right_1_171 + 1)
110B 85B2F0    3542            mov     b,(_main_vx_right_1_171 + 2)
110E E5B3      3543            mov     a,(_main_vx_right_1_171 + 3)
1110 120000    3544            lcall   _Voltage_to_Coordinate
1113 AC82      3545            mov     r4,dpl
1115 AD83      3546            mov     r5,dph
1117 D007      3547            pop     ar7
1119 D006      3548            pop     ar6
111B D003      3549            pop     ar3
111D D002      3550            pop     ar2
111F           3551   ;        Controller.c:83: vy2 = Voltage_to_Coordinate(vy_right);
111F 8E82      3552            mov     dpl,r6
1121 8F83      3553            mov     dph,r7
1123 8AF0      3554            mov     b,r2
1125 EB        3555            mov     a,r3
1126 C004      3556            push    ar4
1128 C005      3557            push    ar5
112A 120000    3558            lcall   _Voltage_to_Coordinate
112D AA82      3559            mov     r2,dpl
112F AB83      3560            mov     r3,dph
1131 D005      3561            pop     ar5
1133 D004      3562            pop     ar4
1135           3563   ;        Controller.c:84: sw1 = Check_Joystick_Button(sw_left); //Returns 1 if pressed, 0 otherwise
1135 853082    3564            mov     dpl,_main_sw_left_1_171
1138 853183    3565            mov     dph,(_main_sw_left_1_171 + 1)
113B 8532F0    3566            mov     b,(_main_sw_left_1_171 + 2)
113E E533      3567            mov     a,(_main_sw_left_1_171 + 3)
1140 C002      3568            push    ar2
1142 C003      3569            push    ar3
1144 C004      3570            push    ar4
1146 C005      3571            push    ar5
1148 120000    3572            lcall   _Check_Joystick_Button
114B           3573   ;        Controller.c:85: sw2 = Check_Joystick_Button(sw_right);
114B 85B082    3574            mov     dpl,_main_sw_right_1_171
114E 85B183    3575            mov     dph,(_main_sw_right_1_171 + 1)
1151 85B2F0    3576            mov     b,(_main_sw_right_1_171 + 2)
1154 E5B3      3577            mov     a,(_main_sw_right_1_171 + 3)
1156 120000    3578            lcall   _Check_Joystick_Button
1159           3579   ;        Controller.c:95: Generate_Motor_Command(&mcmd1,vx1,vy1);
1159 85B040    3580            mov     _Generate_Motor_Command_PARM_2,_main_vx1_1_171
115C 85B141    3581            mov     (_Generate_Motor_Command_PARM_2 + 1),(_main_vx1_1_171 + 1)
115F 85F040    3582            mov     _Generate_Motor_Command_PARM_3,_main_vy1_1_171
1162 85F141    3583            mov     (_Generate_Motor_Command_PARM_3 + 1),(_main_vy1_1_171 + 1)
1165 909EC0    3584            mov     dptr,#_mcmd1
1168 75F040    3585            mov     b,#0x40
116B 120000    3586            lcall   _Generate_Motor_Command
116E D005      3587            pop     ar5
1170 D004      3588            pop     ar4
1172 D003      3589            pop     ar3
1174 D002      3590            pop     ar2
1176           3591   ;        Controller.c:96: Generate_Motor_Command(&mcmd2,vx2,vy2);
1176 8C40      3592            mov     _Generate_Motor_Command_PARM_2,r4
1178 8D41      3593            mov     (_Generate_Motor_Command_PARM_2 + 1),r5
117A 8A40      3594            mov     _Generate_Motor_Command_PARM_3,r2
117C 8B41      3595            mov     (_Generate_Motor_Command_PARM_3 + 1),r3
117E 90A840    3596            mov     dptr,#_mcmd2
1181 75F040    3597            mov     b,#0x40
1184 120000    3598            lcall   _Generate_Motor_Command
1187           3599   ;        Controller.c:97: Weigh_Dual_Inputs(&mcmd,&mcmd1,&mcmd2,0.2);
1187 7580C0    3600            mov     _Weigh_Dual_Inputs_PARM_2,#_mcmd1
118A 758100    3601            mov     (_Weigh_Dual_Inputs_PARM_2 + 1),#0x00
118D 758240    3602            mov     (_Weigh_Dual_Inputs_PARM_2 + 2),#0x40
1190 750040    3603            mov     _Weigh_Dual_Inputs_PARM_3,#_mcmd2
1193 750100    3604            mov     (_Weigh_Dual_Inputs_PARM_3 + 1),#0x00
1196 750240    3605            mov     (_Weigh_Dual_Inputs_PARM_3 + 2),#0x40
1199 7500CD    3606            mov     _Weigh_Dual_Inputs_PARM_4,#0xCD
119C 7501CC    3607            mov     (_Weigh_Dual_Inputs_PARM_4 + 1),#0xCC
119F 75024C    3608            mov     (_Weigh_Dual_Inputs_PARM_4 + 2),#0x4C
11A2 75033E    3609            mov     (_Weigh_Dual_Inputs_PARM_4 + 3),#0x3E
11A5 90A200    3610            mov     dptr,#_mcmd
11A8 75F040    3611            mov     b,#0x40
11AB 120000    3612            lcall   _Weigh_Dual_Inputs
11AE           3613   ;        Controller.c:102: sprintf(tbuff,"%4d %3d\n",mcmd.left,mcmd.right);
11AE 7802      3614            mov     r0,#(_mcmd + 0x0002)
11B0 8602      3615            mov     ar2,@r0
11B2 08        3616            inc     r0
11B3 8603      3617            mov     ar3,@r0
11B5 7800      3618            mov     r0,#_mcmd
11B7 8604      3619            mov     ar4,@r0
11B9 08        3620            inc     r0
11BA 8605      3621            mov     ar5,@r0
11BC C002      3622            push    ar2
11BE C003      3623            push    ar3
11C0 C004      3624            push    ar4
11C2 C005      3625            push    ar5
11C4 7490      3626            mov     a,#__str_14
11C6 C0E0      3627            push    acc
11C8 746D      3628            mov     a,#(__str_14 >> 8)
11CA C0E0      3629            push    acc
11CC 7480      3630            mov     a,#0x80
11CE C0E0      3631            push    acc
11D0 7440      3632            mov     a,#_tbuff
11D2 C0E0      3633            push    acc
11D4 749E      3634            mov     a,#(_tbuff >> 8)
11D6 C0E0      3635            push    acc
11D8 7440      3636            mov     a,#0x40
11DA C0E0      3637            push    acc
11DC 120000    3638            lcall   _sprintf
11DF E581      3639            mov     a,sp
11E1 24F6      3640            add     a,#0xf6
11E3 F581      3641            mov     sp,a
11E5           3642   ;        Controller.c:106: sendstr1(tbuff);
11E5 909E40    3643            mov     dptr,#_tbuff
11E8 75F040    3644            mov     b,#0x40
11EB 120000    3645            lcall   _sendstr1
11EE           3646   ;        Controller.c:107: printf(tbuff);
11EE 7440      3647            mov     a,#_tbuff
11F0 C0E0      3648            push    acc
11F2 749E      3649            mov     a,#(_tbuff >> 8)
11F4 C0E0      3650            push    acc
11F6 7440      3651            mov     a,#0x40
11F8 C0E0      3652            push    acc
11FA 120000    3653            lcall   _printf
11FD 1581      3654            dec     sp
11FF 1581      3655            dec     sp
1201 1581      3656            dec     sp
1203           3657   ;        Controller.c:110: while(1){ // check if there's data to recieve 
1203 7A00      3658            mov     r2,#0x00
1205 7B00      3659            mov     r3,#0x00
1207           3660   L034006?:
1207           3661   ;        Controller.c:111: if(RXU1()) break;
1207 C002      3662            push    ar2
1209 C003      3663            push    ar3
120B 120000    3664            lcall   _RXU1
120E D003      3665            pop     ar3
1210 D002      3666            pop     ar2
1212 4000      3667            jc      L034007?
1214           3668   ;        Controller.c:112: Timer3us(100);
1214 758264    3669            mov     dpl,#0x64
1217 C002      3670            push    ar2
1219 C003      3671            push    ar3
121B 120000    3672            lcall   _Timer3us
121E D003      3673            pop     ar3
1220 D002      3674            pop     ar2
1222           3675   ;        Controller.c:113: timeout++;
1222 0A        3676            inc     r2
1223 BA00D0    3677            cjne    r2,#0x00,L034021?
1226 0B        3678            inc     r3
1227           3679   L034021?:
1227           3680   ;        Controller.c:114: if(timeout>1000) break;
1227 C3        3681            clr     c
1228 74E8      3682            mov     a,#0xE8
122A 9A        3683            subb    a,r2
122B 7483      3684            mov     a,#(0x03 ^ 0x80)
122D 8BF0      3685            mov     b,r3
122F 63F080    3686            xrl     b,#0x80
1232 95F0      3687            subb    a,b
1234 5000      3688            jnc     L034006?
1236           3689   L034007?:
1236           3690   ;        Controller.c:116: if(RXU1()){
1236 120000    3691            lcall   _RXU1
1239 5000      3692            jnc     L034009?
123B           3693   ;        Controller.c:117: getstr1(rbuff);
123B 909BC0    3694            mov     dptr,#_rbuff
123E 75F040    3695            mov     b,#0x40
1241 120000    3696            lcall   _getstr1
1244           3697   L034009?:
1244           3698   ;        Controller.c:120: sscanf(rbuff,"%d",&freq);
1244 7430      3699            mov     a,#_main_freq_1_171
1246 C0E0      3700            push    acc
1248 745C      3701            mov     a,#(_main_freq_1_171 >> 8)
124A C0E0      3702            push    acc
124C 7440      3703            mov     a,#0x40
124E C0E0      3704            push    acc
1250 7450      3705            mov     a,#__str_3
1252 C0E0      3706            push    acc
1254 7471      3707            mov     a,#(__str_3 >> 8)
1256 C0E0      3708            push    acc
1258 7480      3709            mov     a,#0x80
125A C0E0      3710            push    acc
125C 74C0      3711            mov     a,#_rbuff
125E C0E0      3712            push    acc
1260 749B      3713            mov     a,#(_rbuff >> 8)
1262 C0E0      3714            push    acc
1264 7440      3715            mov     a,#0x40
1266 C0E0      3716            push    acc
1268 120000    3717            lcall   _sscanf
126B E581      3718            mov     a,sp
126D 24F7      3719            add     a,#0xf7
126F F581      3720            mov     sp,a
1271           3721   ;        Controller.c:121: printf("%d\n",freq);
1271 C030      3722            push    _main_freq_1_171
1273 C031      3723            push    (_main_freq_1_171 + 1)
1275 74D0      3724            mov     a,#__str_15
1277 C0E0      3725            push    acc
1279 746E      3726            mov     a,#(__str_15 >> 8)
127B C0E0      3727            push    acc
127D 7480      3728            mov     a,#0x80
127F C0E0      3729            push    acc
1281 120000    3730            lcall   _printf
1284 E581      3731            mov     a,sp
1286 24FB      3732            add     a,#0xfb
1288 F581      3733            mov     sp,a
128A 020000    3734            ljmp    L034011?
128D           3735            rseg R_CSEG
128D           3736   
0000           3737            rseg R_XINIT
0000           3738   
0000           3739            rseg R_CONST
0000           3740   __str_0:
0000 496E6974  3741            db 'Initialized ADC at Pin %d_%d'
     69616C69
     7A656420
     41444320
     61742050
     696E2025
     645F2564
001C 0A        3742            db 0x0A
001D 00        3743            db 0x00
001E           3744   __str_1:
001E 436F6D6D  3745            db 'Command: %s'
     616E643A
     202573
0029 00        3746            db 0x00
002A           3747   __str_2:
002A 52657370  3748            db 'Response: %s'
     6F6E7365
     3A202573
0036 0D        3749            db 0x0D
0037 0A        3750            db 0x0A
0038 00        3751            db 0x00
0039           3752   __str_3:
0039 2564      3753            db '%d'
003B 00        3754            db 0x00
003C           3755   __str_4:
003C 0A        3756            db 0x0A
003D 00        3757            db 0x00
003E           3758   __str_5:
003E 0A        3759            db 0x0A
003F 0A        3760            db 0x0A
0040 2D2D2D2D  3761            db '---- Press and Hold both Joysticks to Calibrate ----'
     20507265
     73732061
     6E642048
     6F6C6420
     626F7468
     204A6F79
     73746963
     6B732074
     6F204361
     6C696272
     61746520
     2D2D2D2D
0074 0A        3762            db 0x0A
0075 00        3763            db 0x00
0076           3764   __str_6:
0076 41542B42  3765            db 'AT+BAUD'
     415544
007D 0D        3766            db 0x0D
007E 0A        3767            db 0x0A
007F 00        3768            db 0x00
0080           3769   __str_7:
0080 41542B52  3770            db 'AT+RFID'
     464944
0087 0D        3771            db 0x0D
0088 0A        3772            db 0x0A
0089 00        3773            db 0x00
008A           3774   __str_8:
008A 41542B44  3775            db 'AT+DVIDA0C4'
     56494441
     304334
0095 0D        3776            db 0x0D
0096 0A        3777            db 0x0A
0097 00        3778            db 0x00
0098           3779   __str_9:
0098 41542B52  3780            db 'AT+RFC'
     4643
009E 0D        3781            db 0x0D
009F 0A        3782            db 0x0A
00A0 00        3783            db 0x00
00A1           3784   __str_10:
00A1 41542B50  3785            db 'AT+POWE'
     4F5745
00A8 0D        3786            db 0x0D
00A9 0A        3787            db 0x0A
00AA 00        3788            db 0x00
00AB           3789   __str_11:
00AB 41542B43  3790            db 'AT+CLSS'
     4C5353
00B2 0D        3791            db 0x0D
00B3 0A        3792            db 0x0A
00B4 00        3793            db 0x00
00B5           3794   __str_12:
00B5 41542B56  3795            db 'AT+VER'
     4552
00BB 0D        3796            db 0x0D
00BC 0A        3797            db 0x0A
00BD 00        3798            db 0x00
00BE           3799   __str_13:
00BE 0A        3800            db 0x0A
00BF 0A        3801            db 0x0A
00C0 2D2D2D2D  3802            db '---- CONTROLLER SETUP COMPLETE ----'
     20434F4E
     54524F4C
     4C455220
     53455455
     5020434F
     4D504C45
     5445202D
     2D2D2D
00E3 0A        3803            db 0x0A
00E4 00        3804            db 0x00
00E5           3805   __str_14:
00E5 25346420  3806            db '%4d %3d'
     253364
00EC 0A        3807            db 0x0A
00ED 00        3808            db 0x00
00EE           3809   __str_15:
00EE 2564      3810            db '%d'
00F0 0A        3811            db 0x0A
00F1 00        3812            db 0x00
00F2           3813   
0003           3814            CSEG
0003           3815   
0003           3816   end
