0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Apr 02 16:41:01 2024
0000              5   ;--------------------------------------------------------
                  5   $name Controller
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _Generate_Pivot_Command_PARM_3
0000             27            public _Generate_Pivot_Command_PARM_2
0000             28            public _main
0000             29            public _printCharAsBinary
0000             30            public _getsn
0000             31            public _LCDprint
0000             32            public _LCD_4BIT
0000             33            public _WriteCommand
0000             34            public _WriteData
0000             35            public _LCD_byte
0000             36            public _LCD_pulse
0000             37            public _Wait_For_Calibration
0000             38            public _Weigh_Dual_Inputs
0000             39            public _Generate_Pivot_Command
0000             40            public _Generate_Motor_Command
0000             41            public _Check_Joystick_Button
0000             42            public _Voltage_to_Coordinate
0000             43            public _Package_Signed_int
0000             44            public _SendATCommand
0000             45            public _waitms_or_RI1
0000             46            public _RXU1
0000             47            public _getstr1
0000             48            public _getchar1_with_timeout
0000             49            public _getchar1
0000             50            public _sendstr2
0000             51            public _sendstr1
0000             52            public _putchar1
0000             53            public _UART1_Init
0000             54            public _waitms
0000             55            public _Timer3us
0000             56            public _Volts_at_Pin
0000             57            public _ADC_at_Pin
0000             58            public _InitPinADC
0000             59            public _InitADC
0000             60            public __c51_external_startup
0000             61            public _buff
0000             62            public _LCDprint_PARM_3
0000             63            public _mcmd
0000             64            public _mcmd2
0000             65            public _mcmd1
0000             66            public _rbuff
0000             67            public _tbuff
0000             68            public _t
0000             69            public _getsn_PARM_2
0000             70            public _LCDprint_PARM_2
0000             71            public _Weigh_Dual_Inputs_PARM_4
0000             72            public _Weigh_Dual_Inputs_PARM_3
0000             73            public _Weigh_Dual_Inputs_PARM_2
0000             74            public _Generate_Motor_Command_PARM_3
0000             75            public _Generate_Motor_Command_PARM_2
0000             76            public _InitPinADC_PARM_2
0000             77   ;--------------------------------------------------------
0000             78   ; Special Function Registers
0000             79   ;--------------------------------------------------------
0000             80   _ACC            DATA 0xe0
0000             81   _ADC0ASAH       DATA 0xb6
0000             82   _ADC0ASAL       DATA 0xb5
0000             83   _ADC0ASCF       DATA 0xa1
0000             84   _ADC0ASCT       DATA 0xc7
0000             85   _ADC0CF0        DATA 0xbc
0000             86   _ADC0CF1        DATA 0xb9
0000             87   _ADC0CF2        DATA 0xdf
0000             88   _ADC0CN0        DATA 0xe8
0000             89   _ADC0CN1        DATA 0xb2
0000             90   _ADC0CN2        DATA 0xb3
0000             91   _ADC0GTH        DATA 0xc4
0000             92   _ADC0GTL        DATA 0xc3
0000             93   _ADC0H          DATA 0xbe
0000             94   _ADC0L          DATA 0xbd
0000             95   _ADC0LTH        DATA 0xc6
0000             96   _ADC0LTL        DATA 0xc5
0000             97   _ADC0MX         DATA 0xbb
0000             98   _B              DATA 0xf0
0000             99   _CKCON0         DATA 0x8e
0000            100   _CKCON1         DATA 0xa6
0000            101   _CLEN0          DATA 0xc6
0000            102   _CLIE0          DATA 0xc7
0000            103   _CLIF0          DATA 0xe8
0000            104   _CLKSEL         DATA 0xa9
0000            105   _CLOUT0         DATA 0xd1
0000            106   _CLU0CF         DATA 0xb1
0000            107   _CLU0FN         DATA 0xaf
0000            108   _CLU0MX         DATA 0x84
0000            109   _CLU1CF         DATA 0xb3
0000            110   _CLU1FN         DATA 0xb2
0000            111   _CLU1MX         DATA 0x85
0000            112   _CLU2CF         DATA 0xb6
0000            113   _CLU2FN         DATA 0xb5
0000            114   _CLU2MX         DATA 0x91
0000            115   _CLU3CF         DATA 0xbf
0000            116   _CLU3FN         DATA 0xbe
0000            117   _CLU3MX         DATA 0xae
0000            118   _CMP0CN0        DATA 0x9b
0000            119   _CMP0CN1        DATA 0x99
0000            120   _CMP0MD         DATA 0x9d
0000            121   _CMP0MX         DATA 0x9f
0000            122   _CMP1CN0        DATA 0xbf
0000            123   _CMP1CN1        DATA 0xac
0000            124   _CMP1MD         DATA 0xab
0000            125   _CMP1MX         DATA 0xaa
0000            126   _CRC0CN0        DATA 0xce
0000            127   _CRC0CN1        DATA 0x86
0000            128   _CRC0CNT        DATA 0xd3
0000            129   _CRC0DAT        DATA 0xcb
0000            130   _CRC0FLIP       DATA 0xcf
0000            131   _CRC0IN         DATA 0xca
0000            132   _CRC0ST         DATA 0xd2
0000            133   _DAC0CF0        DATA 0x91
0000            134   _DAC0CF1        DATA 0x92
0000            135   _DAC0H          DATA 0x85
0000            136   _DAC0L          DATA 0x84
0000            137   _DAC1CF0        DATA 0x93
0000            138   _DAC1CF1        DATA 0x94
0000            139   _DAC1H          DATA 0x8a
0000            140   _DAC1L          DATA 0x89
0000            141   _DAC2CF0        DATA 0x95
0000            142   _DAC2CF1        DATA 0x96
0000            143   _DAC2H          DATA 0x8c
0000            144   _DAC2L          DATA 0x8b
0000            145   _DAC3CF0        DATA 0x9a
0000            146   _DAC3CF1        DATA 0x9c
0000            147   _DAC3H          DATA 0x8e
0000            148   _DAC3L          DATA 0x8d
0000            149   _DACGCF0        DATA 0x88
0000            150   _DACGCF1        DATA 0x98
0000            151   _DACGCF2        DATA 0xa2
0000            152   _DERIVID        DATA 0xad
0000            153   _DEVICEID       DATA 0xb5
0000            154   _DPH            DATA 0x83
0000            155   _DPL            DATA 0x82
0000            156   _EIE1           DATA 0xe6
0000            157   _EIE2           DATA 0xf3
0000            158   _EIP1           DATA 0xbb
0000            159   _EIP1H          DATA 0xee
0000            160   _EIP2           DATA 0xed
0000            161   _EIP2H          DATA 0xf6
0000            162   _EMI0CN         DATA 0xe7
0000            163   _FLKEY          DATA 0xb7
0000            164   _HFO0CAL        DATA 0xc7
0000            165   _HFO1CAL        DATA 0xd6
0000            166   _HFOCN          DATA 0xef
0000            167   _I2C0ADM        DATA 0xff
0000            168   _I2C0CN0        DATA 0xba
0000            169   _I2C0DIN        DATA 0xbc
0000            170   _I2C0DOUT       DATA 0xbb
0000            171   _I2C0FCN0       DATA 0xad
0000            172   _I2C0FCN1       DATA 0xab
0000            173   _I2C0FCT        DATA 0xf5
0000            174   _I2C0SLAD       DATA 0xbd
0000            175   _I2C0STAT       DATA 0xb9
0000            176   _IE             DATA 0xa8
0000            177   _IP             DATA 0xb8
0000            178   _IPH            DATA 0xf2
0000            179   _IT01CF         DATA 0xe4
0000            180   _LFO0CN         DATA 0xb1
0000            181   _P0             DATA 0x80
0000            182   _P0MASK         DATA 0xfe
0000            183   _P0MAT          DATA 0xfd
0000            184   _P0MDIN         DATA 0xf1
0000            185   _P0MDOUT        DATA 0xa4
0000            186   _P0SKIP         DATA 0xd4
0000            187   _P1             DATA 0x90
0000            188   _P1MASK         DATA 0xee
0000            189   _P1MAT          DATA 0xed
0000            190   _P1MDIN         DATA 0xf2
0000            191   _P1MDOUT        DATA 0xa5
0000            192   _P1SKIP         DATA 0xd5
0000            193   _P2             DATA 0xa0
0000            194   _P2MASK         DATA 0xfc
0000            195   _P2MAT          DATA 0xfb
0000            196   _P2MDIN         DATA 0xf3
0000            197   _P2MDOUT        DATA 0xa6
0000            198   _P2SKIP         DATA 0xcc
0000            199   _P3             DATA 0xb0
0000            200   _P3MDIN         DATA 0xf4
0000            201   _P3MDOUT        DATA 0x9c
0000            202   _PCA0CENT       DATA 0x9e
0000            203   _PCA0CLR        DATA 0x9c
0000            204   _PCA0CN0        DATA 0xd8
0000            205   _PCA0CPH0       DATA 0xfc
0000            206   _PCA0CPH1       DATA 0xea
0000            207   _PCA0CPH2       DATA 0xec
0000            208   _PCA0CPH3       DATA 0xf5
0000            209   _PCA0CPH4       DATA 0x85
0000            210   _PCA0CPH5       DATA 0xde
0000            211   _PCA0CPL0       DATA 0xfb
0000            212   _PCA0CPL1       DATA 0xe9
0000            213   _PCA0CPL2       DATA 0xeb
0000            214   _PCA0CPL3       DATA 0xf4
0000            215   _PCA0CPL4       DATA 0x84
0000            216   _PCA0CPL5       DATA 0xdd
0000            217   _PCA0CPM0       DATA 0xda
0000            218   _PCA0CPM1       DATA 0xdb
0000            219   _PCA0CPM2       DATA 0xdc
0000            220   _PCA0CPM3       DATA 0xae
0000            221   _PCA0CPM4       DATA 0xaf
0000            222   _PCA0CPM5       DATA 0xcc
0000            223   _PCA0H          DATA 0xfa
0000            224   _PCA0L          DATA 0xf9
0000            225   _PCA0MD         DATA 0xd9
0000            226   _PCA0POL        DATA 0x96
0000            227   _PCA0PWM        DATA 0xf7
0000            228   _PCON0          DATA 0x87
0000            229   _PCON1          DATA 0xcd
0000            230   _PFE0CN         DATA 0xc1
0000            231   _PRTDRV         DATA 0xf6
0000            232   _PSCTL          DATA 0x8f
0000            233   _PSTAT0         DATA 0xaa
0000            234   _PSW            DATA 0xd0
0000            235   _REF0CN         DATA 0xd1
0000            236   _REG0CN         DATA 0xc9
0000            237   _REVID          DATA 0xb6
0000            238   _RSTSRC         DATA 0xef
0000            239   _SBCON1         DATA 0x94
0000            240   _SBRLH1         DATA 0x96
0000            241   _SBRLL1         DATA 0x95
0000            242   _SBUF           DATA 0x99
0000            243   _SBUF0          DATA 0x99
0000            244   _SBUF1          DATA 0x92
0000            245   _SCON           DATA 0x98
0000            246   _SCON0          DATA 0x98
0000            247   _SCON1          DATA 0xc8
0000            248   _SFRPAGE        DATA 0xa7
0000            249   _SFRPGCN        DATA 0xbc
0000            250   _SFRSTACK       DATA 0xd7
0000            251   _SMB0ADM        DATA 0xd6
0000            252   _SMB0ADR        DATA 0xd7
0000            253   _SMB0CF         DATA 0xc1
0000            254   _SMB0CN0        DATA 0xc0
0000            255   _SMB0DAT        DATA 0xc2
0000            256   _SMB0FCN0       DATA 0xc3
0000            257   _SMB0FCN1       DATA 0xc4
0000            258   _SMB0FCT        DATA 0xef
0000            259   _SMB0RXLN       DATA 0xc5
0000            260   _SMB0TC         DATA 0xac
0000            261   _SMOD1          DATA 0x93
0000            262   _SP             DATA 0x81
0000            263   _SPI0CFG        DATA 0xa1
0000            264   _SPI0CKR        DATA 0xa2
0000            265   _SPI0CN0        DATA 0xf8
0000            266   _SPI0DAT        DATA 0xa3
0000            267   _SPI0FCN0       DATA 0x9a
0000            268   _SPI0FCN1       DATA 0x9b
0000            269   _SPI0FCT        DATA 0xf7
0000            270   _SPI0PCF        DATA 0xdf
0000            271   _TCON           DATA 0x88
0000            272   _TH0            DATA 0x8c
0000            273   _TH1            DATA 0x8d
0000            274   _TL0            DATA 0x8a
0000            275   _TL1            DATA 0x8b
0000            276   _TMOD           DATA 0x89
0000            277   _TMR2CN0        DATA 0xc8
0000            278   _TMR2CN1        DATA 0xfd
0000            279   _TMR2H          DATA 0xcf
0000            280   _TMR2L          DATA 0xce
0000            281   _TMR2RLH        DATA 0xcb
0000            282   _TMR2RLL        DATA 0xca
0000            283   _TMR3CN0        DATA 0x91
0000            284   _TMR3CN1        DATA 0xfe
0000            285   _TMR3H          DATA 0x95
0000            286   _TMR3L          DATA 0x94
0000            287   _TMR3RLH        DATA 0x93
0000            288   _TMR3RLL        DATA 0x92
0000            289   _TMR4CN0        DATA 0x98
0000            290   _TMR4CN1        DATA 0xff
0000            291   _TMR4H          DATA 0xa5
0000            292   _TMR4L          DATA 0xa4
0000            293   _TMR4RLH        DATA 0xa3
0000            294   _TMR4RLL        DATA 0xa2
0000            295   _TMR5CN0        DATA 0xc0
0000            296   _TMR5CN1        DATA 0xf1
0000            297   _TMR5H          DATA 0xd5
0000            298   _TMR5L          DATA 0xd4
0000            299   _TMR5RLH        DATA 0xd3
0000            300   _TMR5RLL        DATA 0xd2
0000            301   _UART0PCF       DATA 0xd9
0000            302   _UART1FCN0      DATA 0x9d
0000            303   _UART1FCN1      DATA 0xd8
0000            304   _UART1FCT       DATA 0xfa
0000            305   _UART1LIN       DATA 0x9e
0000            306   _UART1PCF       DATA 0xda
0000            307   _VDM0CN         DATA 0xff
0000            308   _WDTCN          DATA 0x97
0000            309   _XBR0           DATA 0xe1
0000            310   _XBR1           DATA 0xe2
0000            311   _XBR2           DATA 0xe3
0000            312   _XOSC0CN        DATA 0x86
0000            313   _DPTR           DATA 0x8382
0000            314   _TMR2RL         DATA 0xcbca
0000            315   _TMR3RL         DATA 0x9392
0000            316   _TMR4RL         DATA 0xa3a2
0000            317   _TMR5RL         DATA 0xd3d2
0000            318   _TMR0           DATA 0x8c8a
0000            319   _TMR1           DATA 0x8d8b
0000            320   _TMR2           DATA 0xcfce
0000            321   _TMR3           DATA 0x9594
0000            322   _TMR4           DATA 0xa5a4
0000            323   _TMR5           DATA 0xd5d4
0000            324   _SBRL1          DATA 0x9695
0000            325   _PCA0           DATA 0xfaf9
0000            326   _PCA0CP0        DATA 0xfcfb
0000            327   _PCA0CP1        DATA 0xeae9
0000            328   _PCA0CP2        DATA 0xeceb
0000            329   _PCA0CP3        DATA 0xf5f4
0000            330   _PCA0CP4        DATA 0x8584
0000            331   _PCA0CP5        DATA 0xdedd
0000            332   _ADC0ASA        DATA 0xb6b5
0000            333   _ADC0GT         DATA 0xc4c3
0000            334   _ADC0           DATA 0xbebd
0000            335   _ADC0LT         DATA 0xc6c5
0000            336   _DAC0           DATA 0x8584
0000            337   _DAC1           DATA 0x8a89
0000            338   _DAC2           DATA 0x8c8b
0000            339   _DAC3           DATA 0x8e8d
0000            340   ;--------------------------------------------------------
0000            341   ; special function bits
0000            342   ;--------------------------------------------------------
0000            343   _ACC_0          BIT 0xe0
0000            344   _ACC_1          BIT 0xe1
0000            345   _ACC_2          BIT 0xe2
0000            346   _ACC_3          BIT 0xe3
0000            347   _ACC_4          BIT 0xe4
0000            348   _ACC_5          BIT 0xe5
0000            349   _ACC_6          BIT 0xe6
0000            350   _ACC_7          BIT 0xe7
0000            351   _TEMPE          BIT 0xe8
0000            352   _ADGN0          BIT 0xe9
0000            353   _ADGN1          BIT 0xea
0000            354   _ADWINT         BIT 0xeb
0000            355   _ADBUSY         BIT 0xec
0000            356   _ADINT          BIT 0xed
0000            357   _IPOEN          BIT 0xee
0000            358   _ADEN           BIT 0xef
0000            359   _B_0            BIT 0xf0
0000            360   _B_1            BIT 0xf1
0000            361   _B_2            BIT 0xf2
0000            362   _B_3            BIT 0xf3
0000            363   _B_4            BIT 0xf4
0000            364   _B_5            BIT 0xf5
0000            365   _B_6            BIT 0xf6
0000            366   _B_7            BIT 0xf7
0000            367   _C0FIF          BIT 0xe8
0000            368   _C0RIF          BIT 0xe9
0000            369   _C1FIF          BIT 0xea
0000            370   _C1RIF          BIT 0xeb
0000            371   _C2FIF          BIT 0xec
0000            372   _C2RIF          BIT 0xed
0000            373   _C3FIF          BIT 0xee
0000            374   _C3RIF          BIT 0xef
0000            375   _D1SRC0         BIT 0x88
0000            376   _D1SRC1         BIT 0x89
0000            377   _D1AMEN         BIT 0x8a
0000            378   _D01REFSL       BIT 0x8b
0000            379   _D3SRC0         BIT 0x8c
0000            380   _D3SRC1         BIT 0x8d
0000            381   _D3AMEN         BIT 0x8e
0000            382   _D23REFSL       BIT 0x8f
0000            383   _D0UDIS         BIT 0x98
0000            384   _D1UDIS         BIT 0x99
0000            385   _D2UDIS         BIT 0x9a
0000            386   _D3UDIS         BIT 0x9b
0000            387   _EX0            BIT 0xa8
0000            388   _ET0            BIT 0xa9
0000            389   _EX1            BIT 0xaa
0000            390   _ET1            BIT 0xab
0000            391   _ES0            BIT 0xac
0000            392   _ET2            BIT 0xad
0000            393   _ESPI0          BIT 0xae
0000            394   _EA             BIT 0xaf
0000            395   _PX0            BIT 0xb8
0000            396   _PT0            BIT 0xb9
0000            397   _PX1            BIT 0xba
0000            398   _PT1            BIT 0xbb
0000            399   _PS0            BIT 0xbc
0000            400   _PT2            BIT 0xbd
0000            401   _PSPI0          BIT 0xbe
0000            402   _P0_0           BIT 0x80
0000            403   _P0_1           BIT 0x81
0000            404   _P0_2           BIT 0x82
0000            405   _P0_3           BIT 0x83
0000            406   _P0_4           BIT 0x84
0000            407   _P0_5           BIT 0x85
0000            408   _P0_6           BIT 0x86
0000            409   _P0_7           BIT 0x87
0000            410   _P1_0           BIT 0x90
0000            411   _P1_1           BIT 0x91
0000            412   _P1_2           BIT 0x92
0000            413   _P1_3           BIT 0x93
0000            414   _P1_4           BIT 0x94
0000            415   _P1_5           BIT 0x95
0000            416   _P1_6           BIT 0x96
0000            417   _P1_7           BIT 0x97
0000            418   _P2_0           BIT 0xa0
0000            419   _P2_1           BIT 0xa1
0000            420   _P2_2           BIT 0xa2
0000            421   _P2_3           BIT 0xa3
0000            422   _P2_4           BIT 0xa4
0000            423   _P2_5           BIT 0xa5
0000            424   _P2_6           BIT 0xa6
0000            425   _P3_0           BIT 0xb0
0000            426   _P3_1           BIT 0xb1
0000            427   _P3_2           BIT 0xb2
0000            428   _P3_3           BIT 0xb3
0000            429   _P3_4           BIT 0xb4
0000            430   _P3_7           BIT 0xb7
0000            431   _CCF0           BIT 0xd8
0000            432   _CCF1           BIT 0xd9
0000            433   _CCF2           BIT 0xda
0000            434   _CCF3           BIT 0xdb
0000            435   _CCF4           BIT 0xdc
0000            436   _CCF5           BIT 0xdd
0000            437   _CR             BIT 0xde
0000            438   _CF             BIT 0xdf
0000            439   _PARITY         BIT 0xd0
0000            440   _F1             BIT 0xd1
0000            441   _OV             BIT 0xd2
0000            442   _RS0            BIT 0xd3
0000            443   _RS1            BIT 0xd4
0000            444   _F0             BIT 0xd5
0000            445   _AC             BIT 0xd6
0000            446   _CY             BIT 0xd7
0000            447   _RI             BIT 0x98
0000            448   _TI             BIT 0x99
0000            449   _RB8            BIT 0x9a
0000            450   _TB8            BIT 0x9b
0000            451   _REN            BIT 0x9c
0000            452   _CE             BIT 0x9d
0000            453   _SMODE          BIT 0x9e
0000            454   _RI1            BIT 0xc8
0000            455   _TI1            BIT 0xc9
0000            456   _RBX1           BIT 0xca
0000            457   _TBX1           BIT 0xcb
0000            458   _REN1           BIT 0xcc
0000            459   _PERR1          BIT 0xcd
0000            460   _OVR1           BIT 0xce
0000            461   _SI             BIT 0xc0
0000            462   _ACK            BIT 0xc1
0000            463   _ARBLOST        BIT 0xc2
0000            464   _ACKRQ          BIT 0xc3
0000            465   _STO            BIT 0xc4
0000            466   _STA            BIT 0xc5
0000            467   _TXMODE         BIT 0xc6
0000            468   _MASTER         BIT 0xc7
0000            469   _SPIEN          BIT 0xf8
0000            470   _TXNF           BIT 0xf9
0000            471   _NSSMD0         BIT 0xfa
0000            472   _NSSMD1         BIT 0xfb
0000            473   _RXOVRN         BIT 0xfc
0000            474   _MODF           BIT 0xfd
0000            475   _WCOL           BIT 0xfe
0000            476   _SPIF           BIT 0xff
0000            477   _IT0            BIT 0x88
0000            478   _IE0            BIT 0x89
0000            479   _IT1            BIT 0x8a
0000            480   _IE1            BIT 0x8b
0000            481   _TR0            BIT 0x8c
0000            482   _TF0            BIT 0x8d
0000            483   _TR1            BIT 0x8e
0000            484   _TF1            BIT 0x8f
0000            485   _T2XCLK0        BIT 0xc8
0000            486   _T2XCLK1        BIT 0xc9
0000            487   _TR2            BIT 0xca
0000            488   _T2SPLIT        BIT 0xcb
0000            489   _TF2CEN         BIT 0xcc
0000            490   _TF2LEN         BIT 0xcd
0000            491   _TF2L           BIT 0xce
0000            492   _TF2H           BIT 0xcf
0000            493   _T4XCLK0        BIT 0x98
0000            494   _T4XCLK1        BIT 0x99
0000            495   _TR4            BIT 0x9a
0000            496   _T4SPLIT        BIT 0x9b
0000            497   _TF4CEN         BIT 0x9c
0000            498   _TF4LEN         BIT 0x9d
0000            499   _TF4L           BIT 0x9e
0000            500   _TF4H           BIT 0x9f
0000            501   _T5XCLK0        BIT 0xc0
0000            502   _T5XCLK1        BIT 0xc1
0000            503   _TR5            BIT 0xc2
0000            504   _T5SPLIT        BIT 0xc3
0000            505   _TF5CEN         BIT 0xc4
0000            506   _TF5LEN         BIT 0xc5
0000            507   _TF5L           BIT 0xc6
0000            508   _TF5H           BIT 0xc7
0000            509   _RIE            BIT 0xd8
0000            510   _RXTO0          BIT 0xd9
0000            511   _RXTO1          BIT 0xda
0000            512   _RFRQ           BIT 0xdb
0000            513   _TIE            BIT 0xdc
0000            514   _TXHOLD         BIT 0xdd
0000            515   _TXNF1          BIT 0xde
0000            516   _TFRQ           BIT 0xdf
0000            517   ;--------------------------------------------------------
0000            518   ; overlayable register banks
0000            519   ;--------------------------------------------------------
0000            520            rbank0 segment data overlay
0000            521   ;--------------------------------------------------------
0000            522   ; internal ram data
0000            523   ;--------------------------------------------------------
0000            524            rseg R_DSEG
0000            525   _InitPinADC_PARM_2:
0000            526            ds 1
0001            527   _Generate_Motor_Command_PARM_2:
0001            528            ds 2
0003            529   _Generate_Motor_Command_PARM_3:
0003            530            ds 2
0005            531   _Generate_Motor_Command_sloc0_1_0:
0005            532            ds 3
0008            533   _Weigh_Dual_Inputs_PARM_2:
0008            534            ds 3
000B            535   _Weigh_Dual_Inputs_PARM_3:
000B            536            ds 3
000E            537   _Weigh_Dual_Inputs_PARM_4:
000E            538            ds 4
0012            539   _Weigh_Dual_Inputs_mout_1_144:
0012            540            ds 3
0015            541   _Weigh_Dual_Inputs_sloc0_1_0:
0015            542            ds 2
0017            543   _Weigh_Dual_Inputs_sloc1_1_0:
0017            544            ds 3
001A            545   _Weigh_Dual_Inputs_sloc2_1_0:
001A            546            ds 4
001E            547   _Weigh_Dual_Inputs_sloc3_1_0:
001E            548            ds 3
0021            549   _LCDprint_PARM_2:
0021            550            ds 1
0022            551   _getsn_PARM_2:
0022            552            ds 2
0024            553   _getsn_buff_1_162:
0024            554            ds 3
0027            555   _getsn_sloc0_1_0:
0027            556            ds 2
0029            557   _t:
0029            558            ds 2
002B            559   _main_vx_right_1_171:
002B            560            ds 4
002F            561   _main_sw_right_1_171:
002F            562            ds 4
0033            563   _main_vx_left_1_171:
0033            564            ds 4
0037            565   _main_vy_left_1_171:
0037            566            ds 4
003B            567   _main_sw_left_1_171:
003B            568            ds 4
003F            569   _main_vx1_1_171:
003F            570            ds 2
0041            571   _main_vy1_1_171:
0041            572            ds 2
0043            573   ;--------------------------------------------------------
0043            574   ; overlayable items in internal ram 
0043            575   ;--------------------------------------------------------
0000            576            rseg    R_OSEG
0000            577            rseg    R_OSEG
0000            578            rseg    R_OSEG
0000            579            rseg    R_OSEG
0000            580            rseg    R_OSEG
0000            581            rseg    R_OSEG
0000            582   _Generate_Pivot_Command_PARM_2:
0000            583            ds 2
0002            584   _Generate_Pivot_Command_PARM_3:
0002            585            ds 2
0004            586   ;--------------------------------------------------------
0004            587   ; indirectly addressable internal ram data
0004            588   ;--------------------------------------------------------
0000            589            rseg R_ISEG
0000            590   _tbuff:
0000            591            ds 20
0014            592   _rbuff:
0014            593            ds 20
0028            594   _mcmd1:
0028            595            ds 4
002C            596   _mcmd2:
002C            597            ds 4
0030            598   _mcmd:
0030            599            ds 4
0034            600   ;--------------------------------------------------------
0034            601   ; absolute internal ram data
0034            602   ;--------------------------------------------------------
0000            603            DSEG
0000            604   ;--------------------------------------------------------
0000            605   ; bit data
0000            606   ;--------------------------------------------------------
0000            607            rseg R_BSEG
0000            608   _LCDprint_PARM_3:
0000            609            DBIT    1
0001            610   ;--------------------------------------------------------
0001            611   ; paged external ram data
0001            612   ;--------------------------------------------------------
0000            613            rseg R_PSEG
0000            614   ;--------------------------------------------------------
0000            615   ; external ram data
0000            616   ;--------------------------------------------------------
0000            617            rseg R_XSEG
0000            618   _buff:
0000            619            ds 20
0014            620   ;--------------------------------------------------------
0014            621   ; absolute external ram data
0014            622   ;--------------------------------------------------------
0000            623            XSEG
0000            624   ;--------------------------------------------------------
0000            625   ; external initialized ram data
0000            626   ;--------------------------------------------------------
0000            627            rseg R_IXSEG
0000            628            rseg R_HOME
0000            629            rseg R_GSINIT
0000            630            rseg R_CSEG
0000            631   ;--------------------------------------------------------
0000            632   ; Reset entry point and interrupt vectors
0000            633   ;--------------------------------------------------------
0000            634            CSEG at 0x0000
0000 020000     635            ljmp    _crt0
0003            636   ;--------------------------------------------------------
0003            637   ; global & static initialisations
0003            638   ;--------------------------------------------------------
0000            639            rseg R_HOME
0000            640            rseg R_GSINIT
0000            641            rseg R_GSINIT
0000            642   ;--------------------------------------------------------
0000            643   ; data variables initialization
0000            644   ;--------------------------------------------------------
0000            645            rseg R_DINIT
0000            646   ;        Controller.c:5: int t = 0; //global variable, used to reduce the speed for timer4 isr
0000 E4         647            clr     a
0001 F560       648            mov     _t,a
0003 F561       649            mov     (_t + 1),a
0005            650            ; The linker places a 'ret' at the end of segment R_DINIT.
0005            651   ;--------------------------------------------------------
0005            652   ; code
0005            653   ;--------------------------------------------------------
0000            654            rseg R_CSEG
0000            655   ;------------------------------------------------------------
0000            656   ;Allocation info for local variables in function '_c51_external_startup'
0000            657   ;------------------------------------------------------------
0000            658   ;------------------------------------------------------------
0000            659   ;        ControllerCore.h:31: char _c51_external_startup (void)
0000            660   ;        -----------------------------------------
0000            661   ;         function _c51_external_startup
0000            662   ;        -----------------------------------------
0000            663   __c51_external_startup:
0000            664            using   0
0000            665   ;        ControllerCore.h:34: SFRPAGE = 0x00;
0000 75A700     666            mov     _SFRPAGE,#0x00
0003            667   ;        ControllerCore.h:35: WDTCN = 0xDE; //First key
0003 7597DE     668            mov     _WDTCN,#0xDE
0006            669   ;        ControllerCore.h:36: WDTCN = 0xAD; //Second key
0006 7597AD     670            mov     _WDTCN,#0xAD
0009            671   ;        ControllerCore.h:38: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     672            mov     _VDM0CN,#0x80
000C            673   ;        ControllerCore.h:39: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     674            mov     _RSTSRC,#0x06
000F            675   ;        ControllerCore.h:46: SFRPAGE = 0x10;
000F 75A710     676            mov     _SFRPAGE,#0x10
0012            677   ;        ControllerCore.h:47: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     678            mov     _PFE0CN,#0x20
0015            679   ;        ControllerCore.h:48: SFRPAGE = 0x00;
0015 75A700     680            mov     _SFRPAGE,#0x00
0018            681   ;        ControllerCore.h:69: CLKSEL = 0x00;
0018 75A900     682            mov     _CLKSEL,#0x00
001B            683   ;        ControllerCore.h:70: CLKSEL = 0x00;
001B 75A900     684            mov     _CLKSEL,#0x00
001E            685   ;        ControllerCore.h:71: while ((CLKSEL & 0x80) == 0);
001E            686   L002001?:
001E E5A9       687            mov     a,_CLKSEL
0020 30E7B0     688            jnb     acc.7,L002001?
0023            689   ;        ControllerCore.h:72: CLKSEL = 0x03;
0023 75A903     690            mov     _CLKSEL,#0x03
0026            691   ;        ControllerCore.h:73: CLKSEL = 0x03;
0026 75A903     692            mov     _CLKSEL,#0x03
0029            693   ;        ControllerCore.h:74: while ((CLKSEL & 0x80) == 0);
0029            694   L002004?:
0029 E5A9       695            mov     a,_CLKSEL
002B 30E770     696            jnb     acc.7,L002004?
002E            697   ;        ControllerCore.h:79: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     698            orl     _P0MDOUT,#0x11
0031            699   ;        ControllerCore.h:80: P3MDOUT |= 0x08; // P2.1 in push-pull mode
0031 439C08     700            orl     _P3MDOUT,#0x08
0034            701   ;        ControllerCore.h:81: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     702            mov     _XBR0,#0x01
0037            703   ;        ControllerCore.h:82: XBR1     = 0X00;
0037 75E200     704            mov     _XBR1,#0x00
003A            705   ;        ControllerCore.h:83: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     706            mov     _XBR2,#0x41
003D            707   ;        ControllerCore.h:89: SCON0 = 0x10;
003D 759810     708            mov     _SCON0,#0x10
0040            709   ;        ControllerCore.h:90: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     710            mov     _TH1,#0xE6
0043            711   ;        ControllerCore.h:91: TL1 = TH1;      // Init Timer1
0043 858D8B     712            mov     _TL1,_TH1
0046            713   ;        ControllerCore.h:92: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     714            anl     _TMOD,#0x0F
0049            715   ;        ControllerCore.h:93: TMOD |=  0x20;                       
0049 438920     716            orl     _TMOD,#0x20
004C            717   ;        ControllerCore.h:94: TR1 = 1; // START Timer1
004C D28E       718            setb    _TR1
004E            719   ;        ControllerCore.h:95: TI = 1;  // Indicate TX0 ready
004E D299       720            setb    _TI
0050            721   ;        ControllerCore.h:98: SFRPAGE=0x10;
0050 75A710     722            mov     _SFRPAGE,#0x10
0053            723   ;        ControllerCore.h:99: TMR4CN0=0x00;   // Stop Timer4; Clear TF4; WARNING: lives in SFR page 0x10
0053 759800     724            mov     _TMR4CN0,#0x00
0056            725   ;        ControllerCore.h:100: CKCON1|=0b_0000_0001; // Timer 4 uses the system clock
0056 43A601     726            orl     _CKCON1,#0x01
0059            727   ;        ControllerCore.h:101: TMR4RL=(0x10000L-(SYSCLK/(2*TIMER_4_FREQ))); // Initialize reload value
0059 75A260     728            mov     _TMR4RL,#0x60
005C 75A373     729            mov     (_TMR4RL >> 8),#0x73
005F            730   ;        ControllerCore.h:102: TMR4=0xffff;   // Set to reload immediately
005F 75A4FF     731            mov     _TMR4,#0xFF
0062 75A5FF     732            mov     (_TMR4 >> 8),#0xFF
0065            733   ;        ControllerCore.h:103: EIE2|=0b_0000_0100;     // Enable Timer4 interrupts
0065 43F304     734            orl     _EIE2,#0x04
0068            735   ;        ControllerCore.h:104: TR4=1;
0068 D29A       736            setb    _TR4
006A            737   ;        ControllerCore.h:106: SFRPAGE = 0x00;
006A 75A700     738            mov     _SFRPAGE,#0x00
006D            739   ;        ControllerCore.h:108: EA=1; // Enable interrupts
006D D2AF       740            setb    _EA
006F            741   ;        ControllerCore.h:109: return 0;
006F 758200     742            mov     dpl,#0x00
0072 22         743            ret
0073            744   ;------------------------------------------------------------
0073            745   ;Allocation info for local variables in function 'InitADC'
0073            746   ;------------------------------------------------------------
0073            747   ;------------------------------------------------------------
0073            748   ;        ControllerCore.h:112: void InitADC (void)
0073            749   ;        -----------------------------------------
0073            750   ;         function InitADC
0073            751   ;        -----------------------------------------
0073            752   _InitADC:
0073            753   ;        ControllerCore.h:114: SFRPAGE = 0x00;
0073 75A700     754            mov     _SFRPAGE,#0x00
0076            755   ;        ControllerCore.h:115: ADEN=0; // Disable ADC
0076 C2EF       756            clr     _ADEN
0078            757   ;        ControllerCore.h:120: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0078 75B280     758            mov     _ADC0CN1,#0x80
007B            759   ;        ControllerCore.h:124: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
007B 75BC20     760            mov     _ADC0CF0,#0x20
007E            761   ;        ControllerCore.h:128: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
007E 75B91E     762            mov     _ADC0CF1,#0x1E
0081            763   ;        ControllerCore.h:137: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0081 75E800     764            mov     _ADC0CN0,#0x00
0084            765   ;        ControllerCore.h:142: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0084 75DF3F     766            mov     _ADC0CF2,#0x3F
0087            767   ;        ControllerCore.h:146: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0087 75B300     768            mov     _ADC0CN2,#0x00
008A            769   ;        ControllerCore.h:148: ADEN=1; // Enable ADC
008A D2EF       770            setb    _ADEN
008C 22         771            ret
008D            772   ;------------------------------------------------------------
008D            773   ;Allocation info for local variables in function 'InitPinADC'
008D            774   ;------------------------------------------------------------
008D            775   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
008D            776   ;portno                    Allocated to registers r2 
008D            777   ;mask                      Allocated to registers r3 
008D            778   ;------------------------------------------------------------
008D            779   ;        ControllerCore.h:151: void InitPinADC (unsigned char portno, unsigned char pin_num)
008D            780   ;        -----------------------------------------
008D            781   ;         function InitPinADC
008D            782   ;        -----------------------------------------
008D            783   _InitPinADC:
008D AA82       784            mov     r2,dpl
008F            785   ;        ControllerCore.h:155: mask=1<<pin_num;
008F 8560F0     786            mov     b,_InitPinADC_PARM_2
0092 05F0       787            inc     b
0094 7401       788            mov     a,#0x01
0096 8000       789            sjmp    L004013?
0098            790   L004011?:
0098 25E0       791            add     a,acc
009A            792   L004013?:
009A D5F0F0     793            djnz    b,L004011?
009D FB         794            mov     r3,a
009E            795   ;        ControllerCore.h:157: SFRPAGE = 0x20;
009E 75A720     796            mov     _SFRPAGE,#0x20
00A1            797   ;        ControllerCore.h:158: switch (portno)
00A1 BA0070     798            cjne    r2,#0x00,L004014?
00A4 8000       799            sjmp    L004001?
00A6            800   L004014?:
00A6 BA01F0     801            cjne    r2,#0x01,L004015?
00A9 8000       802            sjmp    L004002?
00AB            803   L004015?:
00AB            804   ;        ControllerCore.h:160: case 0:
00AB BA0230     805            cjne    r2,#0x02,L004005?
00AE 8000       806            sjmp    L004003?
00B0            807   L004001?:
00B0            808   ;        ControllerCore.h:161: P0MDIN &= (~mask); // Set pin as analog input
00B0 EB         809            mov     a,r3
00B1 F4         810            cpl     a
00B2 FC         811            mov     r4,a
00B3 52F1       812            anl     _P0MDIN,a
00B5            813   ;        ControllerCore.h:162: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00B5 EB         814            mov     a,r3
00B6 42D4       815            orl     _P0SKIP,a
00B8            816   ;        ControllerCore.h:163: break;
00B8            817   ;        ControllerCore.h:164: case 1:
00B8 8000       818            sjmp    L004005?
00BA            819   L004002?:
00BA            820   ;        ControllerCore.h:165: P1MDIN &= (~mask); // Set pin as analog input
00BA EB         821            mov     a,r3
00BB F4         822            cpl     a
00BC FC         823            mov     r4,a
00BD 52F2       824            anl     _P1MDIN,a
00BF            825   ;        ControllerCore.h:166: P1SKIP |= mask; // Skip Crossbar decoding for this pin
00BF EB         826            mov     a,r3
00C0 42D5       827            orl     _P1SKIP,a
00C2            828   ;        ControllerCore.h:167: break;
00C2            829   ;        ControllerCore.h:168: case 2:
00C2 8000       830            sjmp    L004005?
00C4            831   L004003?:
00C4            832   ;        ControllerCore.h:169: P2MDIN &= (~mask); // Set pin as analog input
00C4 EB         833            mov     a,r3
00C5 F4         834            cpl     a
00C6 FC         835            mov     r4,a
00C7 52F3       836            anl     _P2MDIN,a
00C9            837   ;        ControllerCore.h:170: P2SKIP |= mask; // Skip Crossbar decoding for this pin
00C9 EB         838            mov     a,r3
00CA 42CC       839            orl     _P2SKIP,a
00CC            840   ;        ControllerCore.h:174: }
00CC            841   L004005?:
00CC            842   ;        ControllerCore.h:175: SFRPAGE = 0x00;
00CC 75A700     843            mov     _SFRPAGE,#0x00
00CF            844   ;        ControllerCore.h:176: printf("Initialized ADC at Pin %d_%d\n",portno,pin_num);
00CF AB60       845            mov     r3,_InitPinADC_PARM_2
00D1 7C00       846            mov     r4,#0x00
00D3 7D00       847            mov     r5,#0x00
00D5 C003       848            push    ar3
00D7 C004       849            push    ar4
00D9 C002       850            push    ar2
00DB C005       851            push    ar5
00DD 7430       852            mov     a,#__str_0
00DF C0E0       853            push    acc
00E1 7457       854            mov     a,#(__str_0 >> 8)
00E3 C0E0       855            push    acc
00E5 7480       856            mov     a,#0x80
00E7 C0E0       857            push    acc
00E9 120000     858            lcall   _printf
00EC E581       859            mov     a,sp
00EE 24F9       860            add     a,#0xf9
00F0 F581       861            mov     sp,a
00F2 22         862            ret
00F3            863   ;------------------------------------------------------------
00F3            864   ;Allocation info for local variables in function 'ADC_at_Pin'
00F3            865   ;------------------------------------------------------------
00F3            866   ;pin                       Allocated to registers 
00F3            867   ;------------------------------------------------------------
00F3            868   ;        ControllerCore.h:179: unsigned int ADC_at_Pin(unsigned char pin)
00F3            869   ;        -----------------------------------------
00F3            870   ;         function ADC_at_Pin
00F3            871   ;        -----------------------------------------
00F3            872   _ADC_at_Pin:
00F3 8582BB     873            mov     _ADC0MX,dpl
00F6            874   ;        ControllerCore.h:182: ADINT = 0;
00F6 C2ED       875            clr     _ADINT
00F8            876   ;        ControllerCore.h:183: ADBUSY = 1;     // Convert voltage at the pin
00F8 D2EC       877            setb    _ADBUSY
00FA            878   ;        ControllerCore.h:184: while (!ADINT); // Wait for conversion to complete
00FA            879   L005001?:
00FA 30ED50     880            jnb     _ADINT,L005001?
00FD            881   ;        ControllerCore.h:185: return (ADC0);
00FD 85BD82     882            mov     dpl,_ADC0
0100 85BE83     883            mov     dph,(_ADC0 >> 8)
0103 22         884            ret
0104            885   ;------------------------------------------------------------
0104            886   ;Allocation info for local variables in function 'Volts_at_Pin'
0104            887   ;------------------------------------------------------------
0104            888   ;pin                       Allocated to registers r2 
0104            889   ;------------------------------------------------------------
0104            890   ;        ControllerCore.h:188: float Volts_at_Pin(unsigned char pin)
0104            891   ;        -----------------------------------------
0104            892   ;         function Volts_at_Pin
0104            893   ;        -----------------------------------------
0104            894   _Volts_at_Pin:
0104            895   ;        ControllerCore.h:190: return ((ADC_at_Pin(pin)*VDD)/16383.0);
0104 120000     896            lcall   _ADC_at_Pin
0107 120000     897            lcall   ___uint2fs
010A AA82       898            mov     r2,dpl
010C AB83       899            mov     r3,dph
010E ACF0       900            mov     r4,b
0110 FD         901            mov     r5,a
0111 C002       902            push    ar2
0113 C003       903            push    ar3
0115 C004       904            push    ar4
0117 C005       905            push    ar5
0119 906C8B     906            mov     dptr,#0x6C8B
011C 75F053     907            mov     b,#0x53
011F 7440       908            mov     a,#0x40
0121 120000     909            lcall   ___fsmul
0124 AA82       910            mov     r2,dpl
0126 AB83       911            mov     r3,dph
0128 ACF0       912            mov     r4,b
012A FD         913            mov     r5,a
012B E581       914            mov     a,sp
012D 24FC       915            add     a,#0xfc
012F F581       916            mov     sp,a
0131 E4         917            clr     a
0132 C0E0       918            push    acc
0134 74FC       919            mov     a,#0xFC
0136 C0E0       920            push    acc
0138 747F       921            mov     a,#0x7F
013A C0E0       922            push    acc
013C 7446       923            mov     a,#0x46
013E C0E0       924            push    acc
0140 8A82       925            mov     dpl,r2
0142 8B83       926            mov     dph,r3
0144 8CF0       927            mov     b,r4
0146 ED         928            mov     a,r5
0147 120000     929            lcall   ___fsdiv
014A AA82       930            mov     r2,dpl
014C AB83       931            mov     r3,dph
014E ACF0       932            mov     r4,b
0150 FD         933            mov     r5,a
0151 E581       934            mov     a,sp
0153 24FC       935            add     a,#0xfc
0155 F581       936            mov     sp,a
0157 8A82       937            mov     dpl,r2
0159 8B83       938            mov     dph,r3
015B 8CF0       939            mov     b,r4
015D ED         940            mov     a,r5
015E 22         941            ret
015F            942   ;------------------------------------------------------------
015F            943   ;Allocation info for local variables in function 'Timer3us'
015F            944   ;------------------------------------------------------------
015F            945   ;us                        Allocated to registers r2 
015F            946   ;i                         Allocated to registers r3 
015F            947   ;------------------------------------------------------------
015F            948   ;        ControllerCore.h:194: void Timer3us(unsigned char us)
015F            949   ;        -----------------------------------------
015F            950   ;         function Timer3us
015F            951   ;        -----------------------------------------
015F            952   _Timer3us:
015F AA82       953            mov     r2,dpl
0161            954   ;        ControllerCore.h:199: CKCON0|=0b_0100_0000;
0161 438E40     955            orl     _CKCON0,#0x40
0164            956   ;        ControllerCore.h:201: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0164 7592B8     957            mov     _TMR3RL,#0xB8
0167 7593FF     958            mov     (_TMR3RL >> 8),#0xFF
016A            959   ;        ControllerCore.h:202: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
016A 859294     960            mov     _TMR3,_TMR3RL
016D 859395     961            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0170            962   ;        ControllerCore.h:204: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0170 759104     963            mov     _TMR3CN0,#0x04
0173            964   ;        ControllerCore.h:205: for (i = 0; i < us; i++)       // Count <us> overflows
0173 7B00       965            mov     r3,#0x00
0175            966   L007004?:
0175 C3         967            clr     c
0176 EB         968            mov     a,r3
0177 9A         969            subb    a,r2
0178 5000       970            jnc     L007007?
017A            971   ;        ControllerCore.h:207: while (!(TMR3CN0 & 0x80));  // Wait for overflow
017A            972   L007001?:
017A E591       973            mov     a,_TMR3CN0
017C 30E790     974            jnb     acc.7,L007001?
017F            975   ;        ControllerCore.h:208: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
017F 53917F     976            anl     _TMR3CN0,#0x7F
0182            977   ;        ControllerCore.h:205: for (i = 0; i < us; i++)       // Count <us> overflows
0182 0B         978            inc     r3
0183 8000       979            sjmp    L007004?
0185            980   L007007?:
0185            981   ;        ControllerCore.h:210: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0185 759100     982            mov     _TMR3CN0,#0x00
0188 22         983            ret
0189            984   ;------------------------------------------------------------
0189            985   ;Allocation info for local variables in function 'waitms'
0189            986   ;------------------------------------------------------------
0189            987   ;ms                        Allocated to registers r2 r3 
0189            988   ;j                         Allocated to registers r4 r5 
0189            989   ;k                         Allocated to registers r6 
0189            990   ;------------------------------------------------------------
0189            991   ;        ControllerCore.h:213: void waitms (unsigned int ms)
0189            992   ;        -----------------------------------------
0189            993   ;         function waitms
0189            994   ;        -----------------------------------------
0189            995   _waitms:
0189 AA82       996            mov     r2,dpl
018B AB83       997            mov     r3,dph
018D            998   ;        ControllerCore.h:217: for(j=0; j<ms; j++)
018D 7C00       999            mov     r4,#0x00
018F 7D00      1000            mov     r5,#0x00
0191           1001   L008005?:
0191 C3        1002            clr     c
0192 EC        1003            mov     a,r4
0193 9A        1004            subb    a,r2
0194 ED        1005            mov     a,r5
0195 9B        1006            subb    a,r3
0196 5000      1007            jnc     L008009?
0198           1008   ;        ControllerCore.h:218: for (k=0; k<4; k++) Timer3us(250);
0198 7E00      1009            mov     r6,#0x00
019A           1010   L008001?:
019A BE0410    1011            cjne    r6,#0x04,L008018?
019D           1012   L008018?:
019D 5000      1013            jnc     L008007?
019F 7582FA    1014            mov     dpl,#0xFA
01A2 C002      1015            push    ar2
01A4 C003      1016            push    ar3
01A6 C004      1017            push    ar4
01A8 C005      1018            push    ar5
01AA C006      1019            push    ar6
01AC 120000    1020            lcall   _Timer3us
01AF D006      1021            pop     ar6
01B1 D005      1022            pop     ar5
01B3 D004      1023            pop     ar4
01B5 D003      1024            pop     ar3
01B7 D002      1025            pop     ar2
01B9 0E        1026            inc     r6
01BA 8000      1027            sjmp    L008001?
01BC           1028   L008007?:
01BC           1029   ;        ControllerCore.h:217: for(j=0; j<ms; j++)
01BC 0C        1030            inc     r4
01BD BC0090    1031            cjne    r4,#0x00,L008005?
01C0 0D        1032            inc     r5
01C1 8000      1033            sjmp    L008005?
01C3           1034   L008009?:
01C3 22        1035            ret
01C4           1036   ;------------------------------------------------------------
01C4           1037   ;Allocation info for local variables in function 'UART1_Init'
01C4           1038   ;------------------------------------------------------------
01C4           1039   ;baudrate                  Allocated to registers r2 r3 r4 r5 
01C4           1040   ;------------------------------------------------------------
01C4           1041   ;        ControllerCore.h:221: void UART1_Init (unsigned long baudrate)
01C4           1042   ;        -----------------------------------------
01C4           1043   ;         function UART1_Init
01C4           1044   ;        -----------------------------------------
01C4           1045   _UART1_Init:
01C4 AA82      1046            mov     r2,dpl
01C6 AB83      1047            mov     r3,dph
01C8 ACF0      1048            mov     r4,b
01CA FD        1049            mov     r5,a
01CB           1050   ;        ControllerCore.h:223: SFRPAGE = 0x20;
01CB 75A720    1051            mov     _SFRPAGE,#0x20
01CE           1052   ;        ControllerCore.h:224: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
01CE 75930C    1053            mov     _SMOD1,#0x0C
01D1           1054   ;        ControllerCore.h:225: SCON1 = 0x10;
01D1 75C810    1055            mov     _SCON1,#0x10
01D4           1056   ;        ControllerCore.h:226: SBCON1 =0x00;   // disable baud rate generator
01D4 759400    1057            mov     _SBCON1,#0x00
01D7           1058   ;        ControllerCore.h:227: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
01D7 8A00      1059            mov     __divulong_PARM_2,r2
01D9 8B01      1060            mov     (__divulong_PARM_2 + 1),r3
01DB 8C02      1061            mov     (__divulong_PARM_2 + 2),r4
01DD 8D03      1062            mov     (__divulong_PARM_2 + 3),r5
01DF 90A200    1063            mov     dptr,#0xA200
01E2 75F04A    1064            mov     b,#0x4A
01E5 7404      1065            mov     a,#0x04
01E7 120000    1066            lcall   __divulong
01EA AA82      1067            mov     r2,dpl
01EC AB83      1068            mov     r3,dph
01EE ACF0      1069            mov     r4,b
01F0 FD        1070            mov     r5,a
01F1 750018    1071            mov     __divulong_PARM_2,#0x18
01F4 E4        1072            clr     a
01F5 F501      1073            mov     (__divulong_PARM_2 + 1),a
01F7 F502      1074            mov     (__divulong_PARM_2 + 2),a
01F9 F503      1075            mov     (__divulong_PARM_2 + 3),a
01FB 8A82      1076            mov     dpl,r2
01FD 8B83      1077            mov     dph,r3
01FF 8CF0      1078            mov     b,r4
0201 ED        1079            mov     a,r5
0202 120000    1080            lcall   __divulong
0205 AA82      1081            mov     r2,dpl
0207 AB83      1082            mov     r3,dph
0209 ACF0      1083            mov     r4,b
020B FD        1084            mov     r5,a
020C E4        1085            clr     a
020D C3        1086            clr     c
020E 9A        1087            subb    a,r2
020F FA        1088            mov     r2,a
0210 E4        1089            clr     a
0211 9B        1090            subb    a,r3
0212 FB        1091            mov     r3,a
0213 7401      1092            mov     a,#0x01
0215 9C        1093            subb    a,r4
0216 E4        1094            clr     a
0217 9D        1095            subb    a,r5
0218 8A95      1096            mov     _SBRL1,r2
021A 8B96      1097            mov     (_SBRL1 >> 8),r3
021C           1098   ;        ControllerCore.h:228: TI1 = 1; // indicate ready for TX
021C D2C9      1099            setb    _TI1
021E           1100   ;        ControllerCore.h:229: SBCON1 |= 0x40;   // enable baud rate generator
021E 439440    1101            orl     _SBCON1,#0x40
0221           1102   ;        ControllerCore.h:230: SFRPAGE = 0x00;
0221 75A700    1103            mov     _SFRPAGE,#0x00
0224 22        1104            ret
0225           1105   ;------------------------------------------------------------
0225           1106   ;Allocation info for local variables in function 'putchar1'
0225           1107   ;------------------------------------------------------------
0225           1108   ;c                         Allocated to registers r2 
0225           1109   ;------------------------------------------------------------
0225           1110   ;        ControllerCore.h:233: void putchar1 (char c) 
0225           1111   ;        -----------------------------------------
0225           1112   ;         function putchar1
0225           1113   ;        -----------------------------------------
0225           1114   _putchar1:
0225 AA82      1115            mov     r2,dpl
0227           1116   ;        ControllerCore.h:235: SFRPAGE = 0x20;
0227 75A720    1117            mov     _SFRPAGE,#0x20
022A           1118   ;        ControllerCore.h:236: while (!TI1);
022A           1119   L010001?:
022A           1120   ;        ControllerCore.h:237: TI1=0;
022A 10C9D0    1121            jbc     _TI1,L010008?
022D 8000      1122            sjmp    L010001?
022F           1123   L010008?:
022F           1124   ;        ControllerCore.h:238: SBUF1 = c;
022F 8A92      1125            mov     _SBUF1,r2
0231           1126   ;        ControllerCore.h:239: SFRPAGE = 0x00;
0231 75A700    1127            mov     _SFRPAGE,#0x00
0234 22        1128            ret
0235           1129   ;------------------------------------------------------------
0235           1130   ;Allocation info for local variables in function 'sendstr1'
0235           1131   ;------------------------------------------------------------
0235           1132   ;s                         Allocated to registers r2 r3 r4 
0235           1133   ;------------------------------------------------------------
0235           1134   ;        ControllerCore.h:242: void sendstr1 (char * s)
0235           1135   ;        -----------------------------------------
0235           1136   ;         function sendstr1
0235           1137   ;        -----------------------------------------
0235           1138   _sendstr1:
0235 AA82      1139            mov     r2,dpl
0237 AB83      1140            mov     r3,dph
0239 ACF0      1141            mov     r4,b
023B           1142   ;        ControllerCore.h:244: while(*s)
023B           1143   L011001?:
023B 8A82      1144            mov     dpl,r2
023D 8B83      1145            mov     dph,r3
023F 8CF0      1146            mov     b,r4
0241 120000    1147            lcall   __gptrget
0244 FD        1148            mov     r5,a
0245 6000      1149            jz      L011004?
0247           1150   ;        ControllerCore.h:246: putchar1(*s);
0247 8D82      1151            mov     dpl,r5
0249 C002      1152            push    ar2
024B C003      1153            push    ar3
024D C004      1154            push    ar4
024F 120000    1155            lcall   _putchar1
0252 D004      1156            pop     ar4
0254 D003      1157            pop     ar3
0256 D002      1158            pop     ar2
0258           1159   ;        ControllerCore.h:247: s++;      
0258 0A        1160            inc     r2
0259 BA0010    1161            cjne    r2,#0x00,L011001?
025C 0B        1162            inc     r3
025D 8000      1163            sjmp    L011001?
025F           1164   L011004?:
025F 22        1165            ret
0260           1166   ;------------------------------------------------------------
0260           1167   ;Allocation info for local variables in function 'sendstr2'
0260           1168   ;------------------------------------------------------------
0260           1169   ;s                         Allocated to registers r2 r3 r4 
0260           1170   ;------------------------------------------------------------
0260           1171   ;        ControllerCore.h:251: void sendstr2 (char * s)
0260           1172   ;        -----------------------------------------
0260           1173   ;         function sendstr2
0260           1174   ;        -----------------------------------------
0260           1175   _sendstr2:
0260 AA82      1176            mov     r2,dpl
0262 AB83      1177            mov     r3,dph
0264 ACF0      1178            mov     r4,b
0266           1179   ;        ControllerCore.h:253: while(*s && (*s != 0x0A))
0266           1180   L012002?:
0266 8A82      1181            mov     dpl,r2
0268 8B83      1182            mov     dph,r3
026A 8CF0      1183            mov     b,r4
026C 120000    1184            lcall   __gptrget
026F FD        1185            mov     r5,a
0270 6000      1186            jz      L012005?
0272 BD0AD0    1187            cjne    r5,#0x0A,L012012?
0275 22        1188            ret
0276           1189   L012012?:
0276           1190   ;        ControllerCore.h:255: putchar1(*s);
0276 8D82      1191            mov     dpl,r5
0278 C002      1192            push    ar2
027A C003      1193            push    ar3
027C C004      1194            push    ar4
027E 120000    1195            lcall   _putchar1
0281 D004      1196            pop     ar4
0283 D003      1197            pop     ar3
0285 D002      1198            pop     ar2
0287           1199   ;        ControllerCore.h:256: s++;      
0287 0A        1200            inc     r2
0288 BA0090    1201            cjne    r2,#0x00,L012002?
028B 0B        1202            inc     r3
028C 8000      1203            sjmp    L012002?
028E           1204   L012005?:
028E 22        1205            ret
028F           1206   ;------------------------------------------------------------
028F           1207   ;Allocation info for local variables in function 'getchar1'
028F           1208   ;------------------------------------------------------------
028F           1209   ;c                         Allocated to registers 
028F           1210   ;------------------------------------------------------------
028F           1211   ;        ControllerCore.h:260: char getchar1 (void)
028F           1212   ;        -----------------------------------------
028F           1213   ;         function getchar1
028F           1214   ;        -----------------------------------------
028F           1215   _getchar1:
028F           1216   ;        ControllerCore.h:263: SFRPAGE = 0x20;
028F 75A720    1217            mov     _SFRPAGE,#0x20
0292           1218   ;        ControllerCore.h:264: while (!RI1);
0292           1219   L013001?:
0292           1220   ;        ControllerCore.h:265: RI1=0;
0292 10C850    1221            jbc     _RI1,L013008?
0295 8000      1222            sjmp    L013001?
0297           1223   L013008?:
0297           1224   ;        ControllerCore.h:267: SCON1&=0b_0011_1111;
0297 53C83F    1225            anl     _SCON1,#0x3F
029A           1226   ;        ControllerCore.h:268: c = SBUF1;
029A 859282    1227            mov     dpl,_SBUF1
029D           1228   ;        ControllerCore.h:269: SFRPAGE = 0x00;
029D 75A700    1229            mov     _SFRPAGE,#0x00
02A0           1230   ;        ControllerCore.h:270: return (c);
02A0 22        1231            ret
02A1           1232   ;------------------------------------------------------------
02A1           1233   ;Allocation info for local variables in function 'getchar1_with_timeout'
02A1           1234   ;------------------------------------------------------------
02A1           1235   ;c                         Allocated to registers 
02A1           1236   ;timeout                   Allocated to registers r2 r3 
02A1           1237   ;------------------------------------------------------------
02A1           1238   ;        ControllerCore.h:273: char getchar1_with_timeout (void)
02A1           1239   ;        -----------------------------------------
02A1           1240   ;         function getchar1_with_timeout
02A1           1241   ;        -----------------------------------------
02A1           1242   _getchar1_with_timeout:
02A1           1243   ;        ControllerCore.h:277: SFRPAGE = 0x20;
02A1 75A720    1244            mov     _SFRPAGE,#0x20
02A4           1245   ;        ControllerCore.h:279: while (!RI1)
02A4 7A00      1246            mov     r2,#0x00
02A6 7B00      1247            mov     r3,#0x00
02A8           1248   L014003?:
02A8 20C8D0    1249            jb      _RI1,L014005?
02AB           1250   ;        ControllerCore.h:281: SFRPAGE = 0x00;
02AB 75A700    1251            mov     _SFRPAGE,#0x00
02AE           1252   ;        ControllerCore.h:282: Timer3us(20);
02AE 758214    1253            mov     dpl,#0x14
02B1 C002      1254            push    ar2
02B3 C003      1255            push    ar3
02B5 120000    1256            lcall   _Timer3us
02B8 D003      1257            pop     ar3
02BA D002      1258            pop     ar2
02BC           1259   ;        ControllerCore.h:283: SFRPAGE = 0x20;
02BC 75A720    1260            mov     _SFRPAGE,#0x20
02BF           1261   ;        ControllerCore.h:284: timeout++;
02BF 0A        1262            inc     r2
02C0 BA0010    1263            cjne    r2,#0x00,L014012?
02C3 0B        1264            inc     r3
02C4           1265   L014012?:
02C4           1266   ;        ControllerCore.h:285: if(timeout==25000)
02C4 BAA850    1267            cjne    r2,#0xA8,L014003?
02C7 BB6150    1268            cjne    r3,#0x61,L014003?
02CA           1269   ;        ControllerCore.h:287: SFRPAGE = 0x00;
02CA 75A700    1270            mov     _SFRPAGE,#0x00
02CD           1271   ;        ControllerCore.h:288: return ('\n'); // Timeout after half second
02CD 75820A    1272            mov     dpl,#0x0A
02D0 22        1273            ret
02D1           1274   L014005?:
02D1           1275   ;        ControllerCore.h:291: RI1=0;
02D1 C2C8      1276            clr     _RI1
02D3           1277   ;        ControllerCore.h:293: SCON1&=0b_0011_1111;
02D3 53C83F    1278            anl     _SCON1,#0x3F
02D6           1279   ;        ControllerCore.h:294: c = SBUF1;
02D6 859282    1280            mov     dpl,_SBUF1
02D9           1281   ;        ControllerCore.h:295: SFRPAGE = 0x00;
02D9 75A700    1282            mov     _SFRPAGE,#0x00
02DC           1283   ;        ControllerCore.h:296: return (c);
02DC 22        1284            ret
02DD           1285   ;------------------------------------------------------------
02DD           1286   ;Allocation info for local variables in function 'getstr1'
02DD           1287   ;------------------------------------------------------------
02DD           1288   ;s                         Allocated to registers r2 r3 r4 
02DD           1289   ;c                         Allocated to registers r5 
02DD           1290   ;------------------------------------------------------------
02DD           1291   ;        ControllerCore.h:299: void getstr1 (char * s)
02DD           1292   ;        -----------------------------------------
02DD           1293   ;         function getstr1
02DD           1294   ;        -----------------------------------------
02DD           1295   _getstr1:
02DD AA82      1296            mov     r2,dpl
02DF AB83      1297            mov     r3,dph
02E1 ACF0      1298            mov     r4,b
02E3           1299   ;        ControllerCore.h:303: while(1)
02E3           1300   L015004?:
02E3           1301   ;        ControllerCore.h:305: c=getchar1_with_timeout();
02E3 C002      1302            push    ar2
02E5 C003      1303            push    ar3
02E7 C004      1304            push    ar4
02E9 120000    1305            lcall   _getchar1_with_timeout
02EC AD82      1306            mov     r5,dpl
02EE D004      1307            pop     ar4
02F0 D003      1308            pop     ar3
02F2 D002      1309            pop     ar2
02F4           1310   ;        ControllerCore.h:306: if(c=='\n')
02F4 BD0A10    1311            cjne    r5,#0x0A,L015002?
02F7           1312   ;        ControllerCore.h:308: *s=0;
02F7 8A82      1313            mov     dpl,r2
02F9 8B83      1314            mov     dph,r3
02FB 8CF0      1315            mov     b,r4
02FD E4        1316            clr     a
02FE           1317   ;        ControllerCore.h:309: return;
02FE 020000    1318            ljmp    __gptrput
0301           1319   L015002?:
0301           1320   ;        ControllerCore.h:311: *s=c;
0301 8A82      1321            mov     dpl,r2
0303 8B83      1322            mov     dph,r3
0305 8CF0      1323            mov     b,r4
0307 ED        1324            mov     a,r5
0308 120000    1325            lcall   __gptrput
030B A3        1326            inc     dptr
030C AA82      1327            mov     r2,dpl
030E AB83      1328            mov     r3,dph
0310           1329   ;        ControllerCore.h:312: s++;
0310 8000      1330            sjmp    L015004?
0312           1331   ;------------------------------------------------------------
0312           1332   ;Allocation info for local variables in function 'RXU1'
0312           1333   ;------------------------------------------------------------
0312           1334   ;------------------------------------------------------------
0312           1335   ;        ControllerCore.h:317: bit RXU1 (void)
0312           1336   ;        -----------------------------------------
0312           1337   ;         function RXU1
0312           1338   ;        -----------------------------------------
0312           1339   _RXU1:
0312           1340   ;        ControllerCore.h:320: SFRPAGE = 0x20;
0312 75A720    1341            mov     _SFRPAGE,#0x20
0315           1342   ;        ControllerCore.h:321: mybit=RI1;
0315 A2C8      1343            mov     c,_RI1
0317           1344   ;        ControllerCore.h:322: SFRPAGE = 0x00;
0317 75A700    1345            mov     _SFRPAGE,#0x00
031A           1346   ;        ControllerCore.h:323: return mybit;
031A 22        1347            ret
031B           1348   ;------------------------------------------------------------
031B           1349   ;Allocation info for local variables in function 'waitms_or_RI1'
031B           1350   ;------------------------------------------------------------
031B           1351   ;ms                        Allocated to registers r2 r3 
031B           1352   ;j                         Allocated to registers r4 r5 
031B           1353   ;k                         Allocated to registers r6 
031B           1354   ;------------------------------------------------------------
031B           1355   ;        ControllerCore.h:326: void waitms_or_RI1 (unsigned int ms)
031B           1356   ;        -----------------------------------------
031B           1357   ;         function waitms_or_RI1
031B           1358   ;        -----------------------------------------
031B           1359   _waitms_or_RI1:
031B AA82      1360            mov     r2,dpl
031D AB83      1361            mov     r3,dph
031F           1362   ;        ControllerCore.h:330: for(j=0; j<ms; j++)
031F 7C00      1363            mov     r4,#0x00
0321 7D00      1364            mov     r5,#0x00
0323           1365   L017007?:
0323 C3        1366            clr     c
0324 EC        1367            mov     a,r4
0325 9A        1368            subb    a,r2
0326 ED        1369            mov     a,r5
0327 9B        1370            subb    a,r3
0328 5000      1371            jnc     L017011?
032A           1372   ;        ControllerCore.h:332: for (k=0; k<4; k++)
032A 7E00      1373            mov     r6,#0x00
032C           1374   L017003?:
032C BE04D0    1375            cjne    r6,#0x04,L017019?
032F           1376   L017019?:
032F 5000      1377            jnc     L017009?
0331           1378   ;        ControllerCore.h:334: if(RXU1()) return;
0331 C002      1379            push    ar2
0333 C003      1380            push    ar3
0335 C004      1381            push    ar4
0337 C005      1382            push    ar5
0339 C006      1383            push    ar6
033B 120000    1384            lcall   _RXU1
033E E4        1385            clr     a
033F 33        1386            rlc     a
0340 D006      1387            pop     ar6
0342 D005      1388            pop     ar5
0344 D004      1389            pop     ar4
0346 D003      1390            pop     ar3
0348 D002      1391            pop     ar2
034A 6000      1392            jz      L017002?
034C 22        1393            ret
034D           1394   L017002?:
034D           1395   ;        ControllerCore.h:335: Timer3us(250);
034D 7582FA    1396            mov     dpl,#0xFA
0350 C002      1397            push    ar2
0352 C003      1398            push    ar3
0354 C004      1399            push    ar4
0356 C005      1400            push    ar5
0358 C006      1401            push    ar6
035A 120000    1402            lcall   _Timer3us
035D D006      1403            pop     ar6
035F D005      1404            pop     ar5
0361 D004      1405            pop     ar4
0363 D003      1406            pop     ar3
0365 D002      1407            pop     ar2
0367           1408   ;        ControllerCore.h:332: for (k=0; k<4; k++)
0367 0E        1409            inc     r6
0368 8000      1410            sjmp    L017003?
036A           1411   L017009?:
036A           1412   ;        ControllerCore.h:330: for(j=0; j<ms; j++)
036A 0C        1413            inc     r4
036B BC0050    1414            cjne    r4,#0x00,L017007?
036E 0D        1415            inc     r5
036F 8000      1416            sjmp    L017007?
0371           1417   L017011?:
0371 22        1418            ret
0372           1419   ;------------------------------------------------------------
0372           1420   ;Allocation info for local variables in function 'SendATCommand'
0372           1421   ;------------------------------------------------------------
0372           1422   ;s                         Allocated to registers r2 r3 r4 
0372           1423   ;------------------------------------------------------------
0372           1424   ;        ControllerCore.h:340: void SendATCommand (char * s)
0372           1425   ;        -----------------------------------------
0372           1426   ;         function SendATCommand
0372           1427   ;        -----------------------------------------
0372           1428   _SendATCommand:
0372 AA82      1429            mov     r2,dpl
0374 AB83      1430            mov     r3,dph
0376 ACF0      1431            mov     r4,b
0378           1432   ;        ControllerCore.h:342: printf("Command: %s", s);
0378 C002      1433            push    ar2
037A C003      1434            push    ar3
037C C004      1435            push    ar4
037E C002      1436            push    ar2
0380 C003      1437            push    ar3
0382 C004      1438            push    ar4
0384 7450      1439            mov     a,#__str_1
0386 C0E0      1440            push    acc
0388 7474      1441            mov     a,#(__str_1 >> 8)
038A C0E0      1442            push    acc
038C 7480      1443            mov     a,#0x80
038E C0E0      1444            push    acc
0390 120000    1445            lcall   _printf
0393 E581      1446            mov     a,sp
0395 24FA      1447            add     a,#0xfa
0397 F581      1448            mov     sp,a
0399           1449   ;        ControllerCore.h:343: P3_3=0; // 'set' pin to 0 is 'AT' mode.
0399 C2B3      1450            clr     _P3_3
039B           1451   ;        ControllerCore.h:344: waitms(5);
039B 900005    1452            mov     dptr,#0x0005
039E 120000    1453            lcall   _waitms
03A1 D004      1454            pop     ar4
03A3 D003      1455            pop     ar3
03A5 D002      1456            pop     ar2
03A7           1457   ;        ControllerCore.h:345: sendstr1(s);
03A7 8A82      1458            mov     dpl,r2
03A9 8B83      1459            mov     dph,r3
03AB 8CF0      1460            mov     b,r4
03AD 120000    1461            lcall   _sendstr1
03B0           1462   ;        ControllerCore.h:346: getstr1(buff);
03B0 90A220    1463            mov     dptr,#_buff
03B3 75F000    1464            mov     b,#0x00
03B6 120000    1465            lcall   _getstr1
03B9           1466   ;        ControllerCore.h:347: waitms(10);
03B9 90000A    1467            mov     dptr,#0x000A
03BC 120000    1468            lcall   _waitms
03BF           1469   ;        ControllerCore.h:348: P3_3=1; // 'set' pin to 1 is normal operation mode.
03BF D2B3      1470            setb    _P3_3
03C1           1471   ;        ControllerCore.h:349: printf("Response: %s\r\n", buff);
03C1 7420      1472            mov     a,#_buff
03C3 C0E0      1473            push    acc
03C5 74A2      1474            mov     a,#(_buff >> 8)
03C7 C0E0      1475            push    acc
03C9 E4        1476            clr     a
03CA C0E0      1477            push    acc
03CC 7450      1478            mov     a,#__str_2
03CE C0E0      1479            push    acc
03D0 7475      1480            mov     a,#(__str_2 >> 8)
03D2 C0E0      1481            push    acc
03D4 7480      1482            mov     a,#0x80
03D6 C0E0      1483            push    acc
03D8 120000    1484            lcall   _printf
03DB E581      1485            mov     a,sp
03DD 24FA      1486            add     a,#0xfa
03DF F581      1487            mov     sp,a
03E1 22        1488            ret
03E2           1489   ;------------------------------------------------------------
03E2           1490   ;Allocation info for local variables in function 'Package_Signed_int'
03E2           1491   ;------------------------------------------------------------
03E2           1492   ;in                        Allocated to registers r2 r3 
03E2           1493   ;out                       Allocated to registers r4 
03E2           1494   ;------------------------------------------------------------
03E2           1495   ;        ControllerCore.h:352: char Package_Signed_int(int in){
03E2           1496   ;        -----------------------------------------
03E2           1497   ;         function Package_Signed_int
03E2           1498   ;        -----------------------------------------
03E2           1499   _Package_Signed_int:
03E2 AA82      1500            mov     r2,dpl
03E4 AB83      1501            mov     r3,dph
03E6           1502   ;        ControllerCore.h:353: char out = 0x80; //set bit 7, 6 = 0b10 to indicate motor cmd
03E6 7C80      1503            mov     r4,#0x80
03E8           1504   ;        ControllerCore.h:355: if(in<0){
03E8 EB        1505            mov     a,r3
03E9 30E7D0    1506            jnb     acc.7,L019002?
03EC           1507   ;        ControllerCore.h:356: out |= 0x20; //set bit 5 to 1 if negative
03EC 7CA0      1508            mov     r4,#0xA0
03EE           1509   L019002?:
03EE           1510   ;        ControllerCore.h:358: out |= abs(in) & 0x1F; //preserve only bits 0-4
03EE 8A82      1511            mov     dpl,r2
03F0 8B83      1512            mov     dph,r3
03F2 C004      1513            push    ar4
03F4 120000    1514            lcall   _abs
03F7 E582      1515            mov     a,dpl
03F9 8583F0    1516            mov     b,dph
03FC D004      1517            pop     ar4
03FE 541F      1518            anl     a,#0x1F
0400 FA        1519            mov     r2,a
0401 7B00      1520            mov     r3,#0x00
0403 EC        1521            mov     a,r4
0404 FD        1522            mov     r5,a
0405 33        1523            rlc     a
0406 95E0      1524            subb    a,acc
0408 FE        1525            mov     r6,a
0409 ED        1526            mov     a,r5
040A 4202      1527            orl     ar2,a
040C EE        1528            mov     a,r6
040D 4203      1529            orl     ar3,a
040F 8A04      1530            mov     ar4,r2
0411           1531   ;        ControllerCore.h:359: return out;
0411 8C82      1532            mov     dpl,r4
0413 22        1533            ret
0414           1534   ;------------------------------------------------------------
0414           1535   ;Allocation info for local variables in function 'Voltage_to_Coordinate'
0414           1536   ;------------------------------------------------------------
0414           1537   ;v                         Allocated to registers r2 r3 r4 r5 
0414           1538   ;------------------------------------------------------------
0414           1539   ;        ControllerUI.h:21: int Voltage_to_Coordinate(float v){
0414           1540   ;        -----------------------------------------
0414           1541   ;         function Voltage_to_Coordinate
0414           1542   ;        -----------------------------------------
0414           1543   _Voltage_to_Coordinate:
0414 AA82      1544            mov     r2,dpl
0416 AB83      1545            mov     r3,dph
0418 ACF0      1546            mov     r4,b
041A FD        1547            mov     r5,a
041B           1548   ;        ControllerUI.h:22: if(1.65 < v){
041B C002      1549            push    ar2
041D C003      1550            push    ar3
041F C004      1551            push    ar4
0421 C005      1552            push    ar5
0423 C002      1553            push    ar2
0425 C003      1554            push    ar3
0427 C004      1555            push    ar4
0429 C005      1556            push    ar5
042B 903333    1557            mov     dptr,#0x3333
042E 75F0D3    1558            mov     b,#0xD3
0431 743F      1559            mov     a,#0x3F
0433 120000    1560            lcall   ___fslt
0436 AE82      1561            mov     r6,dpl
0438 E581      1562            mov     a,sp
043A 24FC      1563            add     a,#0xfc
043C F581      1564            mov     sp,a
043E D005      1565            pop     ar5
0440 D004      1566            pop     ar4
0442 D003      1567            pop     ar3
0444 D002      1568            pop     ar2
0446 EE        1569            mov     a,r6
0447 6000      1570            jz      L020005?
0449           1571   ;        ControllerUI.h:23: return (int)((v-1.65)/(3.30-1.65)*20);
0449 7433      1572            mov     a,#0x33
044B C0E0      1573            push    acc
044D C0E0      1574            push    acc
044F 74D3      1575            mov     a,#0xD3
0451 C0E0      1576            push    acc
0453 743F      1577            mov     a,#0x3F
0455 C0E0      1578            push    acc
0457 8A82      1579            mov     dpl,r2
0459 8B83      1580            mov     dph,r3
045B 8CF0      1581            mov     b,r4
045D ED        1582            mov     a,r5
045E 120000    1583            lcall   ___fssub
0461 AE82      1584            mov     r6,dpl
0463 AF83      1585            mov     r7,dph
0465 A8F0      1586            mov     r0,b
0467 F9        1587            mov     r1,a
0468 E581      1588            mov     a,sp
046A 24FC      1589            add     a,#0xfc
046C F581      1590            mov     sp,a
046E 7433      1591            mov     a,#0x33
0470 C0E0      1592            push    acc
0472 C0E0      1593            push    acc
0474 74D3      1594            mov     a,#0xD3
0476 C0E0      1595            push    acc
0478 743F      1596            mov     a,#0x3F
047A C0E0      1597            push    acc
047C 8E82      1598            mov     dpl,r6
047E 8F83      1599            mov     dph,r7
0480 88F0      1600            mov     b,r0
0482 E9        1601            mov     a,r1
0483 120000    1602            lcall   ___fsdiv
0486 AE82      1603            mov     r6,dpl
0488 AF83      1604            mov     r7,dph
048A A8F0      1605            mov     r0,b
048C F9        1606            mov     r1,a
048D E581      1607            mov     a,sp
048F 24FC      1608            add     a,#0xfc
0491 F581      1609            mov     sp,a
0493 C006      1610            push    ar6
0495 C007      1611            push    ar7
0497 C000      1612            push    ar0
0499 C001      1613            push    ar1
049B 900000    1614            mov     dptr,#0x0000
049E 75F0A0    1615            mov     b,#0xA0
04A1 7441      1616            mov     a,#0x41
04A3 120000    1617            lcall   ___fsmul
04A6 AE82      1618            mov     r6,dpl
04A8 AF83      1619            mov     r7,dph
04AA A8F0      1620            mov     r0,b
04AC F9        1621            mov     r1,a
04AD E581      1622            mov     a,sp
04AF 24FC      1623            add     a,#0xfc
04B1 F581      1624            mov     sp,a
04B3 8E82      1625            mov     dpl,r6
04B5 8F83      1626            mov     dph,r7
04B7 88F0      1627            mov     b,r0
04B9 E9        1628            mov     a,r1
04BA 020000    1629            ljmp    ___fs2sint
04BD           1630   L020005?:
04BD           1631   ;        ControllerUI.h:24: }else if(1.65 > v){
04BD C002      1632            push    ar2
04BF C003      1633            push    ar3
04C1 C004      1634            push    ar4
04C3 C005      1635            push    ar5
04C5 C002      1636            push    ar2
04C7 C003      1637            push    ar3
04C9 C004      1638            push    ar4
04CB C005      1639            push    ar5
04CD 903333    1640            mov     dptr,#0x3333
04D0 75F0D3    1641            mov     b,#0xD3
04D3 743F      1642            mov     a,#0x3F
04D5 120000    1643            lcall   ___fsgt
04D8 AE82      1644            mov     r6,dpl
04DA E581      1645            mov     a,sp
04DC 24FC      1646            add     a,#0xfc
04DE F581      1647            mov     sp,a
04E0 D005      1648            pop     ar5
04E2 D004      1649            pop     ar4
04E4 D003      1650            pop     ar3
04E6 D002      1651            pop     ar2
04E8 EE        1652            mov     a,r6
04E9 6000      1653            jz      L020002?
04EB           1654   ;        ControllerUI.h:25: return (int)((1-v/1.65)*(-20));
04EB 7433      1655            mov     a,#0x33
04ED C0E0      1656            push    acc
04EF C0E0      1657            push    acc
04F1 74D3      1658            mov     a,#0xD3
04F3 C0E0      1659            push    acc
04F5 743F      1660            mov     a,#0x3F
04F7 C0E0      1661            push    acc
04F9 8A82      1662            mov     dpl,r2
04FB 8B83      1663            mov     dph,r3
04FD 8CF0      1664            mov     b,r4
04FF ED        1665            mov     a,r5
0500 120000    1666            lcall   ___fsdiv
0503 AA82      1667            mov     r2,dpl
0505 AB83      1668            mov     r3,dph
0507 ACF0      1669            mov     r4,b
0509 FD        1670            mov     r5,a
050A E581      1671            mov     a,sp
050C 24FC      1672            add     a,#0xfc
050E F581      1673            mov     sp,a
0510 C002      1674            push    ar2
0512 C003      1675            push    ar3
0514 C004      1676            push    ar4
0516 C005      1677            push    ar5
0518 900000    1678            mov     dptr,#0x0000
051B 75F080    1679            mov     b,#0x80
051E 743F      1680            mov     a,#0x3F
0520 120000    1681            lcall   ___fssub
0523 AA82      1682            mov     r2,dpl
0525 AB83      1683            mov     r3,dph
0527 ACF0      1684            mov     r4,b
0529 FD        1685            mov     r5,a
052A E581      1686            mov     a,sp
052C 24FC      1687            add     a,#0xfc
052E F581      1688            mov     sp,a
0530 C002      1689            push    ar2
0532 C003      1690            push    ar3
0534 C004      1691            push    ar4
0536 C005      1692            push    ar5
0538 900000    1693            mov     dptr,#0x0000
053B 75F0A0    1694            mov     b,#0xA0
053E 74C1      1695            mov     a,#0xC1
0540 120000    1696            lcall   ___fsmul
0543 AA82      1697            mov     r2,dpl
0545 AB83      1698            mov     r3,dph
0547 ACF0      1699            mov     r4,b
0549 FD        1700            mov     r5,a
054A E581      1701            mov     a,sp
054C 24FC      1702            add     a,#0xfc
054E F581      1703            mov     sp,a
0550 8A82      1704            mov     dpl,r2
0552 8B83      1705            mov     dph,r3
0554 8CF0      1706            mov     b,r4
0556 ED        1707            mov     a,r5
0557           1708   ;        ControllerUI.h:27: return 0;
0557 020000    1709            ljmp    ___fs2sint
055A           1710   L020002?:
055A 900000    1711            mov     dptr,#0x0000
055D 22        1712            ret
055E           1713   ;------------------------------------------------------------
055E           1714   ;Allocation info for local variables in function 'Check_Joystick_Button'
055E           1715   ;------------------------------------------------------------
055E           1716   ;v                         Allocated to registers r2 r3 r4 r5 
055E           1717   ;------------------------------------------------------------
055E           1718   ;        ControllerUI.h:31: char Check_Joystick_Button(float v){
055E           1719   ;        -----------------------------------------
055E           1720   ;         function Check_Joystick_Button
055E           1721   ;        -----------------------------------------
055E           1722   _Check_Joystick_Button:
055E AA82      1723            mov     r2,dpl
0560 AB83      1724            mov     r3,dph
0562 ACF0      1725            mov     r4,b
0564 FD        1726            mov     r5,a
0565           1727   ;        ControllerUI.h:32: if(v != 0.0){
0565 EA        1728            mov     a,r2
0566 4B        1729            orl     a,r3
0567 4C        1730            orl     a,r4
0568 8DF0      1731            mov     b,r5
056A C2F7      1732            clr     b.7 ; Clear the sign bit
056C 45F0      1733            orl     a,b
056E 6000      1734            jz      L021002?
0570           1735   ;        ControllerUI.h:33: return 0;
0570 758200    1736            mov     dpl,#0x00
0573           1737   ;        ControllerUI.h:35: return 1;
0573 22        1738            ret
0574           1739   L021002?:
0574 758201    1740            mov     dpl,#0x01
0577 22        1741            ret
0578           1742   ;------------------------------------------------------------
0578           1743   ;Allocation info for local variables in function 'Generate_Motor_Command'
0578           1744   ;------------------------------------------------------------
0578           1745   ;x                         Allocated with name '_Generate_Motor_Command_PARM_2'
0578           1746   ;y                         Allocated with name '_Generate_Motor_Command_PARM_3'
0578           1747   ;cmd                       Allocated to registers r2 r3 r4 
0578           1748   ;sloc0                     Allocated with name '_Generate_Motor_Command_sloc0_1_0'
0578           1749   ;------------------------------------------------------------
0578           1750   ;        ControllerUI.h:40: void Generate_Motor_Command(Motor* cmd, int x, int y){
0578           1751   ;        -----------------------------------------
0578           1752   ;         function Generate_Motor_Command
0578           1753   ;        -----------------------------------------
0578           1754   _Generate_Motor_Command:
0578 AA82      1755            mov     r2,dpl
057A AB83      1756            mov     r3,dph
057C ACF0      1757            mov     r4,b
057E           1758   ;        ControllerUI.h:42: if((x==0) && (y==0)){
057E E5E0      1759            mov     a,_Generate_Motor_Command_PARM_2
0580 45E1      1760            orl     a,(_Generate_Motor_Command_PARM_2 + 1)
0582 7000      1761            jnz     L022002?
0584 E520      1762            mov     a,_Generate_Motor_Command_PARM_3
0586 4521      1763            orl     a,(_Generate_Motor_Command_PARM_3 + 1)
0588 7000      1764            jnz     L022002?
058A           1765   ;        ControllerUI.h:43: cmd->left = 0;
058A 8A82      1766            mov     dpl,r2
058C 8B83      1767            mov     dph,r3
058E 8CF0      1768            mov     b,r4
0590 E4        1769            clr     a
0591 120000    1770            lcall   __gptrput
0594 A3        1771            inc     dptr
0595 E4        1772            clr     a
0596 120000    1773            lcall   __gptrput
0599           1774   ;        ControllerUI.h:44: cmd->right = 0;
0599 7402      1775            mov     a,#0x02
059B 2A        1776            add     a,r2
059C FD        1777            mov     r5,a
059D E4        1778            clr     a
059E 3B        1779            addc    a,r3
059F FE        1780            mov     r6,a
05A0 8C07      1781            mov     ar7,r4
05A2 8D82      1782            mov     dpl,r5
05A4 8E83      1783            mov     dph,r6
05A6 8FF0      1784            mov     b,r7
05A8 E4        1785            clr     a
05A9 120000    1786            lcall   __gptrput
05AC A3        1787            inc     dptr
05AD E4        1788            clr     a
05AE           1789   ;        ControllerUI.h:45: return;
05AE 020000    1790            ljmp    __gptrput
05B1           1791   L022002?:
05B1           1792   ;        ControllerUI.h:48: if(y >= 0){
05B1 E521      1793            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
05B3 33        1794            rlc     a
05B4 E4        1795            clr     a
05B5 33        1796            rlc     a
05B6 FD        1797            mov     r5,a
05B7 6000      1798            jz      L022064?
05B9 020000    1799            ljmp    L022042?
05BC           1800   L022064?:
05BC           1801   ;        ControllerUI.h:49: if(x > 0){
05BC C3        1802            clr     c
05BD E4        1803            clr     a
05BE 95E0      1804            subb    a,_Generate_Motor_Command_PARM_2
05C0 E4        1805            clr     a
05C1 6480      1806            xrl     a,#0x80
05C3 85E1F0    1807            mov     b,(_Generate_Motor_Command_PARM_2 + 1)
05C6 63F080    1808            xrl     b,#0x80
05C9 95F0      1809            subb    a,b
05CB 4000      1810            jc      L022065?
05CD 020000    1811            ljmp    L022017?
05D0           1812   L022065?:
05D0           1813   ;        ControllerUI.h:50: if(x < y){
05D0 C3        1814            clr     c
05D1 E5E0      1815            mov     a,_Generate_Motor_Command_PARM_2
05D3 9520      1816            subb    a,_Generate_Motor_Command_PARM_3
05D5 E5E1      1817            mov     a,(_Generate_Motor_Command_PARM_2 + 1)
05D7 6480      1818            xrl     a,#0x80
05D9 8521F0    1819            mov     b,(_Generate_Motor_Command_PARM_3 + 1)
05DC 63F080    1820            xrl     b,#0x80
05DF 95F0      1821            subb    a,b
05E1 5000      1822            jnc     L022008?
05E3           1823   ;        ControllerUI.h:51: cmd->left = y;
05E3 8A82      1824            mov     dpl,r2
05E5 8B83      1825            mov     dph,r3
05E7 8CF0      1826            mov     b,r4
05E9 E520      1827            mov     a,_Generate_Motor_Command_PARM_3
05EB 120000    1828            lcall   __gptrput
05EE A3        1829            inc     dptr
05EF E521      1830            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
05F1 120000    1831            lcall   __gptrput
05F4           1832   ;        ControllerUI.h:52: cmd->right = y - x/2;
05F4 7402      1833            mov     a,#0x02
05F6 2A        1834            add     a,r2
05F7 F530      1835            mov     _Generate_Motor_Command_sloc0_1_0,a
05F9 E4        1836            clr     a
05FA 3B        1837            addc    a,r3
05FB F531      1838            mov     (_Generate_Motor_Command_sloc0_1_0 + 1),a
05FD 8C32      1839            mov     (_Generate_Motor_Command_sloc0_1_0 + 2),r4
05FF 750002    1840            mov     __divsint_PARM_2,#0x02
0602 E4        1841            clr     a
0603 F501      1842            mov     (__divsint_PARM_2 + 1),a
0605 85E082    1843            mov     dpl,_Generate_Motor_Command_PARM_2
0608 85E183    1844            mov     dph,(_Generate_Motor_Command_PARM_2 + 1)
060B 120000    1845            lcall   __divsint
060E A982      1846            mov     r1,dpl
0610 AE83      1847            mov     r6,dph
0612 E520      1848            mov     a,_Generate_Motor_Command_PARM_3
0614 C3        1849            clr     c
0615 99        1850            subb    a,r1
0616 F9        1851            mov     r1,a
0617 E521      1852            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0619 9E        1853            subb    a,r6
061A FE        1854            mov     r6,a
061B 853082    1855            mov     dpl,_Generate_Motor_Command_sloc0_1_0
061E 853183    1856            mov     dph,(_Generate_Motor_Command_sloc0_1_0 + 1)
0621 8532F0    1857            mov     b,(_Generate_Motor_Command_sloc0_1_0 + 2)
0624 E9        1858            mov     a,r1
0625 120000    1859            lcall   __gptrput
0628 A3        1860            inc     dptr
0629 EE        1861            mov     a,r6
062A 020000    1862            ljmp    __gptrput
062D           1863   L022008?:
062D           1864   ;        ControllerUI.h:53: }else if(x == y){
062D E520      1865            mov     a,_Generate_Motor_Command_PARM_3
062F B5E0D0    1866            cjne    a,_Generate_Motor_Command_PARM_2,L022005?
0632 E521      1867            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0634 B5E1D0    1868            cjne    a,(_Generate_Motor_Command_PARM_2 + 1),L022005?
0637           1869   ;        ControllerUI.h:54: cmd->left = y;
0637 8A82      1870            mov     dpl,r2
0639 8B83      1871            mov     dph,r3
063B 8CF0      1872            mov     b,r4
063D E520      1873            mov     a,_Generate_Motor_Command_PARM_3
063F 120000    1874            lcall   __gptrput
0642 A3        1875            inc     dptr
0643 E521      1876            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0645 120000    1877            lcall   __gptrput
0648           1878   ;        ControllerUI.h:55: cmd->right = y/2;
0648 7402      1879            mov     a,#0x02
064A 2A        1880            add     a,r2
064B F530      1881            mov     _Generate_Motor_Command_sloc0_1_0,a
064D E4        1882            clr     a
064E 3B        1883            addc    a,r3
064F F531      1884            mov     (_Generate_Motor_Command_sloc0_1_0 + 1),a
0651 8C32      1885            mov     (_Generate_Motor_Command_sloc0_1_0 + 2),r4
0653 750002    1886            mov     __divsint_PARM_2,#0x02
0656 E4        1887            clr     a
0657 F501      1888            mov     (__divsint_PARM_2 + 1),a
0659 852082    1889            mov     dpl,_Generate_Motor_Command_PARM_3
065C 852183    1890            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
065F 120000    1891            lcall   __divsint
0662 A982      1892            mov     r1,dpl
0664 AE83      1893            mov     r6,dph
0666 853082    1894            mov     dpl,_Generate_Motor_Command_sloc0_1_0
0669 853183    1895            mov     dph,(_Generate_Motor_Command_sloc0_1_0 + 1)
066C 8532F0    1896            mov     b,(_Generate_Motor_Command_sloc0_1_0 + 2)
066F E9        1897            mov     a,r1
0670 120000    1898            lcall   __gptrput
0673 A3        1899            inc     dptr
0674 EE        1900            mov     a,r6
0675 020000    1901            ljmp    __gptrput
0678           1902   L022005?:
0678           1903   ;        ControllerUI.h:57: cmd->left = x;
0678 8A82      1904            mov     dpl,r2
067A 8B83      1905            mov     dph,r3
067C 8CF0      1906            mov     b,r4
067E E5E0      1907            mov     a,_Generate_Motor_Command_PARM_2
0680 120000    1908            lcall   __gptrput
0683 A3        1909            inc     dptr
0684 E5E1      1910            mov     a,(_Generate_Motor_Command_PARM_2 + 1)
0686 120000    1911            lcall   __gptrput
0689           1912   ;        ControllerUI.h:58: cmd->right = y/2;
0689 7402      1913            mov     a,#0x02
068B 2A        1914            add     a,r2
068C F530      1915            mov     _Generate_Motor_Command_sloc0_1_0,a
068E E4        1916            clr     a
068F 3B        1917            addc    a,r3
0690 F531      1918            mov     (_Generate_Motor_Command_sloc0_1_0 + 1),a
0692 8C32      1919            mov     (_Generate_Motor_Command_sloc0_1_0 + 2),r4
0694 750002    1920            mov     __divsint_PARM_2,#0x02
0697 E4        1921            clr     a
0698 F501      1922            mov     (__divsint_PARM_2 + 1),a
069A 852082    1923            mov     dpl,_Generate_Motor_Command_PARM_3
069D 852183    1924            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
06A0 120000    1925            lcall   __divsint
06A3 A982      1926            mov     r1,dpl
06A5 AE83      1927            mov     r6,dph
06A7 853082    1928            mov     dpl,_Generate_Motor_Command_sloc0_1_0
06AA 853183    1929            mov     dph,(_Generate_Motor_Command_sloc0_1_0 + 1)
06AD 8532F0    1930            mov     b,(_Generate_Motor_Command_sloc0_1_0 + 2)
06B0 E9        1931            mov     a,r1
06B1 120000    1932            lcall   __gptrput
06B4 A3        1933            inc     dptr
06B5 EE        1934            mov     a,r6
06B6 020000    1935            ljmp    __gptrput
06B9           1936   L022017?:
06B9           1937   ;        ControllerUI.h:62: x *= -1;
06B9 C3        1938            clr     c
06BA E4        1939            clr     a
06BB 95E0      1940            subb    a,_Generate_Motor_Command_PARM_2
06BD F5E0      1941            mov     _Generate_Motor_Command_PARM_2,a
06BF E4        1942            clr     a
06C0 95E1      1943            subb    a,(_Generate_Motor_Command_PARM_2 + 1)
06C2 F5E1      1944            mov     (_Generate_Motor_Command_PARM_2 + 1),a
06C4           1945   ;        ControllerUI.h:63: if(x < y){
06C4 C3        1946            clr     c
06C5 E5E0      1947            mov     a,_Generate_Motor_Command_PARM_2
06C7 9520      1948            subb    a,_Generate_Motor_Command_PARM_3
06C9 E5E1      1949            mov     a,(_Generate_Motor_Command_PARM_2 + 1)
06CB 6480      1950            xrl     a,#0x80
06CD 8521F0    1951            mov     b,(_Generate_Motor_Command_PARM_3 + 1)
06D0 63F080    1952            xrl     b,#0x80
06D3 95F0      1953            subb    a,b
06D5 5000      1954            jnc     L022014?
06D7           1955   ;        ControllerUI.h:64: cmd->left = y - x/2;
06D7 750002    1956            mov     __divsint_PARM_2,#0x02
06DA E4        1957            clr     a
06DB F501      1958            mov     (__divsint_PARM_2 + 1),a
06DD 85E082    1959            mov     dpl,_Generate_Motor_Command_PARM_2
06E0 85E183    1960            mov     dph,(_Generate_Motor_Command_PARM_2 + 1)
06E3 C002      1961            push    ar2
06E5 C003      1962            push    ar3
06E7 C004      1963            push    ar4
06E9 120000    1964            lcall   __divsint
06EC AE82      1965            mov     r6,dpl
06EE AF83      1966            mov     r7,dph
06F0 D004      1967            pop     ar4
06F2 D003      1968            pop     ar3
06F4 D002      1969            pop     ar2
06F6 E520      1970            mov     a,_Generate_Motor_Command_PARM_3
06F8 C3        1971            clr     c
06F9 9E        1972            subb    a,r6
06FA FE        1973            mov     r6,a
06FB E521      1974            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
06FD 9F        1975            subb    a,r7
06FE FF        1976            mov     r7,a
06FF 8A82      1977            mov     dpl,r2
0701 8B83      1978            mov     dph,r3
0703 8CF0      1979            mov     b,r4
0705 EE        1980            mov     a,r6
0706 120000    1981            lcall   __gptrput
0709 A3        1982            inc     dptr
070A EF        1983            mov     a,r7
070B 120000    1984            lcall   __gptrput
070E           1985   ;        ControllerUI.h:65: cmd->right = y;
070E 7402      1986            mov     a,#0x02
0710 2A        1987            add     a,r2
0711 FE        1988            mov     r6,a
0712 E4        1989            clr     a
0713 3B        1990            addc    a,r3
0714 FF        1991            mov     r7,a
0715 8C00      1992            mov     ar0,r4
0717 8E82      1993            mov     dpl,r6
0719 8F83      1994            mov     dph,r7
071B 88F0      1995            mov     b,r0
071D E520      1996            mov     a,_Generate_Motor_Command_PARM_3
071F 120000    1997            lcall   __gptrput
0722 A3        1998            inc     dptr
0723 E521      1999            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0725 020000    2000            ljmp    __gptrput
0728           2001   L022014?:
0728           2002   ;        ControllerUI.h:66: }else if(x == y){
0728 E520      2003            mov     a,_Generate_Motor_Command_PARM_3
072A B5E010    2004            cjne    a,_Generate_Motor_Command_PARM_2,L022011?
072D E521      2005            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
072F B5E110    2006            cjne    a,(_Generate_Motor_Command_PARM_2 + 1),L022011?
0732           2007   ;        ControllerUI.h:67: cmd->left = y/2;
0732 750002    2008            mov     __divsint_PARM_2,#0x02
0735 E4        2009            clr     a
0736 F501      2010            mov     (__divsint_PARM_2 + 1),a
0738 852082    2011            mov     dpl,_Generate_Motor_Command_PARM_3
073B 852183    2012            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
073E C002      2013            push    ar2
0740 C003      2014            push    ar3
0742 C004      2015            push    ar4
0744 120000    2016            lcall   __divsint
0747 AE82      2017            mov     r6,dpl
0749 AF83      2018            mov     r7,dph
074B D004      2019            pop     ar4
074D D003      2020            pop     ar3
074F D002      2021            pop     ar2
0751 8A82      2022            mov     dpl,r2
0753 8B83      2023            mov     dph,r3
0755 8CF0      2024            mov     b,r4
0757 EE        2025            mov     a,r6
0758 120000    2026            lcall   __gptrput
075B A3        2027            inc     dptr
075C EF        2028            mov     a,r7
075D 120000    2029            lcall   __gptrput
0760           2030   ;        ControllerUI.h:68: cmd->right = y;
0760 7402      2031            mov     a,#0x02
0762 2A        2032            add     a,r2
0763 FE        2033            mov     r6,a
0764 E4        2034            clr     a
0765 3B        2035            addc    a,r3
0766 FF        2036            mov     r7,a
0767 8C00      2037            mov     ar0,r4
0769 8E82      2038            mov     dpl,r6
076B 8F83      2039            mov     dph,r7
076D 88F0      2040            mov     b,r0
076F E520      2041            mov     a,_Generate_Motor_Command_PARM_3
0771 120000    2042            lcall   __gptrput
0774 A3        2043            inc     dptr
0775 E521      2044            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0777 020000    2045            ljmp    __gptrput
077A           2046   L022011?:
077A           2047   ;        ControllerUI.h:70: cmd->left = y/2;
077A 750002    2048            mov     __divsint_PARM_2,#0x02
077D E4        2049            clr     a
077E F501      2050            mov     (__divsint_PARM_2 + 1),a
0780 852082    2051            mov     dpl,_Generate_Motor_Command_PARM_3
0783 852183    2052            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
0786 C002      2053            push    ar2
0788 C003      2054            push    ar3
078A C004      2055            push    ar4
078C 120000    2056            lcall   __divsint
078F AE82      2057            mov     r6,dpl
0791 AF83      2058            mov     r7,dph
0793 D004      2059            pop     ar4
0795 D003      2060            pop     ar3
0797 D002      2061            pop     ar2
0799 8A82      2062            mov     dpl,r2
079B 8B83      2063            mov     dph,r3
079D 8CF0      2064            mov     b,r4
079F EE        2065            mov     a,r6
07A0 120000    2066            lcall   __gptrput
07A3 A3        2067            inc     dptr
07A4 EF        2068            mov     a,r7
07A5 120000    2069            lcall   __gptrput
07A8           2070   ;        ControllerUI.h:71: cmd->right = x;
07A8 7402      2071            mov     a,#0x02
07AA 2A        2072            add     a,r2
07AB FE        2073            mov     r6,a
07AC E4        2074            clr     a
07AD 3B        2075            addc    a,r3
07AE FF        2076            mov     r7,a
07AF 8C00      2077            mov     ar0,r4
07B1 8E82      2078            mov     dpl,r6
07B3 8F83      2079            mov     dph,r7
07B5 88F0      2080            mov     b,r0
07B7 E5E0      2081            mov     a,_Generate_Motor_Command_PARM_2
07B9 120000    2082            lcall   __gptrput
07BC A3        2083            inc     dptr
07BD E5E1      2084            mov     a,(_Generate_Motor_Command_PARM_2 + 1)
07BF 020000    2085            ljmp    __gptrput
07C2           2086   L022042?:
07C2           2087   ;        ControllerUI.h:76: if((y<0) && (y>=-8)){ // check if position is in stall zone from y = [-8,0]
07C2 ED        2088            mov     a,r5
07C3 7000      2089            jnz     L022072?
07C5 020000    2090            ljmp    L022038?
07C8           2091   L022072?:
07C8 C3        2092            clr     c
07C9 E520      2093            mov     a,_Generate_Motor_Command_PARM_3
07CB 94F8      2094            subb    a,#0xF8
07CD E521      2095            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
07CF 6480      2096            xrl     a,#0x80
07D1 947F      2097            subb    a,#0x7f
07D3 5000      2098            jnc     L022073?
07D5 020000    2099            ljmp    L022038?
07D8           2100   L022073?:
07D8           2101   ;        ControllerUI.h:78: if(x > 0){
07D8 C3        2102            clr     c
07D9 E4        2103            clr     a
07DA 95E0      2104            subb    a,_Generate_Motor_Command_PARM_2
07DC E4        2105            clr     a
07DD 6480      2106            xrl     a,#0x80
07DF 85E1F0    2107            mov     b,(_Generate_Motor_Command_PARM_2 + 1)
07E2 63F080    2108            xrl     b,#0x80
07E5 95F0      2109            subb    a,b
07E7 5000      2110            jnc     L022020?
07E9           2111   ;        ControllerUI.h:79: cmd->left = ((y+4)*(x))/4;
07E9 852082    2112            mov     dpl,_Generate_Motor_Command_PARM_3
07EC 852183    2113            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
07EF A3        2114            inc     dptr
07F0 A3        2115            inc     dptr
07F1 A3        2116            inc     dptr
07F2 A3        2117            inc     dptr
07F3 85E000    2118            mov     __mulint_PARM_2,_Generate_Motor_Command_PARM_2
07F6 85E101    2119            mov     (__mulint_PARM_2 + 1),(_Generate_Motor_Command_PARM_2 + 1)
07F9 C002      2120            push    ar2
07FB C003      2121            push    ar3
07FD C004      2122            push    ar4
07FF 120000    2123            lcall   __mulint
0802 AD82      2124            mov     r5,dpl
0804 AE83      2125            mov     r6,dph
0806 750004    2126            mov     __divsint_PARM_2,#0x04
0809 E4        2127            clr     a
080A F501      2128            mov     (__divsint_PARM_2 + 1),a
080C 8D82      2129            mov     dpl,r5
080E 8E83      2130            mov     dph,r6
0810 120000    2131            lcall   __divsint
0813 AD82      2132            mov     r5,dpl
0815 AE83      2133            mov     r6,dph
0817 D004      2134            pop     ar4
0819 D003      2135            pop     ar3
081B D002      2136            pop     ar2
081D 8A82      2137            mov     dpl,r2
081F 8B83      2138            mov     dph,r3
0821 8CF0      2139            mov     b,r4
0823 ED        2140            mov     a,r5
0824 120000    2141            lcall   __gptrput
0827 A3        2142            inc     dptr
0828 EE        2143            mov     a,r6
0829 120000    2144            lcall   __gptrput
082C           2145   ;        ControllerUI.h:80: cmd->right = 0;
082C 7402      2146            mov     a,#0x02
082E 2A        2147            add     a,r2
082F FD        2148            mov     r5,a
0830 E4        2149            clr     a
0831 3B        2150            addc    a,r3
0832 FE        2151            mov     r6,a
0833 8C07      2152            mov     ar7,r4
0835 8D82      2153            mov     dpl,r5
0837 8E83      2154            mov     dph,r6
0839 8FF0      2155            mov     b,r7
083B E4        2156            clr     a
083C 120000    2157            lcall   __gptrput
083F A3        2158            inc     dptr
0840 E4        2159            clr     a
0841 020000    2160            ljmp    __gptrput
0844           2161   L022020?:
0844           2162   ;        ControllerUI.h:82: cmd->left = 0;
0844 8A82      2163            mov     dpl,r2
0846 8B83      2164            mov     dph,r3
0848 8CF0      2165            mov     b,r4
084A E4        2166            clr     a
084B 120000    2167            lcall   __gptrput
084E A3        2168            inc     dptr
084F E4        2169            clr     a
0850 120000    2170            lcall   __gptrput
0853           2171   ;        ControllerUI.h:83: cmd->right = ((y+4)*(abs(x)))/4;
0853 7402      2172            mov     a,#0x02
0855 2A        2173            add     a,r2
0856 FD        2174            mov     r5,a
0857 E4        2175            clr     a
0858 3B        2176            addc    a,r3
0859 FE        2177            mov     r6,a
085A 8C07      2178            mov     ar7,r4
085C 7404      2179            mov     a,#0x04
085E 2520      2180            add     a,_Generate_Motor_Command_PARM_3
0860 F8        2181            mov     r0,a
0861 E4        2182            clr     a
0862 3521      2183            addc    a,(_Generate_Motor_Command_PARM_3 + 1)
0864 F9        2184            mov     r1,a
0865 85E082    2185            mov     dpl,_Generate_Motor_Command_PARM_2
0868 85E183    2186            mov     dph,(_Generate_Motor_Command_PARM_2 + 1)
086B C005      2187            push    ar5
086D C006      2188            push    ar6
086F C007      2189            push    ar7
0871 C000      2190            push    ar0
0873 C001      2191            push    ar1
0875 120000    2192            lcall   _abs
0878 858200    2193            mov     __mulint_PARM_2,dpl
087B 858301    2194            mov     (__mulint_PARM_2 + 1),dph
087E D001      2195            pop     ar1
0880 D000      2196            pop     ar0
0882 8882      2197            mov     dpl,r0
0884 8983      2198            mov     dph,r1
0886 120000    2199            lcall   __mulint
0889 A882      2200            mov     r0,dpl
088B A983      2201            mov     r1,dph
088D 750004    2202            mov     __divsint_PARM_2,#0x04
0890 E4        2203            clr     a
0891 F501      2204            mov     (__divsint_PARM_2 + 1),a
0893 8882      2205            mov     dpl,r0
0895 8983      2206            mov     dph,r1
0897 120000    2207            lcall   __divsint
089A A882      2208            mov     r0,dpl
089C A983      2209            mov     r1,dph
089E D007      2210            pop     ar7
08A0 D006      2211            pop     ar6
08A2 D005      2212            pop     ar5
08A4 8D82      2213            mov     dpl,r5
08A6 8E83      2214            mov     dph,r6
08A8 8FF0      2215            mov     b,r7
08AA E8        2216            mov     a,r0
08AB 120000    2217            lcall   __gptrput
08AE A3        2218            inc     dptr
08AF E9        2219            mov     a,r1
08B0 020000    2220            ljmp    __gptrput
08B3           2221   L022038?:
08B3           2222   ;        ControllerUI.h:88: if(x > 0){
08B3 C3        2223            clr     c
08B4 E4        2224            clr     a
08B5 95E0      2225            subb    a,_Generate_Motor_Command_PARM_2
08B7 E4        2226            clr     a
08B8 6480      2227            xrl     a,#0x80
08BA 85E1F0    2228            mov     b,(_Generate_Motor_Command_PARM_2 + 1)
08BD 63F080    2229            xrl     b,#0x80
08C0 95F0      2230            subb    a,b
08C2 4000      2231            jc      L022075?
08C4 020000    2232            ljmp    L022035?
08C7           2233   L022075?:
08C7           2234   ;        ControllerUI.h:89: if(x < -1*y){
08C7 C3        2235            clr     c
08C8 E4        2236            clr     a
08C9 9520      2237            subb    a,_Generate_Motor_Command_PARM_3
08CB FD        2238            mov     r5,a
08CC E4        2239            clr     a
08CD 9521      2240            subb    a,(_Generate_Motor_Command_PARM_3 + 1)
08CF FE        2241            mov     r6,a
08D0 C3        2242            clr     c
08D1 E5E0      2243            mov     a,_Generate_Motor_Command_PARM_2
08D3 9D        2244            subb    a,r5
08D4 E5E1      2245            mov     a,(_Generate_Motor_Command_PARM_2 + 1)
08D6 6480      2246            xrl     a,#0x80
08D8 8EF0      2247            mov     b,r6
08DA 63F080    2248            xrl     b,#0x80
08DD 95F0      2249            subb    a,b
08DF 5000      2250            jnc     L022026?
08E1           2251   ;        ControllerUI.h:90: cmd->left = y;
08E1 8A82      2252            mov     dpl,r2
08E3 8B83      2253            mov     dph,r3
08E5 8CF0      2254            mov     b,r4
08E7 E520      2255            mov     a,_Generate_Motor_Command_PARM_3
08E9 120000    2256            lcall   __gptrput
08EC A3        2257            inc     dptr
08ED E521      2258            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
08EF 120000    2259            lcall   __gptrput
08F2           2260   ;        ControllerUI.h:91: cmd->right = y + x/2;
08F2 7402      2261            mov     a,#0x02
08F4 2A        2262            add     a,r2
08F5 F530      2263            mov     _Generate_Motor_Command_sloc0_1_0,a
08F7 E4        2264            clr     a
08F8 3B        2265            addc    a,r3
08F9 F531      2266            mov     (_Generate_Motor_Command_sloc0_1_0 + 1),a
08FB 8C32      2267            mov     (_Generate_Motor_Command_sloc0_1_0 + 2),r4
08FD 750002    2268            mov     __divsint_PARM_2,#0x02
0900 E4        2269            clr     a
0901 F501      2270            mov     (__divsint_PARM_2 + 1),a
0903 85E082    2271            mov     dpl,_Generate_Motor_Command_PARM_2
0906 85E183    2272            mov     dph,(_Generate_Motor_Command_PARM_2 + 1)
0909 120000    2273            lcall   __divsint
090C AF82      2274            mov     r7,dpl
090E A883      2275            mov     r0,dph
0910 EF        2276            mov     a,r7
0911 2520      2277            add     a,_Generate_Motor_Command_PARM_3
0913 FF        2278            mov     r7,a
0914 E8        2279            mov     a,r0
0915 3521      2280            addc    a,(_Generate_Motor_Command_PARM_3 + 1)
0917 F8        2281            mov     r0,a
0918 853082    2282            mov     dpl,_Generate_Motor_Command_sloc0_1_0
091B 853183    2283            mov     dph,(_Generate_Motor_Command_sloc0_1_0 + 1)
091E 8532F0    2284            mov     b,(_Generate_Motor_Command_sloc0_1_0 + 2)
0921 EF        2285            mov     a,r7
0922 120000    2286            lcall   __gptrput
0925 A3        2287            inc     dptr
0926 E8        2288            mov     a,r0
0927 020000    2289            ljmp    __gptrput
092A           2290   L022026?:
092A           2291   ;        ControllerUI.h:92: }else if(x == -1*y){
092A ED        2292            mov     a,r5
092B B5E090    2293            cjne    a,_Generate_Motor_Command_PARM_2,L022023?
092E EE        2294            mov     a,r6
092F B5E190    2295            cjne    a,(_Generate_Motor_Command_PARM_2 + 1),L022023?
0932           2296   ;        ControllerUI.h:93: cmd->left = y;
0932 8A82      2297            mov     dpl,r2
0934 8B83      2298            mov     dph,r3
0936 8CF0      2299            mov     b,r4
0938 E520      2300            mov     a,_Generate_Motor_Command_PARM_3
093A 120000    2301            lcall   __gptrput
093D A3        2302            inc     dptr
093E E521      2303            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0940 120000    2304            lcall   __gptrput
0943           2305   ;        ControllerUI.h:94: cmd->right = y/2;
0943 7402      2306            mov     a,#0x02
0945 2A        2307            add     a,r2
0946 FD        2308            mov     r5,a
0947 E4        2309            clr     a
0948 3B        2310            addc    a,r3
0949 FE        2311            mov     r6,a
094A 8C07      2312            mov     ar7,r4
094C 750002    2313            mov     __divsint_PARM_2,#0x02
094F E4        2314            clr     a
0950 F501      2315            mov     (__divsint_PARM_2 + 1),a
0952 852082    2316            mov     dpl,_Generate_Motor_Command_PARM_3
0955 852183    2317            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
0958 C005      2318            push    ar5
095A C006      2319            push    ar6
095C C007      2320            push    ar7
095E 120000    2321            lcall   __divsint
0961 A882      2322            mov     r0,dpl
0963 A983      2323            mov     r1,dph
0965 D007      2324            pop     ar7
0967 D006      2325            pop     ar6
0969 D005      2326            pop     ar5
096B 8D82      2327            mov     dpl,r5
096D 8E83      2328            mov     dph,r6
096F 8FF0      2329            mov     b,r7
0971 E8        2330            mov     a,r0
0972 120000    2331            lcall   __gptrput
0975 A3        2332            inc     dptr
0976 E9        2333            mov     a,r1
0977 020000    2334            ljmp    __gptrput
097A           2335   L022023?:
097A           2336   ;        ControllerUI.h:96: cmd->left = -1*x;
097A C3        2337            clr     c
097B E4        2338            clr     a
097C 95E0      2339            subb    a,_Generate_Motor_Command_PARM_2
097E FD        2340            mov     r5,a
097F E4        2341            clr     a
0980 95E1      2342            subb    a,(_Generate_Motor_Command_PARM_2 + 1)
0982 FE        2343            mov     r6,a
0983 8A82      2344            mov     dpl,r2
0985 8B83      2345            mov     dph,r3
0987 8CF0      2346            mov     b,r4
0989 ED        2347            mov     a,r5
098A 120000    2348            lcall   __gptrput
098D A3        2349            inc     dptr
098E EE        2350            mov     a,r6
098F 120000    2351            lcall   __gptrput
0992           2352   ;        ControllerUI.h:97: cmd->right = y/2;
0992 7402      2353            mov     a,#0x02
0994 2A        2354            add     a,r2
0995 FD        2355            mov     r5,a
0996 E4        2356            clr     a
0997 3B        2357            addc    a,r3
0998 FE        2358            mov     r6,a
0999 8C07      2359            mov     ar7,r4
099B 750002    2360            mov     __divsint_PARM_2,#0x02
099E E4        2361            clr     a
099F F501      2362            mov     (__divsint_PARM_2 + 1),a
09A1 852082    2363            mov     dpl,_Generate_Motor_Command_PARM_3
09A4 852183    2364            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
09A7 C005      2365            push    ar5
09A9 C006      2366            push    ar6
09AB C007      2367            push    ar7
09AD 120000    2368            lcall   __divsint
09B0 A882      2369            mov     r0,dpl
09B2 A983      2370            mov     r1,dph
09B4 D007      2371            pop     ar7
09B6 D006      2372            pop     ar6
09B8 D005      2373            pop     ar5
09BA 8D82      2374            mov     dpl,r5
09BC 8E83      2375            mov     dph,r6
09BE 8FF0      2376            mov     b,r7
09C0 E8        2377            mov     a,r0
09C1 120000    2378            lcall   __gptrput
09C4 A3        2379            inc     dptr
09C5 E9        2380            mov     a,r1
09C6 020000    2381            ljmp    __gptrput
09C9           2382   L022035?:
09C9           2383   ;        ControllerUI.h:105: if(x > y){
09C9 C3        2384            clr     c
09CA E520      2385            mov     a,_Generate_Motor_Command_PARM_3
09CC 95E0      2386            subb    a,_Generate_Motor_Command_PARM_2
09CE E521      2387            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
09D0 6480      2388            xrl     a,#0x80
09D2 85E1F0    2389            mov     b,(_Generate_Motor_Command_PARM_2 + 1)
09D5 63F080    2390            xrl     b,#0x80
09D8 95F0      2391            subb    a,b
09DA 5000      2392            jnc     L022032?
09DC           2393   ;        ControllerUI.h:106: cmd->left = y - x/2;
09DC 750002    2394            mov     __divsint_PARM_2,#0x02
09DF E4        2395            clr     a
09E0 F501      2396            mov     (__divsint_PARM_2 + 1),a
09E2 85E082    2397            mov     dpl,_Generate_Motor_Command_PARM_2
09E5 85E183    2398            mov     dph,(_Generate_Motor_Command_PARM_2 + 1)
09E8 C002      2399            push    ar2
09EA C003      2400            push    ar3
09EC C004      2401            push    ar4
09EE 120000    2402            lcall   __divsint
09F1 AD82      2403            mov     r5,dpl
09F3 AE83      2404            mov     r6,dph
09F5 D004      2405            pop     ar4
09F7 D003      2406            pop     ar3
09F9 D002      2407            pop     ar2
09FB E520      2408            mov     a,_Generate_Motor_Command_PARM_3
09FD C3        2409            clr     c
09FE 9D        2410            subb    a,r5
09FF FD        2411            mov     r5,a
0A00 E521      2412            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0A02 9E        2413            subb    a,r6
0A03 FE        2414            mov     r6,a
0A04 8A82      2415            mov     dpl,r2
0A06 8B83      2416            mov     dph,r3
0A08 8CF0      2417            mov     b,r4
0A0A ED        2418            mov     a,r5
0A0B 120000    2419            lcall   __gptrput
0A0E A3        2420            inc     dptr
0A0F EE        2421            mov     a,r6
0A10 120000    2422            lcall   __gptrput
0A13           2423   ;        ControllerUI.h:107: cmd->right = y;
0A13 7402      2424            mov     a,#0x02
0A15 2A        2425            add     a,r2
0A16 FD        2426            mov     r5,a
0A17 E4        2427            clr     a
0A18 3B        2428            addc    a,r3
0A19 FE        2429            mov     r6,a
0A1A 8C07      2430            mov     ar7,r4
0A1C 8D82      2431            mov     dpl,r5
0A1E 8E83      2432            mov     dph,r6
0A20 8FF0      2433            mov     b,r7
0A22 E520      2434            mov     a,_Generate_Motor_Command_PARM_3
0A24 120000    2435            lcall   __gptrput
0A27 A3        2436            inc     dptr
0A28 E521      2437            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0A2A 020000    2438            ljmp    __gptrput
0A2D           2439   L022032?:
0A2D           2440   ;        ControllerUI.h:108: }else if(x == y){
0A2D E520      2441            mov     a,_Generate_Motor_Command_PARM_3
0A2F B5E010    2442            cjne    a,_Generate_Motor_Command_PARM_2,L022029?
0A32 E521      2443            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0A34 B5E110    2444            cjne    a,(_Generate_Motor_Command_PARM_2 + 1),L022029?
0A37           2445   ;        ControllerUI.h:109: cmd->left = y/2;
0A37 750002    2446            mov     __divsint_PARM_2,#0x02
0A3A E4        2447            clr     a
0A3B F501      2448            mov     (__divsint_PARM_2 + 1),a
0A3D 852082    2449            mov     dpl,_Generate_Motor_Command_PARM_3
0A40 852183    2450            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
0A43 C002      2451            push    ar2
0A45 C003      2452            push    ar3
0A47 C004      2453            push    ar4
0A49 120000    2454            lcall   __divsint
0A4C AD82      2455            mov     r5,dpl
0A4E AE83      2456            mov     r6,dph
0A50 D004      2457            pop     ar4
0A52 D003      2458            pop     ar3
0A54 D002      2459            pop     ar2
0A56 8A82      2460            mov     dpl,r2
0A58 8B83      2461            mov     dph,r3
0A5A 8CF0      2462            mov     b,r4
0A5C ED        2463            mov     a,r5
0A5D 120000    2464            lcall   __gptrput
0A60 A3        2465            inc     dptr
0A61 EE        2466            mov     a,r6
0A62 120000    2467            lcall   __gptrput
0A65           2468   ;        ControllerUI.h:110: cmd->right = y;
0A65 7402      2469            mov     a,#0x02
0A67 2A        2470            add     a,r2
0A68 FD        2471            mov     r5,a
0A69 E4        2472            clr     a
0A6A 3B        2473            addc    a,r3
0A6B FE        2474            mov     r6,a
0A6C 8C07      2475            mov     ar7,r4
0A6E 8D82      2476            mov     dpl,r5
0A70 8E83      2477            mov     dph,r6
0A72 8FF0      2478            mov     b,r7
0A74 E520      2479            mov     a,_Generate_Motor_Command_PARM_3
0A76 120000    2480            lcall   __gptrput
0A79 A3        2481            inc     dptr
0A7A E521      2482            mov     a,(_Generate_Motor_Command_PARM_3 + 1)
0A7C 020000    2483            ljmp    __gptrput
0A7F           2484   L022029?:
0A7F           2485   ;        ControllerUI.h:112: cmd->left = y/2;
0A7F 750002    2486            mov     __divsint_PARM_2,#0x02
0A82 E4        2487            clr     a
0A83 F501      2488            mov     (__divsint_PARM_2 + 1),a
0A85 852082    2489            mov     dpl,_Generate_Motor_Command_PARM_3
0A88 852183    2490            mov     dph,(_Generate_Motor_Command_PARM_3 + 1)
0A8B C002      2491            push    ar2
0A8D C003      2492            push    ar3
0A8F C004      2493            push    ar4
0A91 120000    2494            lcall   __divsint
0A94 AD82      2495            mov     r5,dpl
0A96 AE83      2496            mov     r6,dph
0A98 D004      2497            pop     ar4
0A9A D003      2498            pop     ar3
0A9C D002      2499            pop     ar2
0A9E 8A82      2500            mov     dpl,r2
0AA0 8B83      2501            mov     dph,r3
0AA2 8CF0      2502            mov     b,r4
0AA4 ED        2503            mov     a,r5
0AA5 120000    2504            lcall   __gptrput
0AA8 A3        2505            inc     dptr
0AA9 EE        2506            mov     a,r6
0AAA 120000    2507            lcall   __gptrput
0AAD           2508   ;        ControllerUI.h:113: cmd->right = x;
0AAD 7402      2509            mov     a,#0x02
0AAF 2A        2510            add     a,r2
0AB0 FA        2511            mov     r2,a
0AB1 E4        2512            clr     a
0AB2 3B        2513            addc    a,r3
0AB3 FB        2514            mov     r3,a
0AB4 8A82      2515            mov     dpl,r2
0AB6 8B83      2516            mov     dph,r3
0AB8 8CF0      2517            mov     b,r4
0ABA E5E0      2518            mov     a,_Generate_Motor_Command_PARM_2
0ABC 120000    2519            lcall   __gptrput
0ABF A3        2520            inc     dptr
0AC0 E5E1      2521            mov     a,(_Generate_Motor_Command_PARM_2 + 1)
0AC2 020000    2522            ljmp    __gptrput
0AC5           2523   ;------------------------------------------------------------
0AC5           2524   ;Allocation info for local variables in function 'Generate_Pivot_Command'
0AC5           2525   ;------------------------------------------------------------
0AC5           2526   ;y1                        Allocated with name '_Generate_Pivot_Command_PARM_2'
0AC5           2527   ;y2                        Allocated with name '_Generate_Pivot_Command_PARM_3'
0AC5           2528   ;cmd                       Allocated to registers r2 r3 r4 
0AC5           2529   ;------------------------------------------------------------
0AC5           2530   ;        ControllerUI.h:123: void Generate_Pivot_Command(Motor* cmd, int y1, int y2){
0AC5           2531   ;        -----------------------------------------
0AC5           2532   ;         function Generate_Pivot_Command
0AC5           2533   ;        -----------------------------------------
0AC5           2534   _Generate_Pivot_Command:
0AC5           2535   ;        ControllerUI.h:124: cmd->left = y1;
0AC5 AA82      2536            mov     r2,dpl
0AC7 AB83      2537            mov     r3,dph
0AC9 ACF0      2538            mov     r4,b
0ACB E500      2539            mov     a,_Generate_Pivot_Command_PARM_2
0ACD 120000    2540            lcall   __gptrput
0AD0 A3        2541            inc     dptr
0AD1 E501      2542            mov     a,(_Generate_Pivot_Command_PARM_2 + 1)
0AD3 120000    2543            lcall   __gptrput
0AD6           2544   ;        ControllerUI.h:125: cmd->right = y2;
0AD6 7402      2545            mov     a,#0x02
0AD8 2A        2546            add     a,r2
0AD9 FA        2547            mov     r2,a
0ADA E4        2548            clr     a
0ADB 3B        2549            addc    a,r3
0ADC FB        2550            mov     r3,a
0ADD 8A82      2551            mov     dpl,r2
0ADF 8B83      2552            mov     dph,r3
0AE1 8CF0      2553            mov     b,r4
0AE3 E540      2554            mov     a,_Generate_Pivot_Command_PARM_3
0AE5 120000    2555            lcall   __gptrput
0AE8 A3        2556            inc     dptr
0AE9 E541      2557            mov     a,(_Generate_Pivot_Command_PARM_3 + 1)
0AEB 020000    2558            ljmp    __gptrput
0AEE           2559   ;------------------------------------------------------------
0AEE           2560   ;Allocation info for local variables in function 'Weigh_Dual_Inputs'
0AEE           2561   ;------------------------------------------------------------
0AEE           2562   ;m1                        Allocated with name '_Weigh_Dual_Inputs_PARM_2'
0AEE           2563   ;m2                        Allocated with name '_Weigh_Dual_Inputs_PARM_3'
0AEE           2564   ;ratio                     Allocated with name '_Weigh_Dual_Inputs_PARM_4'
0AEE           2565   ;mout                      Allocated with name '_Weigh_Dual_Inputs_mout_1_144'
0AEE           2566   ;sloc0                     Allocated with name '_Weigh_Dual_Inputs_sloc0_1_0'
0AEE           2567   ;sloc1                     Allocated with name '_Weigh_Dual_Inputs_sloc1_1_0'
0AEE           2568   ;sloc2                     Allocated with name '_Weigh_Dual_Inputs_sloc2_1_0'
0AEE           2569   ;sloc3                     Allocated with name '_Weigh_Dual_Inputs_sloc3_1_0'
0AEE           2570   ;------------------------------------------------------------
0AEE           2571   ;        ControllerUI.h:128: void Weigh_Dual_Inputs(Motor* mout, Motor* m1, Motor* m2,float ratio){
0AEE           2572   ;        -----------------------------------------
0AEE           2573   ;         function Weigh_Dual_Inputs
0AEE           2574   ;        -----------------------------------------
0AEE           2575   _Weigh_Dual_Inputs:
0AEE 858270    2576            mov     _Weigh_Dual_Inputs_mout_1_144,dpl
0AF1 858371    2577            mov     (_Weigh_Dual_Inputs_mout_1_144 + 1),dph
0AF4 85F072    2578            mov     (_Weigh_Dual_Inputs_mout_1_144 + 2),b
0AF7           2579   ;        ControllerUI.h:129: mout->left = (int)((m1->left)*(1-ratio)+(m2->left)*ratio);
0AF7 85E0F0    2580            mov     _Weigh_Dual_Inputs_sloc1_1_0,_Weigh_Dual_Inputs_PARM_2
0AFA 85E1F1    2581            mov     (_Weigh_Dual_Inputs_sloc1_1_0 + 1),(_Weigh_Dual_Inputs_PARM_2 + 1)
0AFD 85E2F2    2582            mov     (_Weigh_Dual_Inputs_sloc1_1_0 + 2),(_Weigh_Dual_Inputs_PARM_2 + 2)
0B00 85F082    2583            mov     dpl,_Weigh_Dual_Inputs_sloc1_1_0
0B03 85F183    2584            mov     dph,(_Weigh_Dual_Inputs_sloc1_1_0 + 1)
0B06 85F2F0    2585            mov     b,(_Weigh_Dual_Inputs_sloc1_1_0 + 2)
0B09 120000    2586            lcall   __gptrget
0B0C F570      2587            mov     _Weigh_Dual_Inputs_sloc0_1_0,a
0B0E A3        2588            inc     dptr
0B0F 120000    2589            lcall   __gptrget
0B12 F571      2590            mov     (_Weigh_Dual_Inputs_sloc0_1_0 + 1),a
0B14 C020      2591            push    _Weigh_Dual_Inputs_PARM_4
0B16 C021      2592            push    (_Weigh_Dual_Inputs_PARM_4 + 1)
0B18 C022      2593            push    (_Weigh_Dual_Inputs_PARM_4 + 2)
0B1A C023      2594            push    (_Weigh_Dual_Inputs_PARM_4 + 3)
0B1C 900000    2595            mov     dptr,#0x0000
0B1F 75F080    2596            mov     b,#0x80
0B22 743F      2597            mov     a,#0x3F
0B24 120000    2598            lcall   ___fssub
0B27 AA82      2599            mov     r2,dpl
0B29 AB83      2600            mov     r3,dph
0B2B ACF0      2601            mov     r4,b
0B2D F8        2602            mov     r0,a
0B2E E581      2603            mov     a,sp
0B30 24FC      2604            add     a,#0xfc
0B32 F581      2605            mov     sp,a
0B34 857082    2606            mov     dpl,_Weigh_Dual_Inputs_sloc0_1_0
0B37 857183    2607            mov     dph,(_Weigh_Dual_Inputs_sloc0_1_0 + 1)
0B3A C002      2608            push    ar2
0B3C C003      2609            push    ar3
0B3E C004      2610            push    ar4
0B40 C000      2611            push    ar0
0B42 120000    2612            lcall   ___sint2fs
0B45 A982      2613            mov     r1,dpl
0B47 AD83      2614            mov     r5,dph
0B49 AEF0      2615            mov     r6,b
0B4B FF        2616            mov     r7,a
0B4C D000      2617            pop     ar0
0B4E D004      2618            pop     ar4
0B50 D003      2619            pop     ar3
0B52 D002      2620            pop     ar2
0B54 C002      2621            push    ar2
0B56 C003      2622            push    ar3
0B58 C004      2623            push    ar4
0B5A C000      2624            push    ar0
0B5C C002      2625            push    ar2
0B5E C003      2626            push    ar3
0B60 C004      2627            push    ar4
0B62 C000      2628            push    ar0
0B64 8982      2629            mov     dpl,r1
0B66 8D83      2630            mov     dph,r5
0B68 8EF0      2631            mov     b,r6
0B6A EF        2632            mov     a,r7
0B6B 120000    2633            lcall   ___fsmul
0B6E 8582B0    2634            mov     _Weigh_Dual_Inputs_sloc2_1_0,dpl
0B71 8583B1    2635            mov     (_Weigh_Dual_Inputs_sloc2_1_0 + 1),dph
0B74 85F0B2    2636            mov     (_Weigh_Dual_Inputs_sloc2_1_0 + 2),b
0B77 F5B3      2637            mov     (_Weigh_Dual_Inputs_sloc2_1_0 + 3),a
0B79 E581      2638            mov     a,sp
0B7B 24FC      2639            add     a,#0xfc
0B7D F581      2640            mov     sp,a
0B7F 85E0B0    2641            mov     _Weigh_Dual_Inputs_sloc3_1_0,_Weigh_Dual_Inputs_PARM_3
0B82 85E1B1    2642            mov     (_Weigh_Dual_Inputs_sloc3_1_0 + 1),(_Weigh_Dual_Inputs_PARM_3 + 1)
0B85 85E2B2    2643            mov     (_Weigh_Dual_Inputs_sloc3_1_0 + 2),(_Weigh_Dual_Inputs_PARM_3 + 2)
0B88 85B082    2644            mov     dpl,_Weigh_Dual_Inputs_sloc3_1_0
0B8B 85B183    2645            mov     dph,(_Weigh_Dual_Inputs_sloc3_1_0 + 1)
0B8E 85B2F0    2646            mov     b,(_Weigh_Dual_Inputs_sloc3_1_0 + 2)
0B91 120000    2647            lcall   __gptrget
0B94 F9        2648            mov     r1,a
0B95 A3        2649            inc     dptr
0B96 120000    2650            lcall   __gptrget
0B99 FD        2651            mov     r5,a
0B9A 8982      2652            mov     dpl,r1
0B9C 8D83      2653            mov     dph,r5
0B9E 120000    2654            lcall   ___sint2fs
0BA1 AD82      2655            mov     r5,dpl
0BA3 AE83      2656            mov     r6,dph
0BA5 AFF0      2657            mov     r7,b
0BA7 F9        2658            mov     r1,a
0BA8 C020      2659            push    _Weigh_Dual_Inputs_PARM_4
0BAA C021      2660            push    (_Weigh_Dual_Inputs_PARM_4 + 1)
0BAC C022      2661            push    (_Weigh_Dual_Inputs_PARM_4 + 2)
0BAE C023      2662            push    (_Weigh_Dual_Inputs_PARM_4 + 3)
0BB0 8D82      2663            mov     dpl,r5
0BB2 8E83      2664            mov     dph,r6
0BB4 8FF0      2665            mov     b,r7
0BB6 E9        2666            mov     a,r1
0BB7 120000    2667            lcall   ___fsmul
0BBA AD82      2668            mov     r5,dpl
0BBC AE83      2669            mov     r6,dph
0BBE AFF0      2670            mov     r7,b
0BC0 F9        2671            mov     r1,a
0BC1 E581      2672            mov     a,sp
0BC3 24FC      2673            add     a,#0xfc
0BC5 F581      2674            mov     sp,a
0BC7 C005      2675            push    ar5
0BC9 C006      2676            push    ar6
0BCB C007      2677            push    ar7
0BCD C001      2678            push    ar1
0BCF 85B082    2679            mov     dpl,_Weigh_Dual_Inputs_sloc2_1_0
0BD2 85B183    2680            mov     dph,(_Weigh_Dual_Inputs_sloc2_1_0 + 1)
0BD5 85B2F0    2681            mov     b,(_Weigh_Dual_Inputs_sloc2_1_0 + 2)
0BD8 E5B3      2682            mov     a,(_Weigh_Dual_Inputs_sloc2_1_0 + 3)
0BDA 120000    2683            lcall   ___fsadd
0BDD AD82      2684            mov     r5,dpl
0BDF AE83      2685            mov     r6,dph
0BE1 AFF0      2686            mov     r7,b
0BE3 F9        2687            mov     r1,a
0BE4 E581      2688            mov     a,sp
0BE6 24FC      2689            add     a,#0xfc
0BE8 F581      2690            mov     sp,a
0BEA 8D82      2691            mov     dpl,r5
0BEC 8E83      2692            mov     dph,r6
0BEE 8FF0      2693            mov     b,r7
0BF0 E9        2694            mov     a,r1
0BF1 120000    2695            lcall   ___fs2sint
0BF4 AD82      2696            mov     r5,dpl
0BF6 AE83      2697            mov     r6,dph
0BF8 857082    2698            mov     dpl,_Weigh_Dual_Inputs_mout_1_144
0BFB 857183    2699            mov     dph,(_Weigh_Dual_Inputs_mout_1_144 + 1)
0BFE 8572F0    2700            mov     b,(_Weigh_Dual_Inputs_mout_1_144 + 2)
0C01 ED        2701            mov     a,r5
0C02 120000    2702            lcall   __gptrput
0C05 A3        2703            inc     dptr
0C06 EE        2704            mov     a,r6
0C07 120000    2705            lcall   __gptrput
0C0A           2706   ;        ControllerUI.h:130: mout->right = (int)((m1->right)*(1-ratio)+(m2->right)*ratio);
0C0A 7402      2707            mov     a,#0x02
0C0C 2570      2708            add     a,_Weigh_Dual_Inputs_mout_1_144
0C0E F5B0      2709            mov     _Weigh_Dual_Inputs_sloc2_1_0,a
0C10 E4        2710            clr     a
0C11 3571      2711            addc    a,(_Weigh_Dual_Inputs_mout_1_144 + 1)
0C13 F5B1      2712            mov     (_Weigh_Dual_Inputs_sloc2_1_0 + 1),a
0C15 8572B2    2713            mov     (_Weigh_Dual_Inputs_sloc2_1_0 + 2),(_Weigh_Dual_Inputs_mout_1_144 + 2)
0C18 7402      2714            mov     a,#0x02
0C1A 25F0      2715            add     a,_Weigh_Dual_Inputs_sloc1_1_0
0C1C F9        2716            mov     r1,a
0C1D E4        2717            clr     a
0C1E 35F1      2718            addc    a,(_Weigh_Dual_Inputs_sloc1_1_0 + 1)
0C20 FD        2719            mov     r5,a
0C21 AEF2      2720            mov     r6,(_Weigh_Dual_Inputs_sloc1_1_0 + 2)
0C23 8982      2721            mov     dpl,r1
0C25 8D83      2722            mov     dph,r5
0C27 8EF0      2723            mov     b,r6
0C29 120000    2724            lcall   __gptrget
0C2C F9        2725            mov     r1,a
0C2D A3        2726            inc     dptr
0C2E 120000    2727            lcall   __gptrget
0C31 FD        2728            mov     r5,a
0C32 8982      2729            mov     dpl,r1
0C34 8D83      2730            mov     dph,r5
0C36 120000    2731            lcall   ___sint2fs
0C39 120000    2732            lcall   ___fsmul
0C3C AA82      2733            mov     r2,dpl
0C3E AB83      2734            mov     r3,dph
0C40 ACF0      2735            mov     r4,b
0C42 FD        2736            mov     r5,a
0C43 E581      2737            mov     a,sp
0C45 24FC      2738            add     a,#0xfc
0C47 F581      2739            mov     sp,a
0C49 7402      2740            mov     a,#0x02
0C4B 25B0      2741            add     a,_Weigh_Dual_Inputs_sloc3_1_0
0C4D FE        2742            mov     r6,a
0C4E E4        2743            clr     a
0C4F 35B1      2744            addc    a,(_Weigh_Dual_Inputs_sloc3_1_0 + 1)
0C51 FF        2745            mov     r7,a
0C52 A8B2      2746            mov     r0,(_Weigh_Dual_Inputs_sloc3_1_0 + 2)
0C54 8E82      2747            mov     dpl,r6
0C56 8F83      2748            mov     dph,r7
0C58 88F0      2749            mov     b,r0
0C5A 120000    2750            lcall   __gptrget
0C5D FE        2751            mov     r6,a
0C5E A3        2752            inc     dptr
0C5F 120000    2753            lcall   __gptrget
0C62 FF        2754            mov     r7,a
0C63 8E82      2755            mov     dpl,r6
0C65 8F83      2756            mov     dph,r7
0C67 C002      2757            push    ar2
0C69 C003      2758            push    ar3
0C6B C004      2759            push    ar4
0C6D C005      2760            push    ar5
0C6F 120000    2761            lcall   ___sint2fs
0C72 AE82      2762            mov     r6,dpl
0C74 AF83      2763            mov     r7,dph
0C76 A8F0      2764            mov     r0,b
0C78 F9        2765            mov     r1,a
0C79 C020      2766            push    _Weigh_Dual_Inputs_PARM_4
0C7B C021      2767            push    (_Weigh_Dual_Inputs_PARM_4 + 1)
0C7D C022      2768            push    (_Weigh_Dual_Inputs_PARM_4 + 2)
0C7F C023      2769            push    (_Weigh_Dual_Inputs_PARM_4 + 3)
0C81 8E82      2770            mov     dpl,r6
0C83 8F83      2771            mov     dph,r7
0C85 88F0      2772            mov     b,r0
0C87 E9        2773            mov     a,r1
0C88 120000    2774            lcall   ___fsmul
0C8B AE82      2775            mov     r6,dpl
0C8D AF83      2776            mov     r7,dph
0C8F A8F0      2777            mov     r0,b
0C91 F9        2778            mov     r1,a
0C92 E581      2779            mov     a,sp
0C94 24FC      2780            add     a,#0xfc
0C96 F581      2781            mov     sp,a
0C98 D005      2782            pop     ar5
0C9A D004      2783            pop     ar4
0C9C D003      2784            pop     ar3
0C9E D002      2785            pop     ar2
0CA0 C006      2786            push    ar6
0CA2 C007      2787            push    ar7
0CA4 C000      2788            push    ar0
0CA6 C001      2789            push    ar1
0CA8 8A82      2790            mov     dpl,r2
0CAA 8B83      2791            mov     dph,r3
0CAC 8CF0      2792            mov     b,r4
0CAE ED        2793            mov     a,r5
0CAF 120000    2794            lcall   ___fsadd
0CB2 AA82      2795            mov     r2,dpl
0CB4 AB83      2796            mov     r3,dph
0CB6 ACF0      2797            mov     r4,b
0CB8 FD        2798            mov     r5,a
0CB9 E581      2799            mov     a,sp
0CBB 24FC      2800            add     a,#0xfc
0CBD F581      2801            mov     sp,a
0CBF 8A82      2802            mov     dpl,r2
0CC1 8B83      2803            mov     dph,r3
0CC3 8CF0      2804            mov     b,r4
0CC5 ED        2805            mov     a,r5
0CC6 120000    2806            lcall   ___fs2sint
0CC9 AA82      2807            mov     r2,dpl
0CCB AB83      2808            mov     r3,dph
0CCD 85B082    2809            mov     dpl,_Weigh_Dual_Inputs_sloc2_1_0
0CD0 85B183    2810            mov     dph,(_Weigh_Dual_Inputs_sloc2_1_0 + 1)
0CD3 85B2F0    2811            mov     b,(_Weigh_Dual_Inputs_sloc2_1_0 + 2)
0CD6 EA        2812            mov     a,r2
0CD7 120000    2813            lcall   __gptrput
0CDA A3        2814            inc     dptr
0CDB EB        2815            mov     a,r3
0CDC 020000    2816            ljmp    __gptrput
0CDF           2817   ;------------------------------------------------------------
0CDF           2818   ;Allocation info for local variables in function 'Wait_For_Calibration'
0CDF           2819   ;------------------------------------------------------------
0CDF           2820   ;b1                        Allocated to registers r2 r3 r4 r5 
0CDF           2821   ;b2                        Allocated to registers r6 r7 r0 r1 
0CDF           2822   ;------------------------------------------------------------
0CDF           2823   ;        ControllerUI.h:134: void Wait_For_Calibration(){
0CDF           2824   ;        -----------------------------------------
0CDF           2825   ;         function Wait_For_Calibration
0CDF           2826   ;        -----------------------------------------
0CDF           2827   _Wait_For_Calibration:
0CDF           2828   ;        ControllerUI.h:138: while(1){
0CDF           2829   L025012?:
0CDF           2830   ;        ControllerUI.h:139: b1 = Volts_at_Pin(QFP32_MUX_P2_6);
0CDF 758213    2831            mov     dpl,#0x13
0CE2 120000    2832            lcall   _Volts_at_Pin
0CE5 AA82      2833            mov     r2,dpl
0CE7 AB83      2834            mov     r3,dph
0CE9 ACF0      2835            mov     r4,b
0CEB FD        2836            mov     r5,a
0CEC           2837   ;        ControllerUI.h:140: b2 = Volts_at_Pin(QFP32_MUX_P2_1);
0CEC 75820E    2838            mov     dpl,#0x0E
0CEF C002      2839            push    ar2
0CF1 C003      2840            push    ar3
0CF3 C004      2841            push    ar4
0CF5 C005      2842            push    ar5
0CF7 120000    2843            lcall   _Volts_at_Pin
0CFA AE82      2844            mov     r6,dpl
0CFC AF83      2845            mov     r7,dph
0CFE A8F0      2846            mov     r0,b
0D00 F9        2847            mov     r1,a
0D01 D005      2848            pop     ar5
0D03 D004      2849            pop     ar4
0D05 D003      2850            pop     ar3
0D07 D002      2851            pop     ar2
0D09           2852   ;        ControllerUI.h:141: if((b1 == 0.0) || (b2 == 0.0)){
0D09 EA        2853            mov     a,r2
0D0A 4B        2854            orl     a,r3
0D0B 4C        2855            orl     a,r4
0D0C 8DF0      2856            mov     b,r5
0D0E C2F7      2857            clr     b.7 ; Clear the sign bit
0D10 45F0      2858            orl     a,b
0D12 6000      2859            jz      L025001?
0D14 EE        2860            mov     a,r6
0D15 4F        2861            orl     a,r7
0D16 48        2862            orl     a,r0
0D17 89F0      2863            mov     b,r1
0D19 C2F7      2864            clr     b.7 ; Clear the sign bit
0D1B 45F0      2865            orl     a,b
0D1D 7000      2866            jnz     L025002?
0D1F           2867   L025001?:
0D1F           2868   ;        ControllerUI.h:142: waitms(2000); //waits 2 seconds
0D1F 9007D0    2869            mov     dptr,#0x07D0
0D22 C002      2870            push    ar2
0D24 C003      2871            push    ar3
0D26 C004      2872            push    ar4
0D28 C005      2873            push    ar5
0D2A C006      2874            push    ar6
0D2C C007      2875            push    ar7
0D2E C000      2876            push    ar0
0D30 C001      2877            push    ar1
0D32 120000    2878            lcall   _waitms
0D35 D001      2879            pop     ar1
0D37 D000      2880            pop     ar0
0D39 D007      2881            pop     ar7
0D3B D006      2882            pop     ar6
0D3D D005      2883            pop     ar5
0D3F D004      2884            pop     ar4
0D41 D003      2885            pop     ar3
0D43 D002      2886            pop     ar2
0D45           2887   L025002?:
0D45           2888   ;        ControllerUI.h:144: if((b1 == 0.0) || (b2 == 0.0)){
0D45 EA        2889            mov     a,r2
0D46 4B        2890            orl     a,r3
0D47 4C        2891            orl     a,r4
0D48 8DF0      2892            mov     b,r5
0D4A C2F7      2893            clr     b.7 ; Clear the sign bit
0D4C 45F0      2894            orl     a,b
0D4E 6000      2895            jz      L025005?
0D50 EE        2896            mov     a,r6
0D51 4F        2897            orl     a,r7
0D52 48        2898            orl     a,r0
0D53 89F0      2899            mov     b,r1
0D55 C2F7      2900            clr     b.7 ; Clear the sign bit
0D57 45F0      2901            orl     a,b
0D59 6000      2902            jz      L025025?
0D5B 020000    2903            ljmp    L025012?
0D5E           2904   L025025?:
0D5E           2905   ;        ControllerUI.h:145: while((Volts_at_Pin(QFP32_MUX_P2_6) == 0.0)||(Volts_at_Pin(QFP32_MUX_P2_1) == 0.0));
0D5E           2906   L025005?:
0D5E 758213    2907            mov     dpl,#0x13
0D61 120000    2908            lcall   _Volts_at_Pin
0D64 AA82      2909            mov     r2,dpl
0D66 AB83      2910            mov     r3,dph
0D68 ACF0      2911            mov     r4,b
0D6A FD        2912            mov     r5,a
0D6B EA        2913            mov     a,r2
0D6C 4B        2914            orl     a,r3
0D6D 4C        2915            orl     a,r4
0D6E 8DF0      2916            mov     b,r5
0D70 C2F7      2917            clr     b.7 ; Clear the sign bit
0D72 45F0      2918            orl     a,b
0D74 6000      2919            jz      L025005?
0D76 75820E    2920            mov     dpl,#0x0E
0D79 120000    2921            lcall   _Volts_at_Pin
0D7C AA82      2922            mov     r2,dpl
0D7E AB83      2923            mov     r3,dph
0D80 ACF0      2924            mov     r4,b
0D82 FD        2925            mov     r5,a
0D83 EA        2926            mov     a,r2
0D84 4B        2927            orl     a,r3
0D85 4C        2928            orl     a,r4
0D86 8DF0      2929            mov     b,r5
0D88 C2F7      2930            clr     b.7 ; Clear the sign bit
0D8A 45F0      2931            orl     a,b
0D8C 6000      2932            jz      L025005?
0D8E           2933   ;        ControllerUI.h:146: return;
0D8E 22        2934            ret
0D8F           2935   ;------------------------------------------------------------
0D8F           2936   ;Allocation info for local variables in function 'LCD_pulse'
0D8F           2937   ;------------------------------------------------------------
0D8F           2938   ;------------------------------------------------------------
0D8F           2939   ;        ControllerLCD.h:13: void LCD_pulse (void)
0D8F           2940   ;        -----------------------------------------
0D8F           2941   ;         function LCD_pulse
0D8F           2942   ;        -----------------------------------------
0D8F           2943   _LCD_pulse:
0D8F           2944   ;        ControllerLCD.h:15: LCD_E=1;
0D8F D2A0      2945            setb    _P2_0
0D91           2946   ;        ControllerLCD.h:16: Timer3us(40);
0D91 758228    2947            mov     dpl,#0x28
0D94 120000    2948            lcall   _Timer3us
0D97           2949   ;        ControllerLCD.h:17: LCD_E=0;
0D97 C2A0      2950            clr     _P2_0
0D99 22        2951            ret
0D9A           2952   ;------------------------------------------------------------
0D9A           2953   ;Allocation info for local variables in function 'LCD_byte'
0D9A           2954   ;------------------------------------------------------------
0D9A           2955   ;x                         Allocated to registers r2 
0D9A           2956   ;------------------------------------------------------------
0D9A           2957   ;        ControllerLCD.h:20: void LCD_byte (unsigned char x)
0D9A           2958   ;        -----------------------------------------
0D9A           2959   ;         function LCD_byte
0D9A           2960   ;        -----------------------------------------
0D9A           2961   _LCD_byte:
0D9A AA82      2962            mov     r2,dpl
0D9C           2963   ;        ControllerLCD.h:23: ACC=x; //Send high nible
0D9C 8AE0      2964            mov     _ACC,r2
0D9E           2965   ;        ControllerLCD.h:24: LCD_D7=ACC_7;
0D9E A2E7      2966            mov     c,_ACC_7
0DA0 9290      2967            mov     _P1_0,c
0DA2           2968   ;        ControllerLCD.h:25: LCD_D6=ACC_6;
0DA2 A2E6      2969            mov     c,_ACC_6
0DA4 9291      2970            mov     _P1_1,c
0DA6           2971   ;        ControllerLCD.h:26: LCD_D5=ACC_5;
0DA6 A2E5      2972            mov     c,_ACC_5
0DA8 9292      2973            mov     _P1_2,c
0DAA           2974   ;        ControllerLCD.h:27: LCD_D4=ACC_4;
0DAA A2E4      2975            mov     c,_ACC_4
0DAC 9293      2976            mov     _P1_3,c
0DAE           2977   ;        ControllerLCD.h:28: LCD_pulse();
0DAE C002      2978            push    ar2
0DB0 120000    2979            lcall   _LCD_pulse
0DB3           2980   ;        ControllerLCD.h:29: Timer3us(40);
0DB3 758228    2981            mov     dpl,#0x28
0DB6 120000    2982            lcall   _Timer3us
0DB9 D002      2983            pop     ar2
0DBB           2984   ;        ControllerLCD.h:30: ACC=x; //Send low nible
0DBB 8AE0      2985            mov     _ACC,r2
0DBD           2986   ;        ControllerLCD.h:31: LCD_D7=ACC_3;
0DBD A2E3      2987            mov     c,_ACC_3
0DBF 9290      2988            mov     _P1_0,c
0DC1           2989   ;        ControllerLCD.h:32: LCD_D6=ACC_2;
0DC1 A2E2      2990            mov     c,_ACC_2
0DC3 9291      2991            mov     _P1_1,c
0DC5           2992   ;        ControllerLCD.h:33: LCD_D5=ACC_1;
0DC5 A2E1      2993            mov     c,_ACC_1
0DC7 9292      2994            mov     _P1_2,c
0DC9           2995   ;        ControllerLCD.h:34: LCD_D4=ACC_0;
0DC9 A2E0      2996            mov     c,_ACC_0
0DCB 9293      2997            mov     _P1_3,c
0DCD           2998   ;        ControllerLCD.h:35: LCD_pulse();
0DCD 020000    2999            ljmp    _LCD_pulse
0DD0           3000   ;------------------------------------------------------------
0DD0           3001   ;Allocation info for local variables in function 'WriteData'
0DD0           3002   ;------------------------------------------------------------
0DD0           3003   ;x                         Allocated to registers r2 
0DD0           3004   ;------------------------------------------------------------
0DD0           3005   ;        ControllerLCD.h:38: void WriteData (unsigned char x)
0DD0           3006   ;        -----------------------------------------
0DD0           3007   ;         function WriteData
0DD0           3008   ;        -----------------------------------------
0DD0           3009   _WriteData:
0DD0 AA82      3010            mov     r2,dpl
0DD2           3011   ;        ControllerLCD.h:40: LCD_RS=1;
0DD2 D297      3012            setb    _P1_7
0DD4           3013   ;        ControllerLCD.h:41: LCD_byte(x);
0DD4 8A82      3014            mov     dpl,r2
0DD6 120000    3015            lcall   _LCD_byte
0DD9           3016   ;        ControllerLCD.h:42: waitms(2);
0DD9 900002    3017            mov     dptr,#0x0002
0DDC 020000    3018            ljmp    _waitms
0DDF           3019   ;------------------------------------------------------------
0DDF           3020   ;Allocation info for local variables in function 'WriteCommand'
0DDF           3021   ;------------------------------------------------------------
0DDF           3022   ;x                         Allocated to registers r2 
0DDF           3023   ;------------------------------------------------------------
0DDF           3024   ;        ControllerLCD.h:45: void WriteCommand (unsigned char x)
0DDF           3025   ;        -----------------------------------------
0DDF           3026   ;         function WriteCommand
0DDF           3027   ;        -----------------------------------------
0DDF           3028   _WriteCommand:
0DDF AA82      3029            mov     r2,dpl
0DE1           3030   ;        ControllerLCD.h:47: LCD_RS=0;
0DE1 C297      3031            clr     _P1_7
0DE3           3032   ;        ControllerLCD.h:48: LCD_byte(x);
0DE3 8A82      3033            mov     dpl,r2
0DE5 120000    3034            lcall   _LCD_byte
0DE8           3035   ;        ControllerLCD.h:49: waitms(5);
0DE8 900005    3036            mov     dptr,#0x0005
0DEB 020000    3037            ljmp    _waitms
0DEE           3038   ;------------------------------------------------------------
0DEE           3039   ;Allocation info for local variables in function 'LCD_4BIT'
0DEE           3040   ;------------------------------------------------------------
0DEE           3041   ;------------------------------------------------------------
0DEE           3042   ;        ControllerLCD.h:52: void LCD_4BIT (void)
0DEE           3043   ;        -----------------------------------------
0DEE           3044   ;         function LCD_4BIT
0DEE           3045   ;        -----------------------------------------
0DEE           3046   _LCD_4BIT:
0DEE           3047   ;        ControllerLCD.h:54: LCD_E=0; // Resting state of LCD's enable is zero
0DEE C2A0      3048            clr     _P2_0
0DF0           3049   ;        ControllerLCD.h:56: waitms(20);
0DF0 900014    3050            mov     dptr,#0x0014
0DF3 120000    3051            lcall   _waitms
0DF6           3052   ;        ControllerLCD.h:58: WriteCommand(0x33);
0DF6 758233    3053            mov     dpl,#0x33
0DF9 120000    3054            lcall   _WriteCommand
0DFC           3055   ;        ControllerLCD.h:59: WriteCommand(0x33);
0DFC 758233    3056            mov     dpl,#0x33
0DFF 120000    3057            lcall   _WriteCommand
0E02           3058   ;        ControllerLCD.h:60: WriteCommand(0x32); // Change to 4-bit mode
0E02 758232    3059            mov     dpl,#0x32
0E05 120000    3060            lcall   _WriteCommand
0E08           3061   ;        ControllerLCD.h:63: WriteCommand(0x28);
0E08 758228    3062            mov     dpl,#0x28
0E0B 120000    3063            lcall   _WriteCommand
0E0E           3064   ;        ControllerLCD.h:64: WriteCommand(0x0c);
0E0E 75820C    3065            mov     dpl,#0x0C
0E11 120000    3066            lcall   _WriteCommand
0E14           3067   ;        ControllerLCD.h:65: WriteCommand(0x01); // Clear screen command (takes some time)
0E14 758201    3068            mov     dpl,#0x01
0E17 120000    3069            lcall   _WriteCommand
0E1A           3070   ;        ControllerLCD.h:66: waitms(20); // Wait for clear screen command to finsih.
0E1A 900014    3071            mov     dptr,#0x0014
0E1D 020000    3072            ljmp    _waitms
0E20           3073   ;------------------------------------------------------------
0E20           3074   ;Allocation info for local variables in function 'LCDprint'
0E20           3075   ;------------------------------------------------------------
0E20           3076   ;line                      Allocated with name '_LCDprint_PARM_2'
0E20           3077   ;string                    Allocated to registers r2 r3 r4 
0E20           3078   ;j                         Allocated to registers r5 r6 
0E20           3079   ;------------------------------------------------------------
0E20           3080   ;        ControllerLCD.h:69: void LCDprint(char * string, unsigned char line, bit clear)
0E20           3081   ;        -----------------------------------------
0E20           3082   ;         function LCDprint
0E20           3083   ;        -----------------------------------------
0E20           3084   _LCDprint:
0E20 AA82      3085            mov     r2,dpl
0E22 AB83      3086            mov     r3,dph
0E24 ACF0      3087            mov     r4,b
0E26           3088   ;        ControllerLCD.h:73: WriteCommand(line==2?0xc0:0x80);
0E26 7402      3089            mov     a,#0x02
0E28 B5E050    3090            cjne    a,_LCDprint_PARM_2,L031013?
0E2B 7DC0      3091            mov     r5,#0xC0
0E2D 8000      3092            sjmp    L031014?
0E2F           3093   L031013?:
0E2F 7D80      3094            mov     r5,#0x80
0E31           3095   L031014?:
0E31 8D82      3096            mov     dpl,r5
0E33 C002      3097            push    ar2
0E35 C003      3098            push    ar3
0E37 C004      3099            push    ar4
0E39 120000    3100            lcall   _WriteCommand
0E3C           3101   ;        ControllerLCD.h:74: waitms(5);
0E3C 900005    3102            mov     dptr,#0x0005
0E3F 120000    3103            lcall   _waitms
0E42 D004      3104            pop     ar4
0E44 D003      3105            pop     ar3
0E46 D002      3106            pop     ar2
0E48           3107   ;        ControllerLCD.h:75: for(j=0; string[j]!=0; j++)         WriteData(string[j]);// Write the message
0E48 7D00      3108            mov     r5,#0x00
0E4A 7E00      3109            mov     r6,#0x00
0E4C           3110   L031003?:
0E4C ED        3111            mov     a,r5
0E4D 2A        3112            add     a,r2
0E4E FF        3113            mov     r7,a
0E4F EE        3114            mov     a,r6
0E50 3B        3115            addc    a,r3
0E51 F8        3116            mov     r0,a
0E52 8C01      3117            mov     ar1,r4
0E54 8F82      3118            mov     dpl,r7
0E56 8883      3119            mov     dph,r0
0E58 89F0      3120            mov     b,r1
0E5A 120000    3121            lcall   __gptrget
0E5D FF        3122            mov     r7,a
0E5E 6000      3123            jz      L031006?
0E60 8F82      3124            mov     dpl,r7
0E62 C002      3125            push    ar2
0E64 C003      3126            push    ar3
0E66 C004      3127            push    ar4
0E68 C005      3128            push    ar5
0E6A C006      3129            push    ar6
0E6C 120000    3130            lcall   _WriteData
0E6F D006      3131            pop     ar6
0E71 D005      3132            pop     ar5
0E73 D004      3133            pop     ar4
0E75 D003      3134            pop     ar3
0E77 D002      3135            pop     ar2
0E79 0D        3136            inc     r5
0E7A BD00D0    3137            cjne    r5,#0x00,L031003?
0E7D 0E        3138            inc     r6
0E7E 8000      3139            sjmp    L031003?
0E80           3140   L031006?:
0E80           3141   ;        ControllerLCD.h:76: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0E80 302010    3142            jnb     _LCDprint_PARM_3,L031011?
0E83 8D02      3143            mov     ar2,r5
0E85 8E03      3144            mov     ar3,r6
0E87           3145   L031007?:
0E87 C3        3146            clr     c
0E88 EA        3147            mov     a,r2
0E89 9410      3148            subb    a,#0x10
0E8B EB        3149            mov     a,r3
0E8C 6480      3150            xrl     a,#0x80
0E8E 9480      3151            subb    a,#0x80
0E90 5000      3152            jnc     L031011?
0E92 758220    3153            mov     dpl,#0x20
0E95 C002      3154            push    ar2
0E97 C003      3155            push    ar3
0E99 120000    3156            lcall   _WriteData
0E9C D003      3157            pop     ar3
0E9E D002      3158            pop     ar2
0EA0 0A        3159            inc     r2
0EA1 BA0090    3160            cjne    r2,#0x00,L031007?
0EA4 0B        3161            inc     r3
0EA5 8000      3162            sjmp    L031007?
0EA7           3163   L031011?:
0EA7 22        3164            ret
0EA8           3165   ;------------------------------------------------------------
0EA8           3166   ;Allocation info for local variables in function 'getsn'
0EA8           3167   ;------------------------------------------------------------
0EA8           3168   ;len                       Allocated with name '_getsn_PARM_2'
0EA8           3169   ;buff                      Allocated with name '_getsn_buff_1_162'
0EA8           3170   ;j                         Allocated with name '_getsn_sloc0_1_0'
0EA8           3171   ;c                         Allocated to registers r3 
0EA8           3172   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
0EA8           3173   ;------------------------------------------------------------
0EA8           3174   ;        ControllerLCD.h:79: int getsn (char * buff, int len)
0EA8           3175   ;        -----------------------------------------
0EA8           3176   ;         function getsn
0EA8           3177   ;        -----------------------------------------
0EA8           3178   _getsn:
0EA8 8582F0    3179            mov     _getsn_buff_1_162,dpl
0EAB 8583F1    3180            mov     (_getsn_buff_1_162 + 1),dph
0EAE 85F0F2    3181            mov     (_getsn_buff_1_162 + 2),b
0EB1           3182   ;        ControllerLCD.h:84: for(j=0; j<(len-1); j++)
0EB1 E4        3183            clr     a
0EB2 F530      3184            mov     _getsn_sloc0_1_0,a
0EB4 F531      3185            mov     (_getsn_sloc0_1_0 + 1),a
0EB6 E5A0      3186            mov     a,_getsn_PARM_2
0EB8 24FF      3187            add     a,#0xff
0EBA FF        3188            mov     r7,a
0EBB E5A1      3189            mov     a,(_getsn_PARM_2 + 1)
0EBD 34FF      3190            addc    a,#0xff
0EBF F8        3191            mov     r0,a
0EC0 7900      3192            mov     r1,#0x00
0EC2 7A00      3193            mov     r2,#0x00
0EC4           3194   L032005?:
0EC4 C3        3195            clr     c
0EC5 E9        3196            mov     a,r1
0EC6 9F        3197            subb    a,r7
0EC7 EA        3198            mov     a,r2
0EC8 6480      3199            xrl     a,#0x80
0ECA 88F0      3200            mov     b,r0
0ECC 63F080    3201            xrl     b,#0x80
0ECF 95F0      3202            subb    a,b
0ED1 5000      3203            jnc     L032008?
0ED3           3204   ;        ControllerLCD.h:86: c=getchar();
0ED3 C002      3205            push    ar2
0ED5 C007      3206            push    ar7
0ED7 C000      3207            push    ar0
0ED9 C001      3208            push    ar1
0EDB 120000    3209            lcall   _getchar
0EDE AB82      3210            mov     r3,dpl
0EE0 D001      3211            pop     ar1
0EE2 D000      3212            pop     ar0
0EE4 D007      3213            pop     ar7
0EE6 D002      3214            pop     ar2
0EE8           3215   ;        ControllerLCD.h:87: if ( (c=='\n') || (c=='\r') )
0EE8 BB0AD0    3216            cjne    r3,#0x0A,L032015?
0EEB 8000      3217            sjmp    L032001?
0EED           3218   L032015?:
0EED BB0DD0    3219            cjne    r3,#0x0D,L032002?
0EF0           3220   L032001?:
0EF0           3221   ;        ControllerLCD.h:89: buff[j]=0;
0EF0 E530      3222            mov     a,_getsn_sloc0_1_0
0EF2 25F0      3223            add     a,_getsn_buff_1_162
0EF4 FC        3224            mov     r4,a
0EF5 E531      3225            mov     a,(_getsn_sloc0_1_0 + 1)
0EF7 35F1      3226            addc    a,(_getsn_buff_1_162 + 1)
0EF9 FD        3227            mov     r5,a
0EFA AEF2      3228            mov     r6,(_getsn_buff_1_162 + 2)
0EFC 8C82      3229            mov     dpl,r4
0EFE 8D83      3230            mov     dph,r5
0F00 8EF0      3231            mov     b,r6
0F02 E4        3232            clr     a
0F03 120000    3233            lcall   __gptrput
0F06           3234   ;        ControllerLCD.h:90: return j;
0F06 853082    3235            mov     dpl,_getsn_sloc0_1_0
0F09 853183    3236            mov     dph,(_getsn_sloc0_1_0 + 1)
0F0C 22        3237            ret
0F0D           3238   L032002?:
0F0D           3239   ;        ControllerLCD.h:94: buff[j]=c;
0F0D E9        3240            mov     a,r1
0F0E 25F0      3241            add     a,_getsn_buff_1_162
0F10 FC        3242            mov     r4,a
0F11 EA        3243            mov     a,r2
0F12 35F1      3244            addc    a,(_getsn_buff_1_162 + 1)
0F14 FD        3245            mov     r5,a
0F15 AEF2      3246            mov     r6,(_getsn_buff_1_162 + 2)
0F17 8C82      3247            mov     dpl,r4
0F19 8D83      3248            mov     dph,r5
0F1B 8EF0      3249            mov     b,r6
0F1D EB        3250            mov     a,r3
0F1E 120000    3251            lcall   __gptrput
0F21           3252   ;        ControllerLCD.h:84: for(j=0; j<(len-1); j++)
0F21 09        3253            inc     r1
0F22 B900D0    3254            cjne    r1,#0x00,L032018?
0F25 0A        3255            inc     r2
0F26           3256   L032018?:
0F26 8930      3257            mov     _getsn_sloc0_1_0,r1
0F28 8A31      3258            mov     (_getsn_sloc0_1_0 + 1),r2
0F2A 8000      3259            sjmp    L032005?
0F2C           3260   L032008?:
0F2C           3261   ;        ControllerLCD.h:97: buff[j]=0;
0F2C E530      3262            mov     a,_getsn_sloc0_1_0
0F2E 25F0      3263            add     a,_getsn_buff_1_162
0F30 FA        3264            mov     r2,a
0F31 E531      3265            mov     a,(_getsn_sloc0_1_0 + 1)
0F33 35F1      3266            addc    a,(_getsn_buff_1_162 + 1)
0F35 FB        3267            mov     r3,a
0F36 ACF2      3268            mov     r4,(_getsn_buff_1_162 + 2)
0F38 8A82      3269            mov     dpl,r2
0F3A 8B83      3270            mov     dph,r3
0F3C 8CF0      3271            mov     b,r4
0F3E E4        3272            clr     a
0F3F 120000    3273            lcall   __gptrput
0F42           3274   ;        ControllerLCD.h:98: return len;
0F42 85A082    3275            mov     dpl,_getsn_PARM_2
0F45 85A183    3276            mov     dph,(_getsn_PARM_2 + 1)
0F48 22        3277            ret
0F49           3278   ;------------------------------------------------------------
0F49           3279   ;Allocation info for local variables in function 'printCharAsBinary'
0F49           3280   ;------------------------------------------------------------
0F49           3281   ;c                         Allocated to registers r2 
0F49           3282   ;i                         Allocated to registers r3 r4 
0F49           3283   ;out                       Allocated to registers r5 
0F49           3284   ;------------------------------------------------------------
0F49           3285   ;        Controller.c:12: void printCharAsBinary(char c) {
0F49           3286   ;        -----------------------------------------
0F49           3287   ;         function printCharAsBinary
0F49           3288   ;        -----------------------------------------
0F49           3289   _printCharAsBinary:
0F49 AA82      3290            mov     r2,dpl
0F4B           3291   ;        Controller.c:16: for (i = 7; i >= 0; i--) {
0F4B 7B07      3292            mov     r3,#0x07
0F4D 7C00      3293            mov     r4,#0x00
0F4F           3294   L033001?:
0F4F EC        3295            mov     a,r4
0F50 20E790    3296            jb      acc.7,L033004?
0F53           3297   ;        Controller.c:17: out = (c >> i) & 1; // Shift right i bits, and mask all but the least significant bit
0F53 8BF0      3298            mov     b,r3
0F55 05F0      3299            inc     b
0F57 EA        3300            mov     a,r2
0F58 33        3301            rlc     a
0F59 92D2      3302            mov     ov,c
0F5B EA        3303            mov     a,r2
0F5C 8000      3304            sjmp    L033012?
0F5E           3305   L033011?:
0F5E A2D2      3306            mov     c,ov
0F60 13        3307            rrc     a
0F61           3308   L033012?:
0F61 D5F010    3309            djnz    b,L033011?
0F64 5401      3310            anl     a,#0x01
0F66           3311   ;        Controller.c:18: printf("%d", out);
0F66 FD        3312            mov     r5,a
0F67 33        3313            rlc     a
0F68 95E0      3314            subb    a,acc
0F6A FE        3315            mov     r6,a
0F6B C002      3316            push    ar2
0F6D C003      3317            push    ar3
0F6F C004      3318            push    ar4
0F71 C005      3319            push    ar5
0F73 C006      3320            push    ar6
0F75 74D0      3321            mov     a,#__str_3
0F77 C0E0      3322            push    acc
0F79 7460      3323            mov     a,#(__str_3 >> 8)
0F7B C0E0      3324            push    acc
0F7D 7480      3325            mov     a,#0x80
0F7F C0E0      3326            push    acc
0F81 120000    3327            lcall   _printf
0F84 E581      3328            mov     a,sp
0F86 24FB      3329            add     a,#0xfb
0F88 F581      3330            mov     sp,a
0F8A D004      3331            pop     ar4
0F8C D003      3332            pop     ar3
0F8E D002      3333            pop     ar2
0F90           3334   ;        Controller.c:16: for (i = 7; i >= 0; i--) {
0F90 1B        3335            dec     r3
0F91 BBFF10    3336            cjne    r3,#0xff,L033013?
0F94 1C        3337            dec     r4
0F95           3338   L033013?:
0F95 8000      3339            sjmp    L033001?
0F97           3340   L033004?:
0F97           3341   ;        Controller.c:20: printf("\n"); // Move to a new line after printing the binary representation
0F97 7450      3342            mov     a,#__str_4
0F99 C0E0      3343            push    acc
0F9B 7469      3344            mov     a,#(__str_4 >> 8)
0F9D C0E0      3345            push    acc
0F9F 7480      3346            mov     a,#0x80
0FA1 C0E0      3347            push    acc
0FA3 120000    3348            lcall   _printf
0FA6 1581      3349            dec     sp
0FA8 1581      3350            dec     sp
0FAA 1581      3351            dec     sp
0FAC 22        3352            ret
0FAD           3353   ;------------------------------------------------------------
0FAD           3354   ;Allocation info for local variables in function 'main'
0FAD           3355   ;------------------------------------------------------------
0FAD           3356   ;cnt                       Allocated to registers 
0FAD           3357   ;vx_right                  Allocated with name '_main_vx_right_1_171'
0FAD           3358   ;vy_right                  Allocated to registers r6 r7 r2 r3 
0FAD           3359   ;sw_right                  Allocated with name '_main_sw_right_1_171'
0FAD           3360   ;vx_left                   Allocated with name '_main_vx_left_1_171'
0FAD           3361   ;vy_left                   Allocated with name '_main_vy_left_1_171'
0FAD           3362   ;sw_left                   Allocated with name '_main_sw_left_1_171'
0FAD           3363   ;vx1                       Allocated with name '_main_vx1_1_171'
0FAD           3364   ;vy1                       Allocated with name '_main_vy1_1_171'
0FAD           3365   ;vx2                       Allocated to registers r4 r5 
0FAD           3366   ;vy2                       Allocated to registers r2 r3 
0FAD           3367   ;timeout                   Allocated to registers r2 r3 
0FAD           3368   ;sw1                       Allocated to registers 
0FAD           3369   ;sw2                       Allocated to registers 
0FAD           3370   ;position                  Allocated to registers 
0FAD           3371   ;------------------------------------------------------------
0FAD           3372   ;        Controller.c:23: void main (void)
0FAD           3373   ;        -----------------------------------------
0FAD           3374   ;         function main
0FAD           3375   ;        -----------------------------------------
0FAD           3376   _main:
0FAD           3377   ;        Controller.c:33: waitms(500);
0FAD 9001F4    3378            mov     dptr,#0x01F4
0FB0 120000    3379            lcall   _waitms
0FB3           3380   ;        Controller.c:34: UART1_Init(9600);
0FB3 902580    3381            mov     dptr,#0x2580
0FB6 E4        3382            clr     a
0FB7 F5F0      3383            mov     b,a
0FB9 120000    3384            lcall   _UART1_Init
0FBC           3385   ;        Controller.c:37: InitPinADC(2, 1); // Configure P2.1 as analog input
0FBC 756001    3386            mov     _InitPinADC_PARM_2,#0x01
0FBF 758202    3387            mov     dpl,#0x02
0FC2 120000    3388            lcall   _InitPinADC
0FC5           3389   ;        Controller.c:38: InitPinADC(2, 2); // Configure P2.2 as analog input
0FC5 756002    3390            mov     _InitPinADC_PARM_2,#0x02
0FC8 758202    3391            mov     dpl,#0x02
0FCB 120000    3392            lcall   _InitPinADC
0FCE           3393   ;        Controller.c:39: InitPinADC(2, 3); // Configure P2.3 as analog input
0FCE 756003    3394            mov     _InitPinADC_PARM_2,#0x03
0FD1 758202    3395            mov     dpl,#0x02
0FD4 120000    3396            lcall   _InitPinADC
0FD7           3397   ;        Controller.c:40: InitPinADC(2, 4); // Configure P2.4 as analog input
0FD7 756004    3398            mov     _InitPinADC_PARM_2,#0x04
0FDA 758202    3399            mov     dpl,#0x02
0FDD 120000    3400            lcall   _InitPinADC
0FE0           3401   ;        Controller.c:41: InitPinADC(2, 5); // Configure P2.5 as analog input
0FE0 756005    3402            mov     _InitPinADC_PARM_2,#0x05
0FE3 758202    3403            mov     dpl,#0x02
0FE6 120000    3404            lcall   _InitPinADC
0FE9           3405   ;        Controller.c:42: InitPinADC(2, 6); // Configure P2.6 as analog input
0FE9 756006    3406            mov     _InitPinADC_PARM_2,#0x06
0FEC 758202    3407            mov     dpl,#0x02
0FEF 120000    3408            lcall   _InitPinADC
0FF2           3409   ;        Controller.c:43: InitADC();
0FF2 120000    3410            lcall   _InitADC
0FF5           3411   ;        Controller.c:45: LCD_4BIT();
0FF5 120000    3412            lcall   _LCD_4BIT
0FF8           3413   ;        Controller.c:47: printf("\n\n---- Press and Hold both Joysticks to Calibrate ----\n");
0FF8 74D0      3414            mov     a,#__str_5
0FFA C0E0      3415            push    acc
0FFC 7469      3416            mov     a,#(__str_5 >> 8)
0FFE C0E0      3417            push    acc
1000 7480      3418            mov     a,#0x80
1002 C0E0      3419            push    acc
1004 120000    3420            lcall   _printf
1007 1581      3421            dec     sp
1009 1581      3422            dec     sp
100B 1581      3423            dec     sp
100D           3424   ;        Controller.c:48: Wait_For_Calibration();
100D 120000    3425            lcall   _Wait_For_Calibration
1010           3426   ;        Controller.c:49: waitms(200);
1010 9000C8    3427            mov     dptr,#0x00C8
1013 120000    3428            lcall   _waitms
1016           3429   ;        Controller.c:51: SendATCommand("AT+BAUD\r\n");
1016 906A10    3430            mov     dptr,#__str_6
1019 75F080    3431            mov     b,#0x80
101C 120000    3432            lcall   _SendATCommand
101F           3433   ;        Controller.c:52: SendATCommand("AT+BAUD\r\n");
101F 906A10    3434            mov     dptr,#__str_6
1022 75F080    3435            mov     b,#0x80
1025 120000    3436            lcall   _SendATCommand
1028           3437   ;        Controller.c:53: SendATCommand("AT+RFID\r\n");
1028 906150    3438            mov     dptr,#__str_7
102B 75F080    3439            mov     b,#0x80
102E 120000    3440            lcall   _SendATCommand
1031           3441   ;        Controller.c:54: SendATCommand("AT+DVIDA0C4\r\n");
1031 905F10    3442            mov     dptr,#__str_8
1034 75F080    3443            mov     b,#0x80
1037 120000    3444            lcall   _SendATCommand
103A           3445   ;        Controller.c:55: SendATCommand("AT+RFC\r\n");  
103A 906A90    3446            mov     dptr,#__str_9
103D 75F080    3447            mov     b,#0x80
1040 120000    3448            lcall   _SendATCommand
1043           3449   ;        Controller.c:56: SendATCommand("AT+POWE\r\n");
1043 906AD0    3450            mov     dptr,#__str_10
1046 75F080    3451            mov     b,#0x80
1049 120000    3452            lcall   _SendATCommand
104C           3453   ;        Controller.c:57: SendATCommand("AT+CLSS\r\n");
104C 905F50    3454            mov     dptr,#__str_11
104F 75F080    3455            mov     b,#0x80
1052 120000    3456            lcall   _SendATCommand
1055           3457   ;        Controller.c:58: SendATCommand("AT+VER\r\n");
1055 906D10    3458            mov     dptr,#__str_12
1058 75F080    3459            mov     b,#0x80
105B 120000    3460            lcall   _SendATCommand
105E           3461   ;        Controller.c:61: printf("\n\n---- CONTROLLER SETUP COMPLETE ----\n");
105E 7410      3462            mov     a,#__str_13
1060 C0E0      3463            push    acc
1062 746B      3464            mov     a,#(__str_13 >> 8)
1064 C0E0      3465            push    acc
1066 7480      3466            mov     a,#0x80
1068 C0E0      3467            push    acc
106A 120000    3468            lcall   _printf
106D 1581      3469            dec     sp
106F 1581      3470            dec     sp
1071 1581      3471            dec     sp
1073           3472   ;        Controller.c:65: while(1)
1073           3473   L034011?:
1073           3474   ;        Controller.c:68: sw_left = Volts_at_Pin(QFP32_MUX_P2_6);
1073 758213    3475            mov     dpl,#0x13
1076 120000    3476            lcall   _Volts_at_Pin
1079 858270    3477            mov     _main_sw_left_1_171,dpl
107C 858371    3478            mov     (_main_sw_left_1_171 + 1),dph
107F 85F072    3479            mov     (_main_sw_left_1_171 + 2),b
1082 F573      3480            mov     (_main_sw_left_1_171 + 3),a
1084           3481   ;        Controller.c:69: vx_left = Volts_at_Pin(QFP32_MUX_P2_5);
1084 758212    3482            mov     dpl,#0x12
1087 120000    3483            lcall   _Volts_at_Pin
108A 858270    3484            mov     _main_vx_left_1_171,dpl
108D 858371    3485            mov     (_main_vx_left_1_171 + 1),dph
1090 85F072    3486            mov     (_main_vx_left_1_171 + 2),b
1093 F573      3487            mov     (_main_vx_left_1_171 + 3),a
1095           3488   ;        Controller.c:70: vy_left = Volts_at_Pin(QFP32_MUX_P2_4);
1095 758211    3489            mov     dpl,#0x11
1098 120000    3490            lcall   _Volts_at_Pin
109B 858270    3491            mov     _main_vy_left_1_171,dpl
109E 858371    3492            mov     (_main_vy_left_1_171 + 1),dph
10A1 85F072    3493            mov     (_main_vy_left_1_171 + 2),b
10A4 F573      3494            mov     (_main_vy_left_1_171 + 3),a
10A6           3495   ;        Controller.c:72: sw_right = Volts_at_Pin(QFP32_MUX_P2_1);
10A6 75820E    3496            mov     dpl,#0x0E
10A9 120000    3497            lcall   _Volts_at_Pin
10AC 8582F0    3498            mov     _main_sw_right_1_171,dpl
10AF 8583F1    3499            mov     (_main_sw_right_1_171 + 1),dph
10B2 85F0F2    3500            mov     (_main_sw_right_1_171 + 2),b
10B5 F5F3      3501            mov     (_main_sw_right_1_171 + 3),a
10B7           3502   ;        Controller.c:73: vx_right = Volts_at_Pin(QFP32_MUX_P2_2);
10B7 75820F    3503            mov     dpl,#0x0F
10BA 120000    3504            lcall   _Volts_at_Pin
10BD 8582F0    3505            mov     _main_vx_right_1_171,dpl
10C0 8583F1    3506            mov     (_main_vx_right_1_171 + 1),dph
10C3 85F0F2    3507            mov     (_main_vx_right_1_171 + 2),b
10C6 F5F3      3508            mov     (_main_vx_right_1_171 + 3),a
10C8           3509   ;        Controller.c:74: vy_right = Volts_at_Pin(QFP32_MUX_P2_3);
10C8 758210    3510            mov     dpl,#0x10
10CB 120000    3511            lcall   _Volts_at_Pin
10CE AE82      3512            mov     r6,dpl
10D0 AF83      3513            mov     r7,dph
10D2 AAF0      3514            mov     r2,b
10D4 FB        3515            mov     r3,a
10D5           3516   ;        Controller.c:76: vx1 = Voltage_to_Coordinate(vx_left);
10D5 857082    3517            mov     dpl,_main_vx_left_1_171
10D8 857183    3518            mov     dph,(_main_vx_left_1_171 + 1)
10DB 8572F0    3519            mov     b,(_main_vx_left_1_171 + 2)
10DE E573      3520            mov     a,(_main_vx_left_1_171 + 3)
10E0 C002      3521            push    ar2
10E2 C003      3522            push    ar3
10E4 C006      3523            push    ar6
10E6 C007      3524            push    ar7
10E8 120000    3525            lcall   _Voltage_to_Coordinate
10EB 8582B0    3526            mov     _main_vx1_1_171,dpl
10EE 8583B1    3527            mov     (_main_vx1_1_171 + 1),dph
10F1           3528   ;        Controller.c:77: vy1 = Voltage_to_Coordinate(vy_left);
10F1 857082    3529            mov     dpl,_main_vy_left_1_171
10F4 857183    3530            mov     dph,(_main_vy_left_1_171 + 1)
10F7 8572F0    3531            mov     b,(_main_vy_left_1_171 + 2)
10FA E573      3532            mov     a,(_main_vy_left_1_171 + 3)
10FC 120000    3533            lcall   _Voltage_to_Coordinate
10FF 858270    3534            mov     _main_vy1_1_171,dpl
1102 858371    3535            mov     (_main_vy1_1_171 + 1),dph
1105           3536   ;        Controller.c:78: vx2 = Voltage_to_Coordinate(vx_right);
1105 85F082    3537            mov     dpl,_main_vx_right_1_171
1108 85F183    3538            mov     dph,(_main_vx_right_1_171 + 1)
110B 85F2F0    3539            mov     b,(_main_vx_right_1_171 + 2)
110E E5F3      3540            mov     a,(_main_vx_right_1_171 + 3)
1110 120000    3541            lcall   _Voltage_to_Coordinate
1113 AC82      3542            mov     r4,dpl
1115 AD83      3543            mov     r5,dph
1117 D007      3544            pop     ar7
1119 D006      3545            pop     ar6
111B D003      3546            pop     ar3
111D D002      3547            pop     ar2
111F           3548   ;        Controller.c:79: vy2 = Voltage_to_Coordinate(vy_right);
111F 8E82      3549            mov     dpl,r6
1121 8F83      3550            mov     dph,r7
1123 8AF0      3551            mov     b,r2
1125 EB        3552            mov     a,r3
1126 C004      3553            push    ar4
1128 C005      3554            push    ar5
112A 120000    3555            lcall   _Voltage_to_Coordinate
112D AA82      3556            mov     r2,dpl
112F AB83      3557            mov     r3,dph
1131 D005      3558            pop     ar5
1133 D004      3559            pop     ar4
1135           3560   ;        Controller.c:80: sw1 = Check_Joystick_Button(sw_left); //Returns 1 if pressed, 0 otherwise
1135 857082    3561            mov     dpl,_main_sw_left_1_171
1138 857183    3562            mov     dph,(_main_sw_left_1_171 + 1)
113B 8572F0    3563            mov     b,(_main_sw_left_1_171 + 2)
113E E573      3564            mov     a,(_main_sw_left_1_171 + 3)
1140 C002      3565            push    ar2
1142 C003      3566            push    ar3
1144 C004      3567            push    ar4
1146 C005      3568            push    ar5
1148 120000    3569            lcall   _Check_Joystick_Button
114B           3570   ;        Controller.c:81: sw2 = Check_Joystick_Button(sw_right);
114B 85F082    3571            mov     dpl,_main_sw_right_1_171
114E 85F183    3572            mov     dph,(_main_sw_right_1_171 + 1)
1151 85F2F0    3573            mov     b,(_main_sw_right_1_171 + 2)
1154 E5F3      3574            mov     a,(_main_sw_right_1_171 + 3)
1156 120000    3575            lcall   _Check_Joystick_Button
1159           3576   ;        Controller.c:91: Generate_Motor_Command(&mcmd1,vx1,vy1);
1159 85B0E0    3577            mov     _Generate_Motor_Command_PARM_2,_main_vx1_1_171
115C 85B1E1    3578            mov     (_Generate_Motor_Command_PARM_2 + 1),(_main_vx1_1_171 + 1)
115F 857020    3579            mov     _Generate_Motor_Command_PARM_3,_main_vy1_1_171
1162 857121    3580            mov     (_Generate_Motor_Command_PARM_3 + 1),(_main_vy1_1_171 + 1)
1165 90A3E0    3581            mov     dptr,#_mcmd1
1168 75F040    3582            mov     b,#0x40
116B 120000    3583            lcall   _Generate_Motor_Command
116E D005      3584            pop     ar5
1170 D004      3585            pop     ar4
1172 D003      3586            pop     ar3
1174 D002      3587            pop     ar2
1176           3588   ;        Controller.c:92: Generate_Motor_Command(&mcmd2,vx2,vy2);
1176 8CE0      3589            mov     _Generate_Motor_Command_PARM_2,r4
1178 8DE1      3590            mov     (_Generate_Motor_Command_PARM_2 + 1),r5
117A 8A20      3591            mov     _Generate_Motor_Command_PARM_3,r2
117C 8B21      3592            mov     (_Generate_Motor_Command_PARM_3 + 1),r3
117E 90A020    3593            mov     dptr,#_mcmd2
1181 75F040    3594            mov     b,#0x40
1184 120000    3595            lcall   _Generate_Motor_Command
1187           3596   ;        Controller.c:93: Weigh_Dual_Inputs(&mcmd,&mcmd1,&mcmd2,0.2);
1187 75E0E0    3597            mov     _Weigh_Dual_Inputs_PARM_2,#_mcmd1
118A 75E100    3598            mov     (_Weigh_Dual_Inputs_PARM_2 + 1),#0x00
118D 75E240    3599            mov     (_Weigh_Dual_Inputs_PARM_2 + 2),#0x40
1190 75E020    3600            mov     _Weigh_Dual_Inputs_PARM_3,#_mcmd2
1193 75E100    3601            mov     (_Weigh_Dual_Inputs_PARM_3 + 1),#0x00
1196 75E240    3602            mov     (_Weigh_Dual_Inputs_PARM_3 + 2),#0x40
1199 7520CD    3603            mov     _Weigh_Dual_Inputs_PARM_4,#0xCD
119C 7521CC    3604            mov     (_Weigh_Dual_Inputs_PARM_4 + 1),#0xCC
119F 75224C    3605            mov     (_Weigh_Dual_Inputs_PARM_4 + 2),#0x4C
11A2 75233E    3606            mov     (_Weigh_Dual_Inputs_PARM_4 + 3),#0x3E
11A5 909E60    3607            mov     dptr,#_mcmd
11A8 75F040    3608            mov     b,#0x40
11AB 120000    3609            lcall   _Weigh_Dual_Inputs
11AE           3610   ;        Controller.c:95: sprintf(tbuff,"%3d,%3d C T\n",mcmd.left,mcmd.right);
11AE 7862      3611            mov     r0,#(_mcmd + 0x0002)
11B0 8602      3612            mov     ar2,@r0
11B2 08        3613            inc     r0
11B3 8603      3614            mov     ar3,@r0
11B5 7860      3615            mov     r0,#_mcmd
11B7 8604      3616            mov     ar4,@r0
11B9 08        3617            inc     r0
11BA 8605      3618            mov     ar5,@r0
11BC C002      3619            push    ar2
11BE C003      3620            push    ar3
11C0 C004      3621            push    ar4
11C2 C005      3622            push    ar5
11C4 7450      3623            mov     a,#__str_14
11C6 C0E0      3624            push    acc
11C8 7464      3625            mov     a,#(__str_14 >> 8)
11CA C0E0      3626            push    acc
11CC 7480      3627            mov     a,#0x80
11CE C0E0      3628            push    acc
11D0 74E0      3629            mov     a,#_tbuff
11D2 C0E0      3630            push    acc
11D4 74A7      3631            mov     a,#(_tbuff >> 8)
11D6 C0E0      3632            push    acc
11D8 7440      3633            mov     a,#0x40
11DA C0E0      3634            push    acc
11DC 120000    3635            lcall   _sprintf
11DF E581      3636            mov     a,sp
11E1 24F6      3637            add     a,#0xf6
11E3 F581      3638            mov     sp,a
11E5           3639   ;        Controller.c:97: printf(tbuff);
11E5 74E0      3640            mov     a,#_tbuff
11E7 C0E0      3641            push    acc
11E9 74A7      3642            mov     a,#(_tbuff >> 8)
11EB C0E0      3643            push    acc
11ED 7440      3644            mov     a,#0x40
11EF C0E0      3645            push    acc
11F1 120000    3646            lcall   _printf
11F4 1581      3647            dec     sp
11F6 1581      3648            dec     sp
11F8 1581      3649            dec     sp
11FA           3650   ;        Controller.c:98: printf('\r');
11FA 740D      3651            mov     a,#0x0D
11FC C0E0      3652            push    acc
11FE E4        3653            clr     a
11FF C0E0      3654            push    acc
1201 C0E0      3655            push    acc
1203 120000    3656            lcall   _printf
1206 1581      3657            dec     sp
1208 1581      3658            dec     sp
120A 1581      3659            dec     sp
120C           3660   ;        Controller.c:99: sendstr1(tbuff);
120C 90A7E0    3661            mov     dptr,#_tbuff
120F 75F040    3662            mov     b,#0x40
1212 120000    3663            lcall   _sendstr1
1215           3664   ;        Controller.c:101: while(1){ // check if there's data to recieve 
1215 7A00      3665            mov     r2,#0x00
1217 7B00      3666            mov     r3,#0x00
1219           3667   L034006?:
1219           3668   ;        Controller.c:102: if(RXU1()) break;
1219 C002      3669            push    ar2
121B C003      3670            push    ar3
121D 120000    3671            lcall   _RXU1
1220 D003      3672            pop     ar3
1222 D002      3673            pop     ar2
1224 4000      3674            jc      L034007?
1226           3675   ;        Controller.c:103: Timer3us(100);
1226 758264    3676            mov     dpl,#0x64
1229 C002      3677            push    ar2
122B C003      3678            push    ar3
122D 120000    3679            lcall   _Timer3us
1230 D003      3680            pop     ar3
1232 D002      3681            pop     ar2
1234           3682   ;        Controller.c:104: timeout++;
1234 0A        3683            inc     r2
1235 BA0090    3684            cjne    r2,#0x00,L034021?
1238 0B        3685            inc     r3
1239           3686   L034021?:
1239           3687   ;        Controller.c:105: if(timeout>1000) break;
1239 C3        3688            clr     c
123A 74E8      3689            mov     a,#0xE8
123C 9A        3690            subb    a,r2
123D 7483      3691            mov     a,#(0x03 ^ 0x80)
123F 8BF0      3692            mov     b,r3
1241 63F080    3693            xrl     b,#0x80
1244 95F0      3694            subb    a,b
1246 5000      3695            jnc     L034006?
1248           3696   L034007?:
1248           3697   ;        Controller.c:107: if(RXU1()){
1248 120000    3698            lcall   _RXU1
124B 4000      3699            jc      L034023?
124D 020000    3700            ljmp    L034011?
1250           3701   L034023?:
1250           3702   ;        Controller.c:108: getstr1(rbuff);
1250 909C20    3703            mov     dptr,#_rbuff
1253 75F040    3704            mov     b,#0x40
1256 120000    3705            lcall   _getstr1
1259 020000    3706            ljmp    L034011?
125C           3707            rseg R_CSEG
125C           3708   
0000           3709            rseg R_XINIT
0000           3710   
0000           3711            rseg R_CONST
0000           3712   __str_0:
0000 496E6974  3713            db 'Initialized ADC at Pin %d_%d'
     69616C69
     7A656420
     41444320
     61742050
     696E2025
     645F2564
001C 0A        3714            db 0x0A
001D 00        3715            db 0x00
001E           3716   __str_1:
001E 436F6D6D  3717            db 'Command: %s'
     616E643A
     202573
0029 00        3718            db 0x00
002A           3719   __str_2:
002A 52657370  3720            db 'Response: %s'
     6F6E7365
     3A202573
0036 0D        3721            db 0x0D
0037 0A        3722            db 0x0A
0038 00        3723            db 0x00
0039           3724   __str_3:
0039 2564      3725            db '%d'
003B 00        3726            db 0x00
003C           3727   __str_4:
003C 0A        3728            db 0x0A
003D 00        3729            db 0x00
003E           3730   __str_5:
003E 0A        3731            db 0x0A
003F 0A        3732            db 0x0A
0040 2D2D2D2D  3733            db '---- Press and Hold both Joysticks to Calibrate ----'
     20507265
     73732061
     6E642048
     6F6C6420
     626F7468
     204A6F79
     73746963
     6B732074
     6F204361
     6C696272
     61746520
     2D2D2D2D
0074 0A        3734            db 0x0A
0075 00        3735            db 0x00
0076           3736   __str_6:
0076 41542B42  3737            db 'AT+BAUD'
     415544
007D 0D        3738            db 0x0D
007E 0A        3739            db 0x0A
007F 00        3740            db 0x00
0080           3741   __str_7:
0080 41542B52  3742            db 'AT+RFID'
     464944
0087 0D        3743            db 0x0D
0088 0A        3744            db 0x0A
0089 00        3745            db 0x00
008A           3746   __str_8:
008A 41542B44  3747            db 'AT+DVIDA0C4'
     56494441
     304334
0095 0D        3748            db 0x0D
0096 0A        3749            db 0x0A
0097 00        3750            db 0x00
0098           3751   __str_9:
0098 41542B52  3752            db 'AT+RFC'
     4643
009E 0D        3753            db 0x0D
009F 0A        3754            db 0x0A
00A0 00        3755            db 0x00
00A1           3756   __str_10:
00A1 41542B50  3757            db 'AT+POWE'
     4F5745
00A8 0D        3758            db 0x0D
00A9 0A        3759            db 0x0A
00AA 00        3760            db 0x00
00AB           3761   __str_11:
00AB 41542B43  3762            db 'AT+CLSS'
     4C5353
00B2 0D        3763            db 0x0D
00B3 0A        3764            db 0x0A
00B4 00        3765            db 0x00
00B5           3766   __str_12:
00B5 41542B56  3767            db 'AT+VER'
     4552
00BB 0D        3768            db 0x0D
00BC 0A        3769            db 0x0A
00BD 00        3770            db 0x00
00BE           3771   __str_13:
00BE 0A        3772            db 0x0A
00BF 0A        3773            db 0x0A
00C0 2D2D2D2D  3774            db '---- CONTROLLER SETUP COMPLETE ----'
     20434F4E
     54524F4C
     4C455220
     53455455
     5020434F
     4D504C45
     5445202D
     2D2D2D
00E3 0A        3775            db 0x0A
00E4 00        3776            db 0x00
00E5           3777   __str_14:
00E5 2533642C  3778            db '%3d,%3d C T'
     25336420
     432054
00F0 0A        3779            db 0x0A
00F1 00        3780            db 0x00
00F2           3781   
0003           3782            CSEG
0003           3783   
0003           3784   end
