0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Apr 02 15:54:10 2024
0000              5   ;--------------------------------------------------------
                  5   $name Device
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _Extract_RXData_PARM_2
0000             27            public _main
0000             28            public _Extract_RXData
0000             29            public _Check_Data_Integrity
0000             30            public _char2int
0000             31            public _printCharAsBinary
0000             32            public _SendATCommand
0000             33            public _waitms_or_RI1
0000             34            public _RXU1
0000             35            public _getstr1
0000             36            public _getchar1_with_timeout
0000             37            public _getchar1
0000             38            public _sendstr1
0000             39            public _putchar1
0000             40            public _UART1_Init
0000             41            public _waitms
0000             42            public _Timer3us
0000             43            public __c51_external_startup
0000             44            public _buff
0000             45            public _rbuff
0000             46            public _tbuff
0000             47   ;--------------------------------------------------------
0000             48   ; Special Function Registers
0000             49   ;--------------------------------------------------------
0000             50   _ACC            DATA 0xe0
0000             51   _ADC0ASAH       DATA 0xb6
0000             52   _ADC0ASAL       DATA 0xb5
0000             53   _ADC0ASCF       DATA 0xa1
0000             54   _ADC0ASCT       DATA 0xc7
0000             55   _ADC0CF0        DATA 0xbc
0000             56   _ADC0CF1        DATA 0xb9
0000             57   _ADC0CF2        DATA 0xdf
0000             58   _ADC0CN0        DATA 0xe8
0000             59   _ADC0CN1        DATA 0xb2
0000             60   _ADC0CN2        DATA 0xb3
0000             61   _ADC0GTH        DATA 0xc4
0000             62   _ADC0GTL        DATA 0xc3
0000             63   _ADC0H          DATA 0xbe
0000             64   _ADC0L          DATA 0xbd
0000             65   _ADC0LTH        DATA 0xc6
0000             66   _ADC0LTL        DATA 0xc5
0000             67   _ADC0MX         DATA 0xbb
0000             68   _B              DATA 0xf0
0000             69   _CKCON0         DATA 0x8e
0000             70   _CKCON1         DATA 0xa6
0000             71   _CLEN0          DATA 0xc6
0000             72   _CLIE0          DATA 0xc7
0000             73   _CLIF0          DATA 0xe8
0000             74   _CLKSEL         DATA 0xa9
0000             75   _CLOUT0         DATA 0xd1
0000             76   _CLU0CF         DATA 0xb1
0000             77   _CLU0FN         DATA 0xaf
0000             78   _CLU0MX         DATA 0x84
0000             79   _CLU1CF         DATA 0xb3
0000             80   _CLU1FN         DATA 0xb2
0000             81   _CLU1MX         DATA 0x85
0000             82   _CLU2CF         DATA 0xb6
0000             83   _CLU2FN         DATA 0xb5
0000             84   _CLU2MX         DATA 0x91
0000             85   _CLU3CF         DATA 0xbf
0000             86   _CLU3FN         DATA 0xbe
0000             87   _CLU3MX         DATA 0xae
0000             88   _CMP0CN0        DATA 0x9b
0000             89   _CMP0CN1        DATA 0x99
0000             90   _CMP0MD         DATA 0x9d
0000             91   _CMP0MX         DATA 0x9f
0000             92   _CMP1CN0        DATA 0xbf
0000             93   _CMP1CN1        DATA 0xac
0000             94   _CMP1MD         DATA 0xab
0000             95   _CMP1MX         DATA 0xaa
0000             96   _CRC0CN0        DATA 0xce
0000             97   _CRC0CN1        DATA 0x86
0000             98   _CRC0CNT        DATA 0xd3
0000             99   _CRC0DAT        DATA 0xcb
0000            100   _CRC0FLIP       DATA 0xcf
0000            101   _CRC0IN         DATA 0xca
0000            102   _CRC0ST         DATA 0xd2
0000            103   _DAC0CF0        DATA 0x91
0000            104   _DAC0CF1        DATA 0x92
0000            105   _DAC0H          DATA 0x85
0000            106   _DAC0L          DATA 0x84
0000            107   _DAC1CF0        DATA 0x93
0000            108   _DAC1CF1        DATA 0x94
0000            109   _DAC1H          DATA 0x8a
0000            110   _DAC1L          DATA 0x89
0000            111   _DAC2CF0        DATA 0x95
0000            112   _DAC2CF1        DATA 0x96
0000            113   _DAC2H          DATA 0x8c
0000            114   _DAC2L          DATA 0x8b
0000            115   _DAC3CF0        DATA 0x9a
0000            116   _DAC3CF1        DATA 0x9c
0000            117   _DAC3H          DATA 0x8e
0000            118   _DAC3L          DATA 0x8d
0000            119   _DACGCF0        DATA 0x88
0000            120   _DACGCF1        DATA 0x98
0000            121   _DACGCF2        DATA 0xa2
0000            122   _DERIVID        DATA 0xad
0000            123   _DEVICEID       DATA 0xb5
0000            124   _DPH            DATA 0x83
0000            125   _DPL            DATA 0x82
0000            126   _EIE1           DATA 0xe6
0000            127   _EIE2           DATA 0xf3
0000            128   _EIP1           DATA 0xbb
0000            129   _EIP1H          DATA 0xee
0000            130   _EIP2           DATA 0xed
0000            131   _EIP2H          DATA 0xf6
0000            132   _EMI0CN         DATA 0xe7
0000            133   _FLKEY          DATA 0xb7
0000            134   _HFO0CAL        DATA 0xc7
0000            135   _HFO1CAL        DATA 0xd6
0000            136   _HFOCN          DATA 0xef
0000            137   _I2C0ADM        DATA 0xff
0000            138   _I2C0CN0        DATA 0xba
0000            139   _I2C0DIN        DATA 0xbc
0000            140   _I2C0DOUT       DATA 0xbb
0000            141   _I2C0FCN0       DATA 0xad
0000            142   _I2C0FCN1       DATA 0xab
0000            143   _I2C0FCT        DATA 0xf5
0000            144   _I2C0SLAD       DATA 0xbd
0000            145   _I2C0STAT       DATA 0xb9
0000            146   _IE             DATA 0xa8
0000            147   _IP             DATA 0xb8
0000            148   _IPH            DATA 0xf2
0000            149   _IT01CF         DATA 0xe4
0000            150   _LFO0CN         DATA 0xb1
0000            151   _P0             DATA 0x80
0000            152   _P0MASK         DATA 0xfe
0000            153   _P0MAT          DATA 0xfd
0000            154   _P0MDIN         DATA 0xf1
0000            155   _P0MDOUT        DATA 0xa4
0000            156   _P0SKIP         DATA 0xd4
0000            157   _P1             DATA 0x90
0000            158   _P1MASK         DATA 0xee
0000            159   _P1MAT          DATA 0xed
0000            160   _P1MDIN         DATA 0xf2
0000            161   _P1MDOUT        DATA 0xa5
0000            162   _P1SKIP         DATA 0xd5
0000            163   _P2             DATA 0xa0
0000            164   _P2MASK         DATA 0xfc
0000            165   _P2MAT          DATA 0xfb
0000            166   _P2MDIN         DATA 0xf3
0000            167   _P2MDOUT        DATA 0xa6
0000            168   _P2SKIP         DATA 0xcc
0000            169   _P3             DATA 0xb0
0000            170   _P3MDIN         DATA 0xf4
0000            171   _P3MDOUT        DATA 0x9c
0000            172   _PCA0CENT       DATA 0x9e
0000            173   _PCA0CLR        DATA 0x9c
0000            174   _PCA0CN0        DATA 0xd8
0000            175   _PCA0CPH0       DATA 0xfc
0000            176   _PCA0CPH1       DATA 0xea
0000            177   _PCA0CPH2       DATA 0xec
0000            178   _PCA0CPH3       DATA 0xf5
0000            179   _PCA0CPH4       DATA 0x85
0000            180   _PCA0CPH5       DATA 0xde
0000            181   _PCA0CPL0       DATA 0xfb
0000            182   _PCA0CPL1       DATA 0xe9
0000            183   _PCA0CPL2       DATA 0xeb
0000            184   _PCA0CPL3       DATA 0xf4
0000            185   _PCA0CPL4       DATA 0x84
0000            186   _PCA0CPL5       DATA 0xdd
0000            187   _PCA0CPM0       DATA 0xda
0000            188   _PCA0CPM1       DATA 0xdb
0000            189   _PCA0CPM2       DATA 0xdc
0000            190   _PCA0CPM3       DATA 0xae
0000            191   _PCA0CPM4       DATA 0xaf
0000            192   _PCA0CPM5       DATA 0xcc
0000            193   _PCA0H          DATA 0xfa
0000            194   _PCA0L          DATA 0xf9
0000            195   _PCA0MD         DATA 0xd9
0000            196   _PCA0POL        DATA 0x96
0000            197   _PCA0PWM        DATA 0xf7
0000            198   _PCON0          DATA 0x87
0000            199   _PCON1          DATA 0xcd
0000            200   _PFE0CN         DATA 0xc1
0000            201   _PRTDRV         DATA 0xf6
0000            202   _PSCTL          DATA 0x8f
0000            203   _PSTAT0         DATA 0xaa
0000            204   _PSW            DATA 0xd0
0000            205   _REF0CN         DATA 0xd1
0000            206   _REG0CN         DATA 0xc9
0000            207   _REVID          DATA 0xb6
0000            208   _RSTSRC         DATA 0xef
0000            209   _SBCON1         DATA 0x94
0000            210   _SBRLH1         DATA 0x96
0000            211   _SBRLL1         DATA 0x95
0000            212   _SBUF           DATA 0x99
0000            213   _SBUF0          DATA 0x99
0000            214   _SBUF1          DATA 0x92
0000            215   _SCON           DATA 0x98
0000            216   _SCON0          DATA 0x98
0000            217   _SCON1          DATA 0xc8
0000            218   _SFRPAGE        DATA 0xa7
0000            219   _SFRPGCN        DATA 0xbc
0000            220   _SFRSTACK       DATA 0xd7
0000            221   _SMB0ADM        DATA 0xd6
0000            222   _SMB0ADR        DATA 0xd7
0000            223   _SMB0CF         DATA 0xc1
0000            224   _SMB0CN0        DATA 0xc0
0000            225   _SMB0DAT        DATA 0xc2
0000            226   _SMB0FCN0       DATA 0xc3
0000            227   _SMB0FCN1       DATA 0xc4
0000            228   _SMB0FCT        DATA 0xef
0000            229   _SMB0RXLN       DATA 0xc5
0000            230   _SMB0TC         DATA 0xac
0000            231   _SMOD1          DATA 0x93
0000            232   _SP             DATA 0x81
0000            233   _SPI0CFG        DATA 0xa1
0000            234   _SPI0CKR        DATA 0xa2
0000            235   _SPI0CN0        DATA 0xf8
0000            236   _SPI0DAT        DATA 0xa3
0000            237   _SPI0FCN0       DATA 0x9a
0000            238   _SPI0FCN1       DATA 0x9b
0000            239   _SPI0FCT        DATA 0xf7
0000            240   _SPI0PCF        DATA 0xdf
0000            241   _TCON           DATA 0x88
0000            242   _TH0            DATA 0x8c
0000            243   _TH1            DATA 0x8d
0000            244   _TL0            DATA 0x8a
0000            245   _TL1            DATA 0x8b
0000            246   _TMOD           DATA 0x89
0000            247   _TMR2CN0        DATA 0xc8
0000            248   _TMR2CN1        DATA 0xfd
0000            249   _TMR2H          DATA 0xcf
0000            250   _TMR2L          DATA 0xce
0000            251   _TMR2RLH        DATA 0xcb
0000            252   _TMR2RLL        DATA 0xca
0000            253   _TMR3CN0        DATA 0x91
0000            254   _TMR3CN1        DATA 0xfe
0000            255   _TMR3H          DATA 0x95
0000            256   _TMR3L          DATA 0x94
0000            257   _TMR3RLH        DATA 0x93
0000            258   _TMR3RLL        DATA 0x92
0000            259   _TMR4CN0        DATA 0x98
0000            260   _TMR4CN1        DATA 0xff
0000            261   _TMR4H          DATA 0xa5
0000            262   _TMR4L          DATA 0xa4
0000            263   _TMR4RLH        DATA 0xa3
0000            264   _TMR4RLL        DATA 0xa2
0000            265   _TMR5CN0        DATA 0xc0
0000            266   _TMR5CN1        DATA 0xf1
0000            267   _TMR5H          DATA 0xd5
0000            268   _TMR5L          DATA 0xd4
0000            269   _TMR5RLH        DATA 0xd3
0000            270   _TMR5RLL        DATA 0xd2
0000            271   _UART0PCF       DATA 0xd9
0000            272   _UART1FCN0      DATA 0x9d
0000            273   _UART1FCN1      DATA 0xd8
0000            274   _UART1FCT       DATA 0xfa
0000            275   _UART1LIN       DATA 0x9e
0000            276   _UART1PCF       DATA 0xda
0000            277   _VDM0CN         DATA 0xff
0000            278   _WDTCN          DATA 0x97
0000            279   _XBR0           DATA 0xe1
0000            280   _XBR1           DATA 0xe2
0000            281   _XBR2           DATA 0xe3
0000            282   _XOSC0CN        DATA 0x86
0000            283   _DPTR           DATA 0x8382
0000            284   _TMR2RL         DATA 0xcbca
0000            285   _TMR3RL         DATA 0x9392
0000            286   _TMR4RL         DATA 0xa3a2
0000            287   _TMR5RL         DATA 0xd3d2
0000            288   _TMR0           DATA 0x8c8a
0000            289   _TMR1           DATA 0x8d8b
0000            290   _TMR2           DATA 0xcfce
0000            291   _TMR3           DATA 0x9594
0000            292   _TMR4           DATA 0xa5a4
0000            293   _TMR5           DATA 0xd5d4
0000            294   _SBRL1          DATA 0x9695
0000            295   _PCA0           DATA 0xfaf9
0000            296   _PCA0CP0        DATA 0xfcfb
0000            297   _PCA0CP1        DATA 0xeae9
0000            298   _PCA0CP2        DATA 0xeceb
0000            299   _PCA0CP3        DATA 0xf5f4
0000            300   _PCA0CP4        DATA 0x8584
0000            301   _PCA0CP5        DATA 0xdedd
0000            302   _ADC0ASA        DATA 0xb6b5
0000            303   _ADC0GT         DATA 0xc4c3
0000            304   _ADC0           DATA 0xbebd
0000            305   _ADC0LT         DATA 0xc6c5
0000            306   _DAC0           DATA 0x8584
0000            307   _DAC1           DATA 0x8a89
0000            308   _DAC2           DATA 0x8c8b
0000            309   _DAC3           DATA 0x8e8d
0000            310   ;--------------------------------------------------------
0000            311   ; special function bits
0000            312   ;--------------------------------------------------------
0000            313   _ACC_0          BIT 0xe0
0000            314   _ACC_1          BIT 0xe1
0000            315   _ACC_2          BIT 0xe2
0000            316   _ACC_3          BIT 0xe3
0000            317   _ACC_4          BIT 0xe4
0000            318   _ACC_5          BIT 0xe5
0000            319   _ACC_6          BIT 0xe6
0000            320   _ACC_7          BIT 0xe7
0000            321   _TEMPE          BIT 0xe8
0000            322   _ADGN0          BIT 0xe9
0000            323   _ADGN1          BIT 0xea
0000            324   _ADWINT         BIT 0xeb
0000            325   _ADBUSY         BIT 0xec
0000            326   _ADINT          BIT 0xed
0000            327   _IPOEN          BIT 0xee
0000            328   _ADEN           BIT 0xef
0000            329   _B_0            BIT 0xf0
0000            330   _B_1            BIT 0xf1
0000            331   _B_2            BIT 0xf2
0000            332   _B_3            BIT 0xf3
0000            333   _B_4            BIT 0xf4
0000            334   _B_5            BIT 0xf5
0000            335   _B_6            BIT 0xf6
0000            336   _B_7            BIT 0xf7
0000            337   _C0FIF          BIT 0xe8
0000            338   _C0RIF          BIT 0xe9
0000            339   _C1FIF          BIT 0xea
0000            340   _C1RIF          BIT 0xeb
0000            341   _C2FIF          BIT 0xec
0000            342   _C2RIF          BIT 0xed
0000            343   _C3FIF          BIT 0xee
0000            344   _C3RIF          BIT 0xef
0000            345   _D1SRC0         BIT 0x88
0000            346   _D1SRC1         BIT 0x89
0000            347   _D1AMEN         BIT 0x8a
0000            348   _D01REFSL       BIT 0x8b
0000            349   _D3SRC0         BIT 0x8c
0000            350   _D3SRC1         BIT 0x8d
0000            351   _D3AMEN         BIT 0x8e
0000            352   _D23REFSL       BIT 0x8f
0000            353   _D0UDIS         BIT 0x98
0000            354   _D1UDIS         BIT 0x99
0000            355   _D2UDIS         BIT 0x9a
0000            356   _D3UDIS         BIT 0x9b
0000            357   _EX0            BIT 0xa8
0000            358   _ET0            BIT 0xa9
0000            359   _EX1            BIT 0xaa
0000            360   _ET1            BIT 0xab
0000            361   _ES0            BIT 0xac
0000            362   _ET2            BIT 0xad
0000            363   _ESPI0          BIT 0xae
0000            364   _EA             BIT 0xaf
0000            365   _PX0            BIT 0xb8
0000            366   _PT0            BIT 0xb9
0000            367   _PX1            BIT 0xba
0000            368   _PT1            BIT 0xbb
0000            369   _PS0            BIT 0xbc
0000            370   _PT2            BIT 0xbd
0000            371   _PSPI0          BIT 0xbe
0000            372   _P0_0           BIT 0x80
0000            373   _P0_1           BIT 0x81
0000            374   _P0_2           BIT 0x82
0000            375   _P0_3           BIT 0x83
0000            376   _P0_4           BIT 0x84
0000            377   _P0_5           BIT 0x85
0000            378   _P0_6           BIT 0x86
0000            379   _P0_7           BIT 0x87
0000            380   _P1_0           BIT 0x90
0000            381   _P1_1           BIT 0x91
0000            382   _P1_2           BIT 0x92
0000            383   _P1_3           BIT 0x93
0000            384   _P1_4           BIT 0x94
0000            385   _P1_5           BIT 0x95
0000            386   _P1_6           BIT 0x96
0000            387   _P1_7           BIT 0x97
0000            388   _P2_0           BIT 0xa0
0000            389   _P2_1           BIT 0xa1
0000            390   _P2_2           BIT 0xa2
0000            391   _P2_3           BIT 0xa3
0000            392   _P2_4           BIT 0xa4
0000            393   _P2_5           BIT 0xa5
0000            394   _P2_6           BIT 0xa6
0000            395   _P3_0           BIT 0xb0
0000            396   _P3_1           BIT 0xb1
0000            397   _P3_2           BIT 0xb2
0000            398   _P3_3           BIT 0xb3
0000            399   _P3_4           BIT 0xb4
0000            400   _P3_7           BIT 0xb7
0000            401   _CCF0           BIT 0xd8
0000            402   _CCF1           BIT 0xd9
0000            403   _CCF2           BIT 0xda
0000            404   _CCF3           BIT 0xdb
0000            405   _CCF4           BIT 0xdc
0000            406   _CCF5           BIT 0xdd
0000            407   _CR             BIT 0xde
0000            408   _CF             BIT 0xdf
0000            409   _PARITY         BIT 0xd0
0000            410   _F1             BIT 0xd1
0000            411   _OV             BIT 0xd2
0000            412   _RS0            BIT 0xd3
0000            413   _RS1            BIT 0xd4
0000            414   _F0             BIT 0xd5
0000            415   _AC             BIT 0xd6
0000            416   _CY             BIT 0xd7
0000            417   _RI             BIT 0x98
0000            418   _TI             BIT 0x99
0000            419   _RB8            BIT 0x9a
0000            420   _TB8            BIT 0x9b
0000            421   _REN            BIT 0x9c
0000            422   _CE             BIT 0x9d
0000            423   _SMODE          BIT 0x9e
0000            424   _RI1            BIT 0xc8
0000            425   _TI1            BIT 0xc9
0000            426   _RBX1           BIT 0xca
0000            427   _TBX1           BIT 0xcb
0000            428   _REN1           BIT 0xcc
0000            429   _PERR1          BIT 0xcd
0000            430   _OVR1           BIT 0xce
0000            431   _SI             BIT 0xc0
0000            432   _ACK            BIT 0xc1
0000            433   _ARBLOST        BIT 0xc2
0000            434   _ACKRQ          BIT 0xc3
0000            435   _STO            BIT 0xc4
0000            436   _STA            BIT 0xc5
0000            437   _TXMODE         BIT 0xc6
0000            438   _MASTER         BIT 0xc7
0000            439   _SPIEN          BIT 0xf8
0000            440   _TXNF           BIT 0xf9
0000            441   _NSSMD0         BIT 0xfa
0000            442   _NSSMD1         BIT 0xfb
0000            443   _RXOVRN         BIT 0xfc
0000            444   _MODF           BIT 0xfd
0000            445   _WCOL           BIT 0xfe
0000            446   _SPIF           BIT 0xff
0000            447   _IT0            BIT 0x88
0000            448   _IE0            BIT 0x89
0000            449   _IT1            BIT 0x8a
0000            450   _IE1            BIT 0x8b
0000            451   _TR0            BIT 0x8c
0000            452   _TF0            BIT 0x8d
0000            453   _TR1            BIT 0x8e
0000            454   _TF1            BIT 0x8f
0000            455   _T2XCLK0        BIT 0xc8
0000            456   _T2XCLK1        BIT 0xc9
0000            457   _TR2            BIT 0xca
0000            458   _T2SPLIT        BIT 0xcb
0000            459   _TF2CEN         BIT 0xcc
0000            460   _TF2LEN         BIT 0xcd
0000            461   _TF2L           BIT 0xce
0000            462   _TF2H           BIT 0xcf
0000            463   _T4XCLK0        BIT 0x98
0000            464   _T4XCLK1        BIT 0x99
0000            465   _TR4            BIT 0x9a
0000            466   _T4SPLIT        BIT 0x9b
0000            467   _TF4CEN         BIT 0x9c
0000            468   _TF4LEN         BIT 0x9d
0000            469   _TF4L           BIT 0x9e
0000            470   _TF4H           BIT 0x9f
0000            471   _T5XCLK0        BIT 0xc0
0000            472   _T5XCLK1        BIT 0xc1
0000            473   _TR5            BIT 0xc2
0000            474   _T5SPLIT        BIT 0xc3
0000            475   _TF5CEN         BIT 0xc4
0000            476   _TF5LEN         BIT 0xc5
0000            477   _TF5L           BIT 0xc6
0000            478   _TF5H           BIT 0xc7
0000            479   _RIE            BIT 0xd8
0000            480   _RXTO0          BIT 0xd9
0000            481   _RXTO1          BIT 0xda
0000            482   _RFRQ           BIT 0xdb
0000            483   _TIE            BIT 0xdc
0000            484   _TXHOLD         BIT 0xdd
0000            485   _TXNF1          BIT 0xde
0000            486   _TFRQ           BIT 0xdf
0000            487   ;--------------------------------------------------------
0000            488   ; overlayable register banks
0000            489   ;--------------------------------------------------------
0000            490            rbank0 segment data overlay
0000            491   ;--------------------------------------------------------
0000            492   ; internal ram data
0000            493   ;--------------------------------------------------------
0000            494            rseg R_DSEG
0000            495   _main_cmdbuff_1_107:
0000            496            ds 2
0002            497   ;--------------------------------------------------------
0002            498   ; overlayable items in internal ram 
0002            499   ;--------------------------------------------------------
0000            500            rseg    R_OSEG
0000            501            rseg    R_OSEG
0000            502            rseg    R_OSEG
0000            503            rseg    R_OSEG
0000            504   _Check_Data_Integrity_i_1_99:
0000            505            ds 1
0001            506            rseg    R_OSEG
0001            507   _Extract_RXData_PARM_2:
0001            508            ds 3
0004            509   ;--------------------------------------------------------
0004            510   ; indirectly addressable internal ram data
0004            511   ;--------------------------------------------------------
0000            512            rseg R_ISEG
0000            513   _tbuff:
0000            514            ds 20
0014            515   _rbuff:
0014            516            ds 20
0028            517   _buff:
0028            518            ds 20
003C            519   ;--------------------------------------------------------
003C            520   ; absolute internal ram data
003C            521   ;--------------------------------------------------------
0000            522            DSEG
0000            523   ;--------------------------------------------------------
0000            524   ; bit data
0000            525   ;--------------------------------------------------------
0000            526            rseg R_BSEG
0000            527   ;--------------------------------------------------------
0000            528   ; paged external ram data
0000            529   ;--------------------------------------------------------
0000            530            rseg R_PSEG
0000            531   ;--------------------------------------------------------
0000            532   ; external ram data
0000            533   ;--------------------------------------------------------
0000            534            rseg R_XSEG
0000            535   ;--------------------------------------------------------
0000            536   ; absolute external ram data
0000            537   ;--------------------------------------------------------
0000            538            XSEG
0000            539   ;--------------------------------------------------------
0000            540   ; external initialized ram data
0000            541   ;--------------------------------------------------------
0000            542            rseg R_IXSEG
0000            543            rseg R_HOME
0000            544            rseg R_GSINIT
0000            545            rseg R_CSEG
0000            546   ;--------------------------------------------------------
0000            547   ; Reset entry point and interrupt vectors
0000            548   ;--------------------------------------------------------
0000            549            CSEG at 0x0000
0000 020000     550            ljmp    _crt0
0003            551   ;--------------------------------------------------------
0003            552   ; global & static initialisations
0003            553   ;--------------------------------------------------------
0000            554            rseg R_HOME
0000            555            rseg R_GSINIT
0000            556            rseg R_GSINIT
0000            557   ;--------------------------------------------------------
0000            558   ; data variables initialization
0000            559   ;--------------------------------------------------------
0000            560            rseg R_DINIT
0000            561            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            562   ;--------------------------------------------------------
0000            563   ; code
0000            564   ;--------------------------------------------------------
0000            565            rseg R_CSEG
0000            566   ;------------------------------------------------------------
0000            567   ;Allocation info for local variables in function '_c51_external_startup'
0000            568   ;------------------------------------------------------------
0000            569   ;------------------------------------------------------------
0000            570   ;        Device.c:13: char _c51_external_startup (void)
0000            571   ;        -----------------------------------------
0000            572   ;         function _c51_external_startup
0000            573   ;        -----------------------------------------
0000            574   __c51_external_startup:
0000            575            using   0
0000            576   ;        Device.c:16: SFRPAGE = 0x00;
0000 75A700     577            mov     _SFRPAGE,#0x00
0003            578   ;        Device.c:17: WDTCN = 0xDE; //First key
0003 7597DE     579            mov     _WDTCN,#0xDE
0006            580   ;        Device.c:18: WDTCN = 0xAD; //Second key
0006 7597AD     581            mov     _WDTCN,#0xAD
0009            582   ;        Device.c:20: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     583            mov     _VDM0CN,#0x80
000C            584   ;        Device.c:21: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     585            mov     _RSTSRC,#0x06
000F            586   ;        Device.c:28: SFRPAGE = 0x10;
000F 75A710     587            mov     _SFRPAGE,#0x10
0012            588   ;        Device.c:29: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     589            mov     _PFE0CN,#0x20
0015            590   ;        Device.c:30: SFRPAGE = 0x00;
0015 75A700     591            mov     _SFRPAGE,#0x00
0018            592   ;        Device.c:51: CLKSEL = 0x00;
0018 75A900     593            mov     _CLKSEL,#0x00
001B            594   ;        Device.c:52: CLKSEL = 0x00;
001B 75A900     595            mov     _CLKSEL,#0x00
001E            596   ;        Device.c:53: while ((CLKSEL & 0x80) == 0);
001E            597   L002001?:
001E E5A9       598            mov     a,_CLKSEL
0020 30E770     599            jnb     acc.7,L002001?
0023            600   ;        Device.c:54: CLKSEL = 0x03;
0023 75A903     601            mov     _CLKSEL,#0x03
0026            602   ;        Device.c:55: CLKSEL = 0x03;
0026 75A903     603            mov     _CLKSEL,#0x03
0029            604   ;        Device.c:56: while ((CLKSEL & 0x80) == 0);
0029            605   L002004?:
0029 E5A9       606            mov     a,_CLKSEL
002B 30E730     607            jnb     acc.7,L002004?
002E            608   ;        Device.c:61: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     609            orl     _P0MDOUT,#0x11
0031            610   ;        Device.c:62: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     611            orl     _P2MDOUT,#0x01
0034            612   ;        Device.c:63: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     613            mov     _XBR0,#0x01
0037            614   ;        Device.c:64: XBR1     = 0X00;
0037 75E200     615            mov     _XBR1,#0x00
003A            616   ;        Device.c:65: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     617            mov     _XBR2,#0x41
003D            618   ;        Device.c:71: SCON0 = 0x10;
003D 759810     619            mov     _SCON0,#0x10
0040            620   ;        Device.c:72: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     621            mov     _TH1,#0xE6
0043            622   ;        Device.c:73: TL1 = TH1;      // Init Timer1
0043 858D8B     623            mov     _TL1,_TH1
0046            624   ;        Device.c:74: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     625            anl     _TMOD,#0x0F
0049            626   ;        Device.c:75: TMOD |=  0x20;                       
0049 438920     627            orl     _TMOD,#0x20
004C            628   ;        Device.c:76: TR1 = 1; // START Timer1
004C D28E       629            setb    _TR1
004E            630   ;        Device.c:77: TI = 1;  // Indicate TX0 ready
004E D299       631            setb    _TI
0050            632   ;        Device.c:79: return 0;
0050 758200     633            mov     dpl,#0x00
0053 22         634            ret
0054            635   ;------------------------------------------------------------
0054            636   ;Allocation info for local variables in function 'Timer3us'
0054            637   ;------------------------------------------------------------
0054            638   ;us                        Allocated to registers r2 
0054            639   ;i                         Allocated to registers r3 
0054            640   ;------------------------------------------------------------
0054            641   ;        Device.c:83: void Timer3us(unsigned char us)
0054            642   ;        -----------------------------------------
0054            643   ;         function Timer3us
0054            644   ;        -----------------------------------------
0054            645   _Timer3us:
0054 AA82       646            mov     r2,dpl
0056            647   ;        Device.c:88: CKCON0|=0b_0100_0000;
0056 438E40     648            orl     _CKCON0,#0x40
0059            649   ;        Device.c:90: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0059 7592B8     650            mov     _TMR3RL,#0xB8
005C 7593FF     651            mov     (_TMR3RL >> 8),#0xFF
005F            652   ;        Device.c:91: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
005F 859294     653            mov     _TMR3,_TMR3RL
0062 859395     654            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0065            655   ;        Device.c:93: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0065 759104     656            mov     _TMR3CN0,#0x04
0068            657   ;        Device.c:94: for (i = 0; i < us; i++)       // Count <us> overflows
0068 7B00       658            mov     r3,#0x00
006A            659   L003004?:
006A C3         660            clr     c
006B EB         661            mov     a,r3
006C 9A         662            subb    a,r2
006D 5000       663            jnc     L003007?
006F            664   ;        Device.c:96: while (!(TMR3CN0 & 0x80));  // Wait for overflow
006F            665   L003001?:
006F E591       666            mov     a,_TMR3CN0
0071 30E770     667            jnb     acc.7,L003001?
0074            668   ;        Device.c:97: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0074 53917F     669            anl     _TMR3CN0,#0x7F
0077            670   ;        Device.c:94: for (i = 0; i < us; i++)       // Count <us> overflows
0077 0B         671            inc     r3
0078 8000       672            sjmp    L003004?
007A            673   L003007?:
007A            674   ;        Device.c:99: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
007A 759100     675            mov     _TMR3CN0,#0x00
007D 22         676            ret
007E            677   ;------------------------------------------------------------
007E            678   ;Allocation info for local variables in function 'waitms'
007E            679   ;------------------------------------------------------------
007E            680   ;ms                        Allocated to registers r2 r3 
007E            681   ;j                         Allocated to registers r4 r5 
007E            682   ;k                         Allocated to registers r6 
007E            683   ;------------------------------------------------------------
007E            684   ;        Device.c:102: void waitms (unsigned int ms)
007E            685   ;        -----------------------------------------
007E            686   ;         function waitms
007E            687   ;        -----------------------------------------
007E            688   _waitms:
007E AA82       689            mov     r2,dpl
0080 AB83       690            mov     r3,dph
0082            691   ;        Device.c:106: for(j=0; j<ms; j++)
0082 7C00       692            mov     r4,#0x00
0084 7D00       693            mov     r5,#0x00
0086            694   L004005?:
0086 C3         695            clr     c
0087 EC         696            mov     a,r4
0088 9A         697            subb    a,r2
0089 ED         698            mov     a,r5
008A 9B         699            subb    a,r3
008B 5000       700            jnc     L004009?
008D            701   ;        Device.c:107: for (k=0; k<4; k++) Timer3us(250);
008D 7E00       702            mov     r6,#0x00
008F            703   L004001?:
008F BE0470     704            cjne    r6,#0x04,L004018?
0092            705   L004018?:
0092 5000       706            jnc     L004007?
0094 7582FA     707            mov     dpl,#0xFA
0097 C002       708            push    ar2
0099 C003       709            push    ar3
009B C004       710            push    ar4
009D C005       711            push    ar5
009F C006       712            push    ar6
00A1 120000     713            lcall   _Timer3us
00A4 D006       714            pop     ar6
00A6 D005       715            pop     ar5
00A8 D004       716            pop     ar4
00AA D003       717            pop     ar3
00AC D002       718            pop     ar2
00AE 0E         719            inc     r6
00AF 8000       720            sjmp    L004001?
00B1            721   L004007?:
00B1            722   ;        Device.c:106: for(j=0; j<ms; j++)
00B1 0C         723            inc     r4
00B2 BC0030     724            cjne    r4,#0x00,L004005?
00B5 0D         725            inc     r5
00B6 8000       726            sjmp    L004005?
00B8            727   L004009?:
00B8 22         728            ret
00B9            729   ;------------------------------------------------------------
00B9            730   ;Allocation info for local variables in function 'UART1_Init'
00B9            731   ;------------------------------------------------------------
00B9            732   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00B9            733   ;------------------------------------------------------------
00B9            734   ;        Device.c:110: void UART1_Init (unsigned long baudrate)
00B9            735   ;        -----------------------------------------
00B9            736   ;         function UART1_Init
00B9            737   ;        -----------------------------------------
00B9            738   _UART1_Init:
00B9 AA82       739            mov     r2,dpl
00BB AB83       740            mov     r3,dph
00BD ACF0       741            mov     r4,b
00BF FD         742            mov     r5,a
00C0            743   ;        Device.c:112: SFRPAGE = 0x20;
00C0 75A720     744            mov     _SFRPAGE,#0x20
00C3            745   ;        Device.c:113: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00C3 75930C     746            mov     _SMOD1,#0x0C
00C6            747   ;        Device.c:114: SCON1 = 0x10;
00C6 75C810     748            mov     _SCON1,#0x10
00C9            749   ;        Device.c:115: SBCON1 =0x00;   // disable baud rate generator
00C9 759400     750            mov     _SBCON1,#0x00
00CC            751   ;        Device.c:116: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00CC 8A00       752            mov     __divulong_PARM_2,r2
00CE 8B01       753            mov     (__divulong_PARM_2 + 1),r3
00D0 8C02       754            mov     (__divulong_PARM_2 + 2),r4
00D2 8D03       755            mov     (__divulong_PARM_2 + 3),r5
00D4 90A200     756            mov     dptr,#0xA200
00D7 75F04A     757            mov     b,#0x4A
00DA 7404       758            mov     a,#0x04
00DC 120000     759            lcall   __divulong
00DF AA82       760            mov     r2,dpl
00E1 AB83       761            mov     r3,dph
00E3 ACF0       762            mov     r4,b
00E5 FD         763            mov     r5,a
00E6 750018     764            mov     __divulong_PARM_2,#0x18
00E9 E4         765            clr     a
00EA F501       766            mov     (__divulong_PARM_2 + 1),a
00EC F502       767            mov     (__divulong_PARM_2 + 2),a
00EE F503       768            mov     (__divulong_PARM_2 + 3),a
00F0 8A82       769            mov     dpl,r2
00F2 8B83       770            mov     dph,r3
00F4 8CF0       771            mov     b,r4
00F6 ED         772            mov     a,r5
00F7 120000     773            lcall   __divulong
00FA AA82       774            mov     r2,dpl
00FC AB83       775            mov     r3,dph
00FE ACF0       776            mov     r4,b
0100 FD         777            mov     r5,a
0101 E4         778            clr     a
0102 C3         779            clr     c
0103 9A         780            subb    a,r2
0104 FA         781            mov     r2,a
0105 E4         782            clr     a
0106 9B         783            subb    a,r3
0107 FB         784            mov     r3,a
0108 7401       785            mov     a,#0x01
010A 9C         786            subb    a,r4
010B E4         787            clr     a
010C 9D         788            subb    a,r5
010D 8A95       789            mov     _SBRL1,r2
010F 8B96       790            mov     (_SBRL1 >> 8),r3
0111            791   ;        Device.c:117: TI1 = 1; // indicate ready for TX
0111 D2C9       792            setb    _TI1
0113            793   ;        Device.c:118: SBCON1 |= 0x40;   // enable baud rate generator
0113 439440     794            orl     _SBCON1,#0x40
0116            795   ;        Device.c:119: SFRPAGE = 0x00;
0116 75A700     796            mov     _SFRPAGE,#0x00
0119 22         797            ret
011A            798   ;------------------------------------------------------------
011A            799   ;Allocation info for local variables in function 'putchar1'
011A            800   ;------------------------------------------------------------
011A            801   ;c                         Allocated to registers r2 
011A            802   ;------------------------------------------------------------
011A            803   ;        Device.c:122: void putchar1 (char c) 
011A            804   ;        -----------------------------------------
011A            805   ;         function putchar1
011A            806   ;        -----------------------------------------
011A            807   _putchar1:
011A AA82       808            mov     r2,dpl
011C            809   ;        Device.c:124: SFRPAGE = 0x20;
011C 75A720     810            mov     _SFRPAGE,#0x20
011F            811   ;        Device.c:125: while (!TI1);
011F            812   L006001?:
011F            813   ;        Device.c:126: TI1=0;
011F 10C930     814            jbc     _TI1,L006008?
0122 8000       815            sjmp    L006001?
0124            816   L006008?:
0124            817   ;        Device.c:127: SBUF1 = c;
0124 8A92       818            mov     _SBUF1,r2
0126            819   ;        Device.c:128: SFRPAGE = 0x00;
0126 75A700     820            mov     _SFRPAGE,#0x00
0129 22         821            ret
012A            822   ;------------------------------------------------------------
012A            823   ;Allocation info for local variables in function 'sendstr1'
012A            824   ;------------------------------------------------------------
012A            825   ;s                         Allocated to registers r2 r3 r4 
012A            826   ;------------------------------------------------------------
012A            827   ;        Device.c:131: void sendstr1 (char * s)
012A            828   ;        -----------------------------------------
012A            829   ;         function sendstr1
012A            830   ;        -----------------------------------------
012A            831   _sendstr1:
012A AA82       832            mov     r2,dpl
012C AB83       833            mov     r3,dph
012E ACF0       834            mov     r4,b
0130            835   ;        Device.c:133: while(*s)
0130            836   L007001?:
0130 8A82       837            mov     dpl,r2
0132 8B83       838            mov     dph,r3
0134 8CF0       839            mov     b,r4
0136 120000     840            lcall   __gptrget
0139 FD         841            mov     r5,a
013A 6000       842            jz      L007004?
013C            843   ;        Device.c:135: putchar1(*s);
013C 8D82       844            mov     dpl,r5
013E C002       845            push    ar2
0140 C003       846            push    ar3
0142 C004       847            push    ar4
0144 120000     848            lcall   _putchar1
0147 D004       849            pop     ar4
0149 D003       850            pop     ar3
014B D002       851            pop     ar2
014D            852   ;        Device.c:136: s++;      
014D 0A         853            inc     r2
014E BA00B0     854            cjne    r2,#0x00,L007001?
0151 0B         855            inc     r3
0152 8000       856            sjmp    L007001?
0154            857   L007004?:
0154 22         858            ret
0155            859   ;------------------------------------------------------------
0155            860   ;Allocation info for local variables in function 'getchar1'
0155            861   ;------------------------------------------------------------
0155            862   ;c                         Allocated to registers 
0155            863   ;------------------------------------------------------------
0155            864   ;        Device.c:140: char getchar1 (void)
0155            865   ;        -----------------------------------------
0155            866   ;         function getchar1
0155            867   ;        -----------------------------------------
0155            868   _getchar1:
0155            869   ;        Device.c:143: SFRPAGE = 0x20;
0155 75A720     870            mov     _SFRPAGE,#0x20
0158            871   ;        Device.c:144: while (!RI1);
0158            872   L008001?:
0158            873   ;        Device.c:145: RI1=0;
0158 10C870     874            jbc     _RI1,L008008?
015B 8000       875            sjmp    L008001?
015D            876   L008008?:
015D            877   ;        Device.c:147: SCON1&=0b_0011_1111;
015D 53C83F     878            anl     _SCON1,#0x3F
0160            879   ;        Device.c:148: c = SBUF1;
0160 859282     880            mov     dpl,_SBUF1
0163            881   ;        Device.c:149: SFRPAGE = 0x00;
0163 75A700     882            mov     _SFRPAGE,#0x00
0166            883   ;        Device.c:150: return (c);
0166 22         884            ret
0167            885   ;------------------------------------------------------------
0167            886   ;Allocation info for local variables in function 'getchar1_with_timeout'
0167            887   ;------------------------------------------------------------
0167            888   ;c                         Allocated to registers 
0167            889   ;timeout                   Allocated to registers r2 r3 
0167            890   ;------------------------------------------------------------
0167            891   ;        Device.c:153: char getchar1_with_timeout (void)
0167            892   ;        -----------------------------------------
0167            893   ;         function getchar1_with_timeout
0167            894   ;        -----------------------------------------
0167            895   _getchar1_with_timeout:
0167            896   ;        Device.c:157: SFRPAGE = 0x20;
0167 75A720     897            mov     _SFRPAGE,#0x20
016A            898   ;        Device.c:159: while (!RI1)
016A 7A00       899            mov     r2,#0x00
016C 7B00       900            mov     r3,#0x00
016E            901   L009003?:
016E 20C8F0     902            jb      _RI1,L009005?
0171            903   ;        Device.c:161: SFRPAGE = 0x00;
0171 75A700     904            mov     _SFRPAGE,#0x00
0174            905   ;        Device.c:162: Timer3us(20);
0174 758214     906            mov     dpl,#0x14
0177 C002       907            push    ar2
0179 C003       908            push    ar3
017B 120000     909            lcall   _Timer3us
017E D003       910            pop     ar3
0180 D002       911            pop     ar2
0182            912   ;        Device.c:163: SFRPAGE = 0x20;
0182 75A720     913            mov     _SFRPAGE,#0x20
0185            914   ;        Device.c:164: timeout++;
0185 0A         915            inc     r2
0186 BA00B0     916            cjne    r2,#0x00,L009012?
0189 0B         917            inc     r3
018A            918   L009012?:
018A            919   ;        Device.c:165: if(timeout==25000)
018A BAA8B0     920            cjne    r2,#0xA8,L009003?
018D BB61B0     921            cjne    r3,#0x61,L009003?
0190            922   ;        Device.c:167: SFRPAGE = 0x00;
0190 75A700     923            mov     _SFRPAGE,#0x00
0193            924   ;        Device.c:168: return ('\n'); // Timeout after half second
0193 75820A     925            mov     dpl,#0x0A
0196 22         926            ret
0197            927   L009005?:
0197            928   ;        Device.c:171: RI1=0;
0197 C2C8       929            clr     _RI1
0199            930   ;        Device.c:173: SCON1&=0b_0011_1111;
0199 53C83F     931            anl     _SCON1,#0x3F
019C            932   ;        Device.c:174: c = SBUF1;
019C 859282     933            mov     dpl,_SBUF1
019F            934   ;        Device.c:175: SFRPAGE = 0x00;
019F 75A700     935            mov     _SFRPAGE,#0x00
01A2            936   ;        Device.c:176: return (c);
01A2 22         937            ret
01A3            938   ;------------------------------------------------------------
01A3            939   ;Allocation info for local variables in function 'getstr1'
01A3            940   ;------------------------------------------------------------
01A3            941   ;s                         Allocated to registers r2 r3 r4 
01A3            942   ;c                         Allocated to registers r5 
01A3            943   ;------------------------------------------------------------
01A3            944   ;        Device.c:179: void getstr1 (char * s)
01A3            945   ;        -----------------------------------------
01A3            946   ;         function getstr1
01A3            947   ;        -----------------------------------------
01A3            948   _getstr1:
01A3 AA82       949            mov     r2,dpl
01A5 AB83       950            mov     r3,dph
01A7 ACF0       951            mov     r4,b
01A9            952   ;        Device.c:183: while(1)
01A9            953   L010004?:
01A9            954   ;        Device.c:185: c=getchar1_with_timeout();
01A9 C002       955            push    ar2
01AB C003       956            push    ar3
01AD C004       957            push    ar4
01AF 120000     958            lcall   _getchar1_with_timeout
01B2 AD82       959            mov     r5,dpl
01B4 D004       960            pop     ar4
01B6 D003       961            pop     ar3
01B8 D002       962            pop     ar2
01BA            963   ;        Device.c:186: if(c=='\n')
01BA BD0AF0     964            cjne    r5,#0x0A,L010002?
01BD            965   ;        Device.c:188: *s=0;
01BD 8A82       966            mov     dpl,r2
01BF 8B83       967            mov     dph,r3
01C1 8CF0       968            mov     b,r4
01C3 E4         969            clr     a
01C4            970   ;        Device.c:189: return;
01C4 020000     971            ljmp    __gptrput
01C7            972   L010002?:
01C7            973   ;        Device.c:191: *s=c;
01C7 8A82       974            mov     dpl,r2
01C9 8B83       975            mov     dph,r3
01CB 8CF0       976            mov     b,r4
01CD ED         977            mov     a,r5
01CE 120000     978            lcall   __gptrput
01D1 A3         979            inc     dptr
01D2 AA82       980            mov     r2,dpl
01D4 AB83       981            mov     r3,dph
01D6            982   ;        Device.c:192: s++;
01D6 8000       983            sjmp    L010004?
01D8            984   ;------------------------------------------------------------
01D8            985   ;Allocation info for local variables in function 'RXU1'
01D8            986   ;------------------------------------------------------------
01D8            987   ;------------------------------------------------------------
01D8            988   ;        Device.c:197: bit RXU1 (void)
01D8            989   ;        -----------------------------------------
01D8            990   ;         function RXU1
01D8            991   ;        -----------------------------------------
01D8            992   _RXU1:
01D8            993   ;        Device.c:200: SFRPAGE = 0x20;
01D8 75A720     994            mov     _SFRPAGE,#0x20
01DB            995   ;        Device.c:201: mybit=RI1;
01DB A2C8       996            mov     c,_RI1
01DD            997   ;        Device.c:202: SFRPAGE = 0x00;
01DD 75A700     998            mov     _SFRPAGE,#0x00
01E0            999   ;        Device.c:203: return mybit;
01E0 22        1000            ret
01E1           1001   ;------------------------------------------------------------
01E1           1002   ;Allocation info for local variables in function 'waitms_or_RI1'
01E1           1003   ;------------------------------------------------------------
01E1           1004   ;ms                        Allocated to registers r2 r3 
01E1           1005   ;j                         Allocated to registers r4 r5 
01E1           1006   ;k                         Allocated to registers r6 
01E1           1007   ;------------------------------------------------------------
01E1           1008   ;        Device.c:206: void waitms_or_RI1 (unsigned int ms)
01E1           1009   ;        -----------------------------------------
01E1           1010   ;         function waitms_or_RI1
01E1           1011   ;        -----------------------------------------
01E1           1012   _waitms_or_RI1:
01E1 AA82      1013            mov     r2,dpl
01E3 AB83      1014            mov     r3,dph
01E5           1015   ;        Device.c:210: for(j=0; j<ms; j++)
01E5 7C00      1016            mov     r4,#0x00
01E7 7D00      1017            mov     r5,#0x00
01E9           1018   L012007?:
01E9 C3        1019            clr     c
01EA EC        1020            mov     a,r4
01EB 9A        1021            subb    a,r2
01EC ED        1022            mov     a,r5
01ED 9B        1023            subb    a,r3
01EE 5000      1024            jnc     L012011?
01F0           1025   ;        Device.c:212: for (k=0; k<4; k++)
01F0 7E00      1026            mov     r6,#0x00
01F2           1027   L012003?:
01F2 BE04B0    1028            cjne    r6,#0x04,L012019?
01F5           1029   L012019?:
01F5 5000      1030            jnc     L012009?
01F7           1031   ;        Device.c:214: if(RXU1()) return;
01F7 C002      1032            push    ar2
01F9 C003      1033            push    ar3
01FB C004      1034            push    ar4
01FD C005      1035            push    ar5
01FF C006      1036            push    ar6
0201 120000    1037            lcall   _RXU1
0204 E4        1038            clr     a
0205 33        1039            rlc     a
0206 D006      1040            pop     ar6
0208 D005      1041            pop     ar5
020A D004      1042            pop     ar4
020C D003      1043            pop     ar3
020E D002      1044            pop     ar2
0210 6000      1045            jz      L012002?
0212 22        1046            ret
0213           1047   L012002?:
0213           1048   ;        Device.c:215: Timer3us(250);
0213 7582FA    1049            mov     dpl,#0xFA
0216 C002      1050            push    ar2
0218 C003      1051            push    ar3
021A C004      1052            push    ar4
021C C005      1053            push    ar5
021E C006      1054            push    ar6
0220 120000    1055            lcall   _Timer3us
0223 D006      1056            pop     ar6
0225 D005      1057            pop     ar5
0227 D004      1058            pop     ar4
0229 D003      1059            pop     ar3
022B D002      1060            pop     ar2
022D           1061   ;        Device.c:212: for (k=0; k<4; k++)
022D 0E        1062            inc     r6
022E 8000      1063            sjmp    L012003?
0230           1064   L012009?:
0230           1065   ;        Device.c:210: for(j=0; j<ms; j++)
0230 0C        1066            inc     r4
0231 BC0030    1067            cjne    r4,#0x00,L012007?
0234 0D        1068            inc     r5
0235 8000      1069            sjmp    L012007?
0237           1070   L012011?:
0237 22        1071            ret
0238           1072   ;------------------------------------------------------------
0238           1073   ;Allocation info for local variables in function 'SendATCommand'
0238           1074   ;------------------------------------------------------------
0238           1075   ;s                         Allocated to registers r2 r3 r4 
0238           1076   ;------------------------------------------------------------
0238           1077   ;        Device.c:220: void SendATCommand (char * s)
0238           1078   ;        -----------------------------------------
0238           1079   ;         function SendATCommand
0238           1080   ;        -----------------------------------------
0238           1081   _SendATCommand:
0238 AA82      1082            mov     r2,dpl
023A AB83      1083            mov     r3,dph
023C ACF0      1084            mov     r4,b
023E           1085   ;        Device.c:222: printf("Command: %s", s);
023E C002      1086            push    ar2
0240 C003      1087            push    ar3
0242 C004      1088            push    ar4
0244 C002      1089            push    ar2
0246 C003      1090            push    ar3
0248 C004      1091            push    ar4
024A 7430      1092            mov     a,#__str_0
024C C0E0      1093            push    acc
024E 7453      1094            mov     a,#(__str_0 >> 8)
0250 C0E0      1095            push    acc
0252 7480      1096            mov     a,#0x80
0254 C0E0      1097            push    acc
0256 120000    1098            lcall   _printf
0259 E581      1099            mov     a,sp
025B 24FA      1100            add     a,#0xfa
025D F581      1101            mov     sp,a
025F           1102   ;        Device.c:223: P2_0=0; // 'set' pin to 0 is 'AT' mode.
025F C2A0      1103            clr     _P2_0
0261           1104   ;        Device.c:224: waitms(5);
0261 900005    1105            mov     dptr,#0x0005
0264 120000    1106            lcall   _waitms
0267 D004      1107            pop     ar4
0269 D003      1108            pop     ar3
026B D002      1109            pop     ar2
026D           1110   ;        Device.c:225: sendstr1(s);
026D 8A82      1111            mov     dpl,r2
026F 8B83      1112            mov     dph,r3
0271 8CF0      1113            mov     b,r4
0273 120000    1114            lcall   _sendstr1
0276           1115   ;        Device.c:226: getstr1(buff);
0276 9090C0    1116            mov     dptr,#_buff
0279 75F040    1117            mov     b,#0x40
027C 120000    1118            lcall   _getstr1
027F           1119   ;        Device.c:227: waitms(10);
027F 90000A    1120            mov     dptr,#0x000A
0282 120000    1121            lcall   _waitms
0285           1122   ;        Device.c:228: P2_0=1; // 'set' pin to 1 is normal operation mode.
0285 D2A0      1123            setb    _P2_0
0287           1124   ;        Device.c:229: printf("Response: %s\r\n", buff);
0287 74C0      1125            mov     a,#_buff
0289 C0E0      1126            push    acc
028B 7490      1127            mov     a,#(_buff >> 8)
028D C0E0      1128            push    acc
028F 7440      1129            mov     a,#0x40
0291 C0E0      1130            push    acc
0293 7470      1131            mov     a,#__str_1
0295 C0E0      1132            push    acc
0297 745A      1133            mov     a,#(__str_1 >> 8)
0299 C0E0      1134            push    acc
029B 7480      1135            mov     a,#0x80
029D C0E0      1136            push    acc
029F 120000    1137            lcall   _printf
02A2 E581      1138            mov     a,sp
02A4 24FA      1139            add     a,#0xfa
02A6 F581      1140            mov     sp,a
02A8 22        1141            ret
02A9           1142   ;------------------------------------------------------------
02A9           1143   ;Allocation info for local variables in function 'printCharAsBinary'
02A9           1144   ;------------------------------------------------------------
02A9           1145   ;c                         Allocated to registers r2 
02A9           1146   ;i                         Allocated to registers r3 r4 
02A9           1147   ;out                       Allocated to registers r5 
02A9           1148   ;------------------------------------------------------------
02A9           1149   ;        Device.c:232: void printCharAsBinary(char c) {
02A9           1150   ;        -----------------------------------------
02A9           1151   ;         function printCharAsBinary
02A9           1152   ;        -----------------------------------------
02A9           1153   _printCharAsBinary:
02A9 AA82      1154            mov     r2,dpl
02AB           1155   ;        Device.c:236: for (i = 7; i >= 0; i--) {
02AB 7B07      1156            mov     r3,#0x07
02AD 7C00      1157            mov     r4,#0x00
02AF           1158   L014001?:
02AF EC        1159            mov     a,r4
02B0 20E730    1160            jb      acc.7,L014004?
02B3           1161   ;        Device.c:237: out = (c >> i) & 1; // Shift right i bits, and mask all but the least significant bit
02B3 8BF0      1162            mov     b,r3
02B5 05F0      1163            inc     b
02B7 EA        1164            mov     a,r2
02B8 33        1165            rlc     a
02B9 92D2      1166            mov     ov,c
02BB EA        1167            mov     a,r2
02BC 8000      1168            sjmp    L014012?
02BE           1169   L014011?:
02BE A2D2      1170            mov     c,ov
02C0 13        1171            rrc     a
02C1           1172   L014012?:
02C1 D5F0B0    1173            djnz    b,L014011?
02C4 5401      1174            anl     a,#0x01
02C6           1175   ;        Device.c:238: printf("%d", out);
02C6 FD        1176            mov     r5,a
02C7 33        1177            rlc     a
02C8 95E0      1178            subb    a,acc
02CA FE        1179            mov     r6,a
02CB C002      1180            push    ar2
02CD C003      1181            push    ar3
02CF C004      1182            push    ar4
02D1 C005      1183            push    ar5
02D3 C006      1184            push    ar6
02D5 74B0      1185            mov     a,#__str_2
02D7 C0E0      1186            push    acc
02D9 744F      1187            mov     a,#(__str_2 >> 8)
02DB C0E0      1188            push    acc
02DD 7480      1189            mov     a,#0x80
02DF C0E0      1190            push    acc
02E1 120000    1191            lcall   _printf
02E4 E581      1192            mov     a,sp
02E6 24FB      1193            add     a,#0xfb
02E8 F581      1194            mov     sp,a
02EA D004      1195            pop     ar4
02EC D003      1196            pop     ar3
02EE D002      1197            pop     ar2
02F0           1198   ;        Device.c:236: for (i = 7; i >= 0; i--) {
02F0 1B        1199            dec     r3
02F1 BBFFF0    1200            cjne    r3,#0xff,L014013?
02F4 1C        1201            dec     r4
02F5           1202   L014013?:
02F5 8000      1203            sjmp    L014001?
02F7           1204   L014004?:
02F7           1205   ;        Device.c:240: printf("\n"); // Move to a new line after printing the binary representation
02F7 74B0      1206            mov     a,#__str_3
02F9 C0E0      1207            push    acc
02FB 7452      1208            mov     a,#(__str_3 >> 8)
02FD C0E0      1209            push    acc
02FF 7480      1210            mov     a,#0x80
0301 C0E0      1211            push    acc
0303 120000    1212            lcall   _printf
0306 1581      1213            dec     sp
0308 1581      1214            dec     sp
030A 1581      1215            dec     sp
030C 22        1216            ret
030D           1217   ;------------------------------------------------------------
030D           1218   ;Allocation info for local variables in function 'char2int'
030D           1219   ;------------------------------------------------------------
030D           1220   ;encoded                   Allocated to registers r2 
030D           1221   ;sign                      Allocated to registers r3 r4 
030D           1222   ;magnitude                 Allocated to registers 
030D           1223   ;------------------------------------------------------------
030D           1224   ;        Device.c:243: int char2int(char encoded) {
030D           1225   ;        -----------------------------------------
030D           1226   ;         function char2int
030D           1227   ;        -----------------------------------------
030D           1228   _char2int:
030D           1229   ;        Device.c:244: int sign = (encoded & 0x20) ? -1 : 1; // Check bit 5 for sign. Negative if set.
030D E582      1230            mov     a,dpl
030F FA        1231            mov     r2,a
0310 30E5B0    1232            jnb     acc.5,L015003?
0313 7BFF      1233            mov     r3,#0xFF
0315 8000      1234            sjmp    L015004?
0317           1235   L015003?:
0317 7B01      1236            mov     r3,#0x01
0319           1237   L015004?:
0319 EB        1238            mov     a,r3
031A 33        1239            rlc     a
031B 95E0      1240            subb    a,acc
031D FC        1241            mov     r4,a
031E           1242   ;        Device.c:245: int magnitude = encoded & 0x1F; // Extract the magnitude from bits 0-4.
031E 53021F    1243            anl     ar2,#0x1F
0321 8A00      1244            mov     __mulint_PARM_2,r2
0323 750100    1245            mov     (__mulint_PARM_2 + 1),#0x00
0326           1246   ;        Device.c:246: return sign * magnitude;
0326 8B82      1247            mov     dpl,r3
0328 8C83      1248            mov     dph,r4
032A 020000    1249            ljmp    __mulint
032D           1250   ;------------------------------------------------------------
032D           1251   ;Allocation info for local variables in function 'Check_Data_Integrity'
032D           1252   ;------------------------------------------------------------
032D           1253   ;s                         Allocated to registers r2 r3 r4 
032D           1254   ;c                         Allocated to registers 
032D           1255   ;i                         Allocated with name '_Check_Data_Integrity_i_1_99'
032D           1256   ;------------------------------------------------------------
032D           1257   ;        Device.c:250: int Check_Data_Integrity(char *s){
032D           1258   ;        -----------------------------------------
032D           1259   ;         function Check_Data_Integrity
032D           1260   ;        -----------------------------------------
032D           1261   _Check_Data_Integrity:
032D AA82      1262            mov     r2,dpl
032F AB83      1263            mov     r3,dph
0331 ACF0      1264            mov     r4,b
0333           1265   ;        Device.c:254: while(*s!=0xAC){
0333 7D00      1266            mov     r5,#0x00
0335           1267   L016004?:
0335           1268   ;        Device.c:256: s++;
0335 0A        1269            inc     r2
0336 BA0030    1270            cjne    r2,#0x00,L016024?
0339 0B        1271            inc     r3
033A           1272   L016024?:
033A           1273   ;        Device.c:257: i++;
033A 0D        1274            inc     r5
033B           1275   ;        Device.c:258: if(i == 19) return -1; //not found first bit 
033B BD1370    1276            cjne    r5,#0x13,L016004?
033E 90FFFF    1277            mov     dptr,#0xFFFF
0341           1278   ;        Device.c:272: return 0;
0341 22        1279            ret
0342           1280   ;------------------------------------------------------------
0342           1281   ;Allocation info for local variables in function 'Extract_RXData'
0342           1282   ;------------------------------------------------------------
0342           1283   ;d                         Allocated with name '_Extract_RXData_PARM_2'
0342           1284   ;s                         Allocated to registers r2 r3 r4 
0342           1285   ;c                         Allocated with name '_Extract_RXData_c_1_104'
0342           1286   ;i                         Allocated to registers 
0342           1287   ;------------------------------------------------------------
0342           1288   ;        Device.c:276: void Extract_RXData(char *s, char *d){
0342           1289   ;        -----------------------------------------
0342           1290   ;         function Extract_RXData
0342           1291   ;        -----------------------------------------
0342           1292   _Extract_RXData:
0342 AA82      1293            mov     r2,dpl
0344 AB83      1294            mov     r3,dph
0346           1295   ;        Device.c:279: while(*s!=0xAC){
0346 E5F0      1296            mov     a,b
0348 FC        1297            mov     r4,a
0349 E4        1298            clr     a
034A           1299   L017002?:
034A           1300   ;        Device.c:282: i++;
034A           1301   ;        Device.c:289: *d = *s;
034A 8000      1302            sjmp    L017002?
034C           1303   ;------------------------------------------------------------
034C           1304   ;Allocation info for local variables in function 'main'
034C           1305   ;------------------------------------------------------------
034C           1306   ;cnt                       Allocated to registers 
034C           1307   ;i                         Allocated to registers 
034C           1308   ;cmdbuff                   Allocated with name '_main_cmdbuff_1_107'
034C           1309   ;lmotor                    Allocated to registers r2 r3 
034C           1310   ;rmotor                    Allocated to registers r4 r5 
034C           1311   ;test                      Allocated to registers 
034C           1312   ;------------------------------------------------------------
034C           1313   ;        Device.c:293: void main (void)
034C           1314   ;        -----------------------------------------
034C           1315   ;         function main
034C           1316   ;        -----------------------------------------
034C           1317   _main:
034C           1318   ;        Device.c:302: waitms(500);
034C 9001F4    1319            mov     dptr,#0x01F4
034F 120000    1320            lcall   _waitms
0352           1321   ;        Device.c:303: printf("\r\nJDY-40 test\r\n");
0352 74F0      1322            mov     a,#__str_4
0354 C0E0      1323            push    acc
0356 7458      1324            mov     a,#(__str_4 >> 8)
0358 C0E0      1325            push    acc
035A 7480      1326            mov     a,#0x80
035C C0E0      1327            push    acc
035E 120000    1328            lcall   _printf
0361 1581      1329            dec     sp
0363 1581      1330            dec     sp
0365 1581      1331            dec     sp
0367           1332   ;        Device.c:304: UART1_Init(9600);
0367 902580    1333            mov     dptr,#0x2580
036A E4        1334            clr     a
036B F5F0      1335            mov     b,a
036D 120000    1336            lcall   _UART1_Init
0370           1337   ;        Device.c:320: SendATCommand("AT+DVIDA0C4\r\n");  
0370 905930    1338            mov     dptr,#__str_5
0373 75F080    1339            mov     b,#0x80
0376 120000    1340            lcall   _SendATCommand
0379           1341   ;        Device.c:323: SendATCommand("AT+VER\r\n");
0379 905970    1342            mov     dptr,#__str_6
037C 75F080    1343            mov     b,#0x80
037F 120000    1344            lcall   _SendATCommand
0382           1345   ;        Device.c:324: SendATCommand("AT+BAUD\r\n");
0382 906620    1346            mov     dptr,#__str_7
0385 75F080    1347            mov     b,#0x80
0388 120000    1348            lcall   _SendATCommand
038B           1349   ;        Device.c:325: SendATCommand("AT+RFID\r\n");
038B 9068A0    1350            mov     dptr,#__str_8
038E 75F080    1351            mov     b,#0x80
0391 120000    1352            lcall   _SendATCommand
0394           1353   ;        Device.c:326: SendATCommand("AT+DVID\r\n");
0394 906EE0    1354            mov     dptr,#__str_9
0397 75F080    1355            mov     b,#0x80
039A 120000    1356            lcall   _SendATCommand
039D           1357   ;        Device.c:327: SendATCommand("AT+RFC\r\n");
039D 9068E0    1358            mov     dptr,#__str_10
03A0 75F080    1359            mov     b,#0x80
03A3 120000    1360            lcall   _SendATCommand
03A6           1361   ;        Device.c:328: SendATCommand("AT+POWE\r\n");
03A6 906560    1362            mov     dptr,#__str_11
03A9 75F080    1363            mov     b,#0x80
03AC 120000    1364            lcall   _SendATCommand
03AF           1365   ;        Device.c:329: SendATCommand("AT+CLSS\r\n");
03AF 9064A0    1366            mov     dptr,#__str_12
03B2 75F080    1367            mov     b,#0x80
03B5 120000    1368            lcall   _SendATCommand
03B8           1369   ;        Device.c:331: printf("DEVICE SETUP COMPLETE\n\n");
03B8 7460      1370            mov     a,#__str_13
03BA C0E0      1371            push    acc
03BC 746D      1372            mov     a,#(__str_13 >> 8)
03BE C0E0      1373            push    acc
03C0 7480      1374            mov     a,#0x80
03C2 C0E0      1375            push    acc
03C4 120000    1376            lcall   _printf
03C7 1581      1377            dec     sp
03C9 1581      1378            dec     sp
03CB 1581      1379            dec     sp
03CD           1380   ;        Device.c:335: lmotor = 0;
03CD 7A00      1381            mov     r2,#0x00
03CF 7B00      1382            mov     r3,#0x00
03D1           1383   ;        Device.c:336: rmotor = 0;
03D1 7C00      1384            mov     r4,#0x00
03D3 7D00      1385            mov     r5,#0x00
03D5           1386   ;        Device.c:337: while(1)
03D5 7E00      1387            mov     r6,#0x00
03D7 7F00      1388            mov     r7,#0x00
03D9           1389   L018007?:
03D9           1390   ;        Device.c:376: if(RXU1()){
03D9 C002      1391            push    ar2
03DB C003      1392            push    ar3
03DD C004      1393            push    ar4
03DF C005      1394            push    ar5
03E1 C006      1395            push    ar6
03E3 C007      1396            push    ar7
03E5 120000    1397            lcall   _RXU1
03E8 E4        1398            clr     a
03E9 33        1399            rlc     a
03EA D007      1400            pop     ar7
03EC D006      1401            pop     ar6
03EE D005      1402            pop     ar5
03F0 D004      1403            pop     ar4
03F2 D003      1404            pop     ar3
03F4 D002      1405            pop     ar2
03F6 6000      1406            jz      L018007?
03F8           1407   ;        Device.c:377: getstr1(rbuff);
03F8 C004      1408            push    ar4
03FA C005      1409            push    ar5
03FC 909400    1410            mov     dptr,#_rbuff
03FF 75F040    1411            mov     b,#0x40
0402 C002      1412            push    ar2
0404 C003      1413            push    ar3
0406 C004      1414            push    ar4
0408 C005      1415            push    ar5
040A C006      1416            push    ar6
040C C007      1417            push    ar7
040E 120000    1418            lcall   _getstr1
0411 D007      1419            pop     ar7
0413 D006      1420            pop     ar6
0415 D005      1421            pop     ar5
0417 D004      1422            pop     ar4
0419 D003      1423            pop     ar3
041B D002      1424            pop     ar2
041D           1425   ;        Device.c:378: if(rbuff[8]=='C' && rbuff[10]=='T'){
041D 7808      1426            mov     r0,#(_rbuff + 0x0008)
041F 8604      1427            mov     ar4,@r0
0421 BC4320    1428            cjne    r4,#0x43,L018016?
0424 8000      1429            sjmp    L018017?
0426           1430   L018016?:
0426 D005      1431            pop     ar5
0428 D004      1432            pop     ar4
042A 8000      1433            sjmp    L018002?
042C           1434   L018017?:
042C D005      1435            pop     ar5
042E C005      1436            push    ar5
0430 780A      1437            mov     r0,#(_rbuff + 0x000a)
0432 8604      1438            mov     ar4,@r0
0434 BC54E0    1439            cjne    r4,#0x54,L018018?
0437 8000      1440            sjmp    L018019?
0439           1441   L018018?:
0439 D005      1442            pop     ar5
043B D004      1443            pop     ar4
043D 8000      1444            sjmp    L018002?
043F           1445   L018019?:
043F D005      1446            pop     ar5
0441 D004      1447            pop     ar4
0443           1448   ;        Device.c:379: lmotor = atoi(&rbuff[0]);
0443 909400    1449            mov     dptr,#_rbuff
0446 75F040    1450            mov     b,#0x40
0449 C006      1451            push    ar6
044B C007      1452            push    ar7
044D 120000    1453            lcall   _atoi
0450 AA82      1454            mov     r2,dpl
0452 AB83      1455            mov     r3,dph
0454 D007      1456            pop     ar7
0456 D006      1457            pop     ar6
0458           1458   ;        Device.c:380: rmotor = atoi(&rbuff[4]);
0458 909404    1459            mov     dptr,#(_rbuff + 0x0004)
045B 75F040    1460            mov     b,#0x40
045E C002      1461            push    ar2
0460 C003      1462            push    ar3
0462 C006      1463            push    ar6
0464 C007      1464            push    ar7
0466 120000    1465            lcall   _atoi
0469 AC82      1466            mov     r4,dpl
046B AD83      1467            mov     r5,dph
046D D007      1468            pop     ar7
046F D006      1469            pop     ar6
0471 D003      1470            pop     ar3
0473 D002      1471            pop     ar2
0475           1472   L018002?:
0475           1473   ;        Device.c:382: printf("%3d,%3d\n",lmotor,rmotor);
0475 C002      1474            push    ar2
0477 C003      1475            push    ar3
0479 C004      1476            push    ar4
047B C005      1477            push    ar5
047D C006      1478            push    ar6
047F C007      1479            push    ar7
0481 C004      1480            push    ar4
0483 C005      1481            push    ar5
0485 C002      1482            push    ar2
0487 C003      1483            push    ar3
0489 7420      1484            mov     a,#__str_14
048B C0E0      1485            push    acc
048D 7469      1486            mov     a,#(__str_14 >> 8)
048F C0E0      1487            push    acc
0491 7480      1488            mov     a,#0x80
0493 C0E0      1489            push    acc
0495 120000    1490            lcall   _printf
0498 E581      1491            mov     a,sp
049A 24F9      1492            add     a,#0xf9
049C F581      1493            mov     sp,a
049E D007      1494            pop     ar7
04A0 D006      1495            pop     ar6
04A2 D005      1496            pop     ar5
04A4 D004      1497            pop     ar4
04A6 D003      1498            pop     ar3
04A8 D002      1499            pop     ar2
04AA           1500   ;        Device.c:385: test++;
04AA 0E        1501            inc     r6
04AB BE0020    1502            cjne    r6,#0x00,L018020?
04AE 0F        1503            inc     r7
04AF           1504   L018020?:
04AF           1505   ;        Device.c:386: sprintf(tbuff,"%5d\n",test);
04AF C002      1506            push    ar2
04B1 C003      1507            push    ar3
04B3 C004      1508            push    ar4
04B5 C005      1509            push    ar5
04B7 C006      1510            push    ar6
04B9 C007      1511            push    ar7
04BB C006      1512            push    ar6
04BD C007      1513            push    ar7
04BF 7420      1514            mov     a,#__str_15
04C1 C0E0      1515            push    acc
04C3 7463      1516            mov     a,#(__str_15 >> 8)
04C5 C0E0      1517            push    acc
04C7 7480      1518            mov     a,#0x80
04C9 C0E0      1519            push    acc
04CB 7460      1520            mov     a,#_tbuff
04CD C0E0      1521            push    acc
04CF 74A7      1522            mov     a,#(_tbuff >> 8)
04D1 C0E0      1523            push    acc
04D3 7440      1524            mov     a,#0x40
04D5 C0E0      1525            push    acc
04D7 120000    1526            lcall   _sprintf
04DA E581      1527            mov     a,sp
04DC 24F8      1528            add     a,#0xf8
04DE F581      1529            mov     sp,a
04E0           1530   ;        Device.c:387: sendstr1(tbuff);
04E0 90A760    1531            mov     dptr,#_tbuff
04E3 75F040    1532            mov     b,#0x40
04E6 120000    1533            lcall   _sendstr1
04E9 D007      1534            pop     ar7
04EB D006      1535            pop     ar6
04ED D005      1536            pop     ar5
04EF D004      1537            pop     ar4
04F1 D003      1538            pop     ar3
04F3 D002      1539            pop     ar2
04F5 020000    1540            ljmp    L018007?
04F8           1541            rseg R_CSEG
04F8           1542   
0000           1543            rseg R_XINIT
0000           1544   
0000           1545            rseg R_CONST
0000           1546   __str_0:
0000 436F6D6D  1547            db 'Command: %s'
     616E643A
     202573
000B 00        1548            db 0x00
000C           1549   __str_1:
000C 52657370  1550            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        1551            db 0x0D
0019 0A        1552            db 0x0A
001A 00        1553            db 0x00
001B           1554   __str_2:
001B 2564      1555            db '%d'
001D 00        1556            db 0x00
001E           1557   __str_3:
001E 0A        1558            db 0x0A
001F 00        1559            db 0x00
0020           1560   __str_4:
0020 0D        1561            db 0x0D
0021 0A        1562            db 0x0A
0022 4A44592D  1563            db 'JDY-40 test'
     34302074
     657374
002D 0D        1564            db 0x0D
002E 0A        1565            db 0x0A
002F 00        1566            db 0x00
0030           1567   __str_5:
0030 41542B44  1568            db 'AT+DVIDA0C4'
     56494441
     304334
003B 0D        1569            db 0x0D
003C 0A        1570            db 0x0A
003D 00        1571            db 0x00
003E           1572   __str_6:
003E 41542B56  1573            db 'AT+VER'
     4552
0044 0D        1574            db 0x0D
0045 0A        1575            db 0x0A
0046 00        1576            db 0x00
0047           1577   __str_7:
0047 41542B42  1578            db 'AT+BAUD'
     415544
004E 0D        1579            db 0x0D
004F 0A        1580            db 0x0A
0050 00        1581            db 0x00
0051           1582   __str_8:
0051 41542B52  1583            db 'AT+RFID'
     464944
0058 0D        1584            db 0x0D
0059 0A        1585            db 0x0A
005A 00        1586            db 0x00
005B           1587   __str_9:
005B 41542B44  1588            db 'AT+DVID'
     564944
0062 0D        1589            db 0x0D
0063 0A        1590            db 0x0A
0064 00        1591            db 0x00
0065           1592   __str_10:
0065 41542B52  1593            db 'AT+RFC'
     4643
006B 0D        1594            db 0x0D
006C 0A        1595            db 0x0A
006D 00        1596            db 0x00
006E           1597   __str_11:
006E 41542B50  1598            db 'AT+POWE'
     4F5745
0075 0D        1599            db 0x0D
0076 0A        1600            db 0x0A
0077 00        1601            db 0x00
0078           1602   __str_12:
0078 41542B43  1603            db 'AT+CLSS'
     4C5353
007F 0D        1604            db 0x0D
0080 0A        1605            db 0x0A
0081 00        1606            db 0x00
0082           1607   __str_13:
0082 44455649  1608            db 'DEVICE SETUP COMPLETE'
     43452053
     45545550
     20434F4D
     504C4554
     45
0097 0A        1609            db 0x0A
0098 0A        1610            db 0x0A
0099 00        1611            db 0x00
009A           1612   __str_14:
009A 2533642C  1613            db '%3d,%3d'
     253364
00A1 0A        1614            db 0x0A
00A2 00        1615            db 0x00
00A3           1616   __str_15:
00A3 253564    1617            db '%5d'
00A6 0A        1618            db 0x0A
00A7 00        1619            db 0x00
00A8           1620   
0003           1621            CSEG
0003           1622   
0003           1623   end
